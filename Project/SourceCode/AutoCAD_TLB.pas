unit AutoCAD_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 09.07.2013 10:35:39 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\Common Files\Autodesk Shared\acax17enu.tlb (1)
// LIBID: {851A4561-F4EC-4631-9B0C-E7DC407512C9}
// LCID: 0
// Helpfile: C:\Program Files (x86)\Common Files\Autodesk Shared\ACADAUTO.CHM
// HelpString: AutoCAD 2007 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// Errors:
//   Hint: Parameter 'Type' of IAcadBlock.AddLeader changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadPolygonMesh.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadPolygonMesh.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcad3DPolyline.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcad3DPolyline.Type changed to 'Type_'
//   Hint: Parameter 'Object' of IAcad3DSolid.CheckInterference changed to 'Object_'
//   Hint: Parameter 'Object' of IAcadRegion.Boolean changed to 'Object_'
//   Hint: Parameter 'Type' of IAcadDimAligned.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAligned.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimension.VerticalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimension.VerticalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimAngular.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimDiametric.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRotated.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimOrdinate.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.ArrowheadType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadial.ArrowheadType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadLeader.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadLeader.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.ArrowheadType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.ArrowheadType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.VerticalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadLeader.VerticalTextPosition changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadPolyline.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAcadPolyline.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadTolerance.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadTolerance.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDim3PointAngular.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.ExtensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.HorizontalTextPosition changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.Arrowhead1Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimArcLength.Arrowhead2Type changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.CenterType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.CenterMarkSize changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.DimensionLineColor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.FractionFormat changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.LinearScaleFactor changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.ArrowheadType changed to 'Type_'
//   Hint: Parameter 'Type' of IAcadDimRadialLarge.ArrowheadType changed to 'Type_'
//   Hint: Parameter 'Object' of IAcadDictionary.GetName changed to 'Object_'
//   Hint: Member 'File' of 'IAcadUnderlay' changed to 'File_'
//   Hint: Parameter 'Type' of IAcadApplication.Zoom changed to 'Type_'
//   Hint: Symbol 'System' renamed to 'System_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Label' of IAcadPopupMenu.AddMenuItem changed to 'Label_'
//   Hint: Parameter 'Label' of IAcadPopupMenu.AddSubMenu changed to 'Label_'
//   Hint: Member 'Label' of 'IAcadPopupMenuItem' changed to 'Label_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Unit' of IAcadUtility.AngleToReal changed to 'Unit_'
//   Hint: Parameter 'Unit' of IAcadUtility.AngleToString changed to 'Unit_'
//   Hint: Parameter 'Unit' of IAcadUtility.DistanceToReal changed to 'Unit_'
//   Hint: Parameter 'Unit' of IAcadUtility.RealToString changed to 'Unit_'
//   Hint: Parameter 'Type' of IAcadUtility.CreateTypedArray changed to 'Type_'
//   Hint: Parameter 'Object' of IAcadUtility.GetEntity changed to 'Object_'
//   Hint: Parameter 'Object' of IAcadUtility.GetSubEntity changed to 'Object_'
//   Hint: Parameter 'Object' of _DAcadDocumentEvents.ObjectAdded changed to 'Object_'
//   Hint: Parameter 'Object' of _DAcadDocumentEvents.ObjectModified changed to 'Object_'
//   Error creating palette bitmap of (TAcadAcCmColor) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadSortentsTable) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadTableStyle) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadDatabase) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadSecurityParams) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadLayerStateManager) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
//   Error creating palette bitmap of (TAcadDocument) : Server C:\Program Files (x86)\AutoCAD 2007\acad.exe /Automation contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  AutoCADMajorVersion = 1;
  AutoCADMinorVersion = 0;

  LIBID_AutoCAD: TGUID = '{851A4561-F4EC-4631-9B0C-E7DC407512C9}';

  IID_IAcadObject: TGUID = '{EF942C4F-A848-4192-B7C2-94C680C264A1}';
  IID_IAcadDatabase: TGUID = '{A9625062-DC43-4D1C-9FC6-8512123BB91B}';
  IID_IAcadBlock: TGUID = '{165531B8-67A4-46D8-AC99-F8150FA7A412}';
  IID_IAcadModelSpace: TGUID = '{2B0C6EF1-BEFA-4CCD-B408-1A274E825C39}';
  IID_IAcadEntity: TGUID = '{E460D811-DFF0-4FCD-9D75-B440FA38263B}';
  IID_IAcadAcCmColor: TGUID = '{7382F647-BC48-456E-B877-D18F58BE6878}';
  IID_IAcadHyperlinks: TGUID = '{FE28743E-1DAD-48F5-936B-6924E68AE3BE}';
  IID_IAcadHyperlink: TGUID = '{82090F76-F6CB-4414-93E3-7A7EC8286BAC}';
  IID_IAcad3DFace: TGUID = '{C09A2DB0-CBD5-4106-A6EB-35736B3F5754}';
  IID_IAcadPolygonMesh: TGUID = '{8436D08F-6B44-4B65-AECB-4B3F570E38E8}';
  IID_IAcad3DPolyline: TGUID = '{B89275F4-543E-4EAF-A931-DAB1341A2B67}';
  IID_IAcadArc: TGUID = '{DD789CE5-850C-4FED-B9B7-34F4A7192DD7}';
  IID_IAcadAttribute: TGUID = '{090C78C3-33E1-451B-B00F-A58F7B62DA00}';
  IID_IAcad3DSolid: TGUID = '{DF94C736-F717-4469-A886-B9902747352D}';
  IID_IAcadRegion: TGUID = '{C9A07525-8E2B-4CEA-AE14-058FC16DB0E8}';
  IID_IAcadCircle: TGUID = '{8A7F2D00-0E8E-4228-8CB5-2E07B54ED2C4}';
  IID_IAcadDimension: TGUID = '{06B71947-9E46-4B8F-B277-812B172E02EA}';
  IID_IAcadDimAligned: TGUID = '{AB6BA922-5284-4D66-8D31-6E732B1645CC}';
  IID_IAcadDimAngular: TGUID = '{E0DA98A7-8B08-46A2-8B45-4BF873CB6CEF}';
  IID_IAcadDimDiametric: TGUID = '{CE984151-66ED-4500-B99D-85ACCEC10820}';
  IID_IAcadDimRotated: TGUID = '{D07DB6F3-DB36-4D70-BD1B-4B16CCD7B103}';
  IID_IAcadDimOrdinate: TGUID = '{8BBE360E-DC9A-4640-8597-C54166887E54}';
  IID_IAcadDimRadial: TGUID = '{FC56A33B-1DC1-42FE-B848-D469E375FC44}';
  IID_IAcadEllipse: TGUID = '{F64246E5-206A-42C2-B3E7-A725B2C07CFB}';
  IID_IAcadLeader: TGUID = '{D035FBCB-313A-4165-86A7-AAD91DA820E5}';
  IID_IAcadMText: TGUID = '{ED80FACC-C4E8-4370-B5F3-1EA7F3554324}';
  IID_IAcadPoint: TGUID = '{8F0BB516-7C5B-4BA4-820F-24B1E962D971}';
  IID_IAcadLWPolyline: TGUID = '{82DEE429-1C13-460B-88FA-C63E0CA33D21}';
  IID_IAcadPolyline: TGUID = '{A09B5650-3A79-41F7-A459-1817D6F1797C}';
  IID_IAcadRay: TGUID = '{BE71C3CD-270F-4A01-86F4-91694B267C19}';
  IID_IAcadShape: TGUID = '{822BD4B7-7F08-4871-80DD-FEA0C7E8BCD4}';
  IID_IAcadSolid: TGUID = '{23F23BC3-887A-4ED5-BDB7-8BAF1D820228}';
  IID_IAcadSpline: TGUID = '{D7727775-104A-4DBA-9CCF-0FBDC5B80872}';
  IID_IAcadText: TGUID = '{BA0222E2-D7FB-4BCB-BD71-714E7A598DAB}';
  IID_IAcadTolerance: TGUID = '{692212C8-D4A3-436A-ADE4-16C94BDC8A4C}';
  IID_IAcadTrace: TGUID = '{1CB82E58-CC76-4C8C-B1ED-D85C69B6A456}';
  IID_IAcadXline: TGUID = '{96FC51A1-B610-406F-990D-0652F53758A9}';
  IID_IAcadBlockReference: TGUID = '{17C1A78F-ECB3-4838-986C-FA92E17D41AB}';
  IID_IAcadHatch: TGUID = '{10D4F2FB-BEE7-47EB-B956-D5F51BC16221}';
  IID_IAcadRasterImage: TGUID = '{EE3833FA-927E-4272-A918-8B487E445600}';
  IID_IAcadLine: TGUID = '{BB0A29C2-AA57-4A39-A771-DD9987890AF7}';
  IID_IAcadPlotConfiguration: TGUID = '{9B36D1E0-C5B2-4E3F-8304-877E5E0557C4}';
  IID_IAcadLayout: TGUID = '{0B119218-2411-46DD-B7B9-17C8C009222C}';
  IID_IAcadMInsertBlock: TGUID = '{B56D093D-6BEA-4B50-A15B-34A3D5DFFFA0}';
  IID_IAcadPolyfaceMesh: TGUID = '{60A35C35-64B5-4751-99E7-259879896519}';
  IID_IAcadMLine: TGUID = '{61C46C50-B9BB-4B8E-9B10-E7AAABA3012B}';
  IID_IAcadDim3PointAngular: TGUID = '{BA16BE7C-0789-43DE-B371-8082AE3FA99A}';
  IID_IAcadExternalReference: TGUID = '{170C3BB6-7A0C-41DE-9872-7BDD7DD1174D}';
  IID_IAcadTable: TGUID = '{187D4409-BABE-43D8-8379-2AF11136DA16}';
  IID_IAcadDimArcLength: TGUID = '{FFCEA1F0-1C70-4342-9C14-929923139F4C}';
  IID_IAcadDimRadialLarge: TGUID = '{F0828C6C-9FF0-4DFF-A115-158FF79B241E}';
  IID_IAcadSection: TGUID = '{4EE05AF2-D6B9-4D79-9734-C175AC445099}';
  IID_IAcadSectionSettings: TGUID = '{BB124B3C-3174-4CB8-8157-E5EFD03347AD}';
  IID_IAcadSectionTypeSettings: TGUID = '{62E19FBE-3C3D-4377-9E2F-02F84B11980D}';
  IID_IAcadPaperSpace: TGUID = '{D9029681-BBAA-4436-B0F4-1EE43BF85BF9}';
  IID_IAcadPViewport: TGUID = '{A504EFDA-0C54-45F6-93B8-E127A92C3EA6}';
  IID_IAcadView: TGUID = '{B189A3C4-324E-4130-8516-381635BE10EF}';
  IID_IAcadBlocks: TGUID = '{D81C2652-A0CE-4302-BD1F-F8C4A4ADEABD}';
  IID_IAcadGroups: TGUID = '{10AA12FA-99E8-41B5-B4C3-BC7B54BC316D}';
  IID_IAcadGroup: TGUID = '{9C09D413-9CA2-462A-9D29-03CE60738E36}';
  IID_IAcadDimStyles: TGUID = '{C62F448E-753C-4DDF-B30D-873D0DAF9735}';
  IID_IAcadDimStyle: TGUID = '{9D568053-C3EF-41AD-9BE7-278F5DCDFF6D}';
  IID_IAcadLayers: TGUID = '{38ED835A-D1DE-42D6-A0FD-0A83A55885E7}';
  IID_IAcadLayer: TGUID = '{F3A8989F-5CAE-4E98-A185-E161FCF43127}';
  IID_IAcadLineTypes: TGUID = '{943058F5-B25A-470F-84E6-C6364FEC2635}';
  IID_IAcadLineType: TGUID = '{16DE7011-EE2C-4092-97C5-20A2CA6CDB25}';
  IID_IAcadDictionaries: TGUID = '{803BC722-4C89-4866-98B1-E4453C5F6287}';
  IID_IAcadDictionary: TGUID = '{C19C7CF6-CC9A-4C21-9B3D-C3ED22D5CF25}';
  IID_IAcadXRecord: TGUID = '{BD45EE03-5243-4466-813C-95E33F562665}';
  IID_IAcadRegisteredApplications: TGUID = '{5A832756-01AF-4D2F-89A6-50E0121AFD1A}';
  IID_IAcadRegisteredApplication: TGUID = '{0A1A95A8-60FB-4C44-8208-4E8ADCA32628}';
  IID_IAcadTextStyles: TGUID = '{617040CF-4E9D-4CC3-9814-AD69E0AB9751}';
  IID_IAcadTextStyle: TGUID = '{BDF006CF-A063-40B0-912C-AF478B1CE15B}';
  IID_IAcadUCSs: TGUID = '{BF4812B8-408D-4E07-B595-ACB8336B6A93}';
  IID_IAcadUCS: TGUID = '{78C244EF-F4CC-43C7-AA5D-91A496215310}';
  IID_IAcadViews: TGUID = '{65CD017C-09BF-4B8F-A7B3-0F797AF0E9BC}';
  IID_IAcadViewports: TGUID = '{98558EDE-E8B4-4870-9D78-15BE6370E1C1}';
  IID_IAcadViewport: TGUID = '{A62E3750-0A58-47D6-B84B-E3E337E5A2D2}';
  IID_IAcadLayouts: TGUID = '{1636A05E-7F68-4CEE-B93B-8F56BA299293}';
  IID_IAcadPlotConfigurations: TGUID = '{AD2543CB-31A8-4DDD-9162-845E11D7F72F}';
  IID_IAcadDatabasePreferences: TGUID = '{96435877-2FB6-4842-BD4F-7334ADF4B707}';
  IID_IAcadFileDependencies: TGUID = '{65156CBF-69F4-403C-AC21-682F839048DD}';
  IID_IAcadFileDependency: TGUID = '{F309A783-F98D-4B85-AE32-BE0470A8A370}';
  IID_IAcadSummaryInfo: TGUID = '{39EB94EF-3858-4DCF-8A69-3BEACBA10B7F}';
  IID_IAcadSectionManager: TGUID = '{ADB25D2B-4067-4D46-8B2B-6B9E9BA4D1AD}';
  IID_IAcadMaterials: TGUID = '{E2F7B997-2B44-4BD0-8EB6-16C819BE3EF3}';
  IID_IAcadMaterial: TGUID = '{5E69D338-33B4-40D3-9D02-ADA45791E720}';
  CLASS_AcadHyperlink: TGUID = '{988F4102-E6E3-4282-ACAC-55270827F2A8}';
  IID_IAcadDynamicBlockReferenceProperty: TGUID = '{8607EF79-E042-46C4-8DF9-E96946D5C33D}';
  CLASS_AcadDynamicBlockReferenceProperty: TGUID = '{0215A4C0-5431-4FD0-9B06-46589B5C4939}';
  CLASS_AcadAcCmColor: TGUID = '{C8C18F89-794D-466B-8B97-95634D9890EF}';
  IID_IAcadObjectEvents: TGUID = '{62998C8F-62F6-455F-806B-1604A1892F62}';
  CLASS_AcadObject: TGUID = '{9A21C6C5-27FC-4442-8590-575E7AFD73BB}';
  CLASS_AcadXRecord: TGUID = '{F5522F0C-962A-48AC-9992-E81B07628F1F}';
  IID_IAcadSortentsTable: TGUID = '{73166AEE-97AE-4F35-AD73-DFCD36E37C04}';
  CLASS_AcadSortentsTable: TGUID = '{048ED0E0-12CF-4C0F-9FFA-947C2FBE8C8E}';
  CLASS_AcadDimStyle: TGUID = '{B80687F9-FA4C-4735-9DC4-E5715F2BC698}';
  CLASS_AcadLayer: TGUID = '{BAE5802A-CF21-4F9C-AE04-D98F4036AC31}';
  CLASS_AcadLineType: TGUID = '{0D555CE0-304A-47A6-858B-B145209A3982}';
  CLASS_AcadMaterial: TGUID = '{76193B93-A799-44D6-96F2-76742437E097}';
  CLASS_AcadRegisteredApplication: TGUID = '{CC23CA32-9892-4FBA-A108-FE31CA0F35A6}';
  CLASS_AcadTextStyle: TGUID = '{F868EAEC-1B73-4F5E-BA73-90EBA94E75BE}';
  CLASS_AcadUCS: TGUID = '{849AFB5B-D6C9-4924-A712-F7118FF9611F}';
  CLASS_AcadView: TGUID = '{C061C82C-D041-4214-BB07-B608107CEFCB}';
  CLASS_AcadViewport: TGUID = '{1D625598-C876-4C51-8EF5-F9D8F96F62AA}';
  CLASS_AcadGroup: TGUID = '{08A60FF7-BB37-44F4-9759-0ADA6C7B9CC9}';
  CLASS_AcadPlotConfiguration: TGUID = '{EA34A0C0-5CE7-4701-A6FA-117D25CD5EBB}';
  CLASS_AcadLayout: TGUID = '{4A756F5F-CBA4-428B-B17F-AF80C0C8502D}';
  IID_IAcadIdPair: TGUID = '{AA1895FD-9DF5-4824-9597-8FB7EA336887}';
  CLASS_AcadIdPair: TGUID = '{14679E3B-C952-4998-8E13-4B1286E6DD99}';
  IID_IAcadTableStyle: TGUID = '{C1EF838D-1F50-4313-9A42-B290F14470AB}';
  CLASS_AcadTableStyle: TGUID = '{72EFC580-D085-4B81-8C55-26A79E445338}';
  CLASS_AcadSectionSettings: TGUID = '{26A325BD-C715-48C5-AE7D-8E9EBEE01922}';
  CLASS_AcadSectionTypeSettings: TGUID = '{F2A7D936-C8D3-4A96-B791-3DC0B718C507}';
  CLASS_AcadHyperlinks: TGUID = '{1481B385-759A-4B00-9257-E96357563999}';
  CLASS_AcadDictionary: TGUID = '{E70DE962-842A-4488-9481-1D0FD72A020F}';
  CLASS_AcadLayers: TGUID = '{E177A457-9EAA-43C3-A3CE-84874A28F6CA}';
  CLASS_AcadDimStyles: TGUID = '{794199C5-827C-41C8-8CB2-3A1EA056AF5E}';
  CLASS_AcadDictionaries: TGUID = '{89F0FC31-3B1D-494B-A75B-6BD4FA527B8A}';
  CLASS_AcadLineTypes: TGUID = '{C8EC7647-1E79-4F13-81D7-2EED803D0D22}';
  CLASS_AcadMaterials: TGUID = '{1CFD327B-45B3-4FD5-90B2-F89A57052783}';
  CLASS_AcadTextStyles: TGUID = '{BF224DC3-B602-4EEE-BFE9-9E4E0AED6837}';
  CLASS_AcadUCSs: TGUID = '{1EA072EE-57FD-495E-889C-8243C3BDBDBC}';
  CLASS_AcadRegisteredApplications: TGUID = '{713C0E8A-5AE8-4695-B442-5ED6C4FE5C42}';
  CLASS_AcadViews: TGUID = '{0B38CACA-3D3C-48EA-BEB5-7D95F4F6EE15}';
  CLASS_AcadViewports: TGUID = '{2709544A-5B24-4F9F-A5DA-CEC7297D3A4E}';
  CLASS_AcadGroups: TGUID = '{162EF0A1-5A33-46F2-ACCF-CA388B084A09}';
  CLASS_AcadBlocks: TGUID = '{64B99FDB-1D85-447F-98C7-569DBDA723DB}';
  CLASS_AcadLayouts: TGUID = '{6BCE6F6E-C050-4F39-BD98-E2743949F724}';
  CLASS_AcadPlotConfigurations: TGUID = '{12545889-6D32-4424-9967-1E1D7BD1F809}';
  CLASS_AcadEntity: TGUID = '{D66873EA-AAE5-41CC-8DD2-8CE3228E9F89}';
  IID_IAcadShadowDisplay: TGUID = '{3836C443-B84E-4F50-A3F5-D7DF6FF5366A}';
  CLASS_AcadRasterImage: TGUID = '{1FD7F53F-7ED5-439C-9A77-A3821CD09E98}';
  CLASS_Acad3DFace: TGUID = '{8AA16DFC-DFC6-4B51-8FA2-A5D812BE33BF}';
  CLASS_Acad3DPolyline: TGUID = '{46C56738-39C6-4240-8B9B-008CCD769A84}';
  CLASS_AcadRegion: TGUID = '{38C8B14E-7879-4DA9-8C3F-8CAAC359293A}';
  CLASS_Acad3DSolid: TGUID = '{70DBCAE8-8C2B-450C-9E1D-43E4686C6512}';
  CLASS_AcadArc: TGUID = '{EF01D98A-747B-4522-AD70-991B90855DBF}';
  CLASS_AcadAttribute: TGUID = '{E29F6C45-6927-4508-8F3F-34105FD3FC5F}';
  IID_IAcadAttributeReference: TGUID = '{A9930D00-3154-46E9-9101-E5E963F0D1FF}';
  CLASS_AcadAttributeReference: TGUID = '{40770568-0D5E-49D4-BE47-BC47A4F0B0A4}';
  CLASS_AcadBlockReference: TGUID = '{1E8A29BA-827D-4031-A4A3-AE7999B402F6}';
  CLASS_AcadCircle: TGUID = '{F78DCF7C-043D-45FC-9D21-676FC307BA3F}';
  CLASS_AcadEllipse: TGUID = '{48FEFCD7-5D7C-4E4A-9F11-60E69A31D4B1}';
  CLASS_AcadHatch: TGUID = '{FE718E8F-C3AA-4F30-9103-432450CF1DA1}';
  CLASS_AcadLeader: TGUID = '{FA97F7A7-FD19-4D55-ABF2-CFEFFF777426}';
  CLASS_AcadLWPolyline: TGUID = '{E9C07CEC-7B82-49E4-BBA2-7533B88E9D64}';
  CLASS_AcadLine: TGUID = '{4BD03680-3C0F-4501-AFF7-3D008586917F}';
  CLASS_AcadMText: TGUID = '{9906CDFC-DB2C-4126-9422-13139B148495}';
  CLASS_AcadPoint: TGUID = '{48270F9E-CCF6-4C79-B6FF-267C960E6425}';
  CLASS_AcadPolyline: TGUID = '{0C3393F8-94F5-4B79-8C01-49A2D0CC0FE9}';
  CLASS_AcadPolygonMesh: TGUID = '{DB207560-8449-4FAF-BDC2-61676EB012D4}';
  CLASS_AcadRay: TGUID = '{FD51ED8A-D518-4554-B236-B6E9D234FD03}';
  CLASS_AcadShape: TGUID = '{AC5CECFA-F03A-41D2-A89C-704C44935941}';
  CLASS_AcadSolid: TGUID = '{A6A3D586-44CF-44C2-A92C-620BB713B4F2}';
  CLASS_AcadSpline: TGUID = '{59A224A2-BEF8-4C89-96E0-83A5411ABB6C}';
  CLASS_AcadText: TGUID = '{E4222C78-3670-4BB1-9AD4-7D8F3E581F2D}';
  CLASS_AcadTolerance: TGUID = '{F40E2FF0-4D77-40B2-9A44-A3AEECCE8EFF}';
  CLASS_AcadTrace: TGUID = '{071339A1-1946-44B2-B63E-50459B15DB86}';
  CLASS_AcadXline: TGUID = '{2BCA857B-A18B-4AFA-B183-CC0E49C12058}';
  CLASS_AcadPViewport: TGUID = '{F196F03F-651A-43AF-BE34-D11942F24445}';
  CLASS_AcadMInsertBlock: TGUID = '{B1560245-190E-4BBD-81DF-9B642D0E5325}';
  CLASS_AcadPolyfaceMesh: TGUID = '{622F6193-E4DD-46E6-BC66-2ED88E9FD28D}';
  CLASS_AcadMLine: TGUID = '{87F5CF8F-A06D-498F-A05F-E520E6B570DB}';
  CLASS_AcadExternalReference: TGUID = '{B2A579E0-A797-40B1-8AEE-A8F6404719F8}';
  CLASS_AcadTable: TGUID = '{2C7D1157-7D50-4A88-9777-5EBBA3189AB8}';
  IID_IAcadOle: TGUID = '{83DA5978-433D-4873-B80A-E353D0AEC540}';
  CLASS_AcadOle: TGUID = '{475C7B4A-6964-4F9E-9708-05A16EAC31D0}';
  IID_IAcadHelix: TGUID = '{E0D0377A-C3ED-4F5A-87CE-2AAC3C141D32}';
  CLASS_AcadHelix: TGUID = '{DE74F5AD-DA2F-429F-BAF9-850A2808D585}';
  IID_IAcadSurface: TGUID = '{59747640-33C2-4824-B942-57E893619124}';
  CLASS_AcadSurface: TGUID = '{8ED07FEF-E1B0-4CC3-B2BA-D354828AB952}';
  IID_IAcadPlaneSurface: TGUID = '{4C19880A-0BAF-4899-80DB-1F672CFBF5FC}';
  CLASS_AcadPlaneSurface: TGUID = '{6451051B-AD22-4C6A-ACCE-013A0E1DDBC3}';
  IID_IAcadExtrudedSurface: TGUID = '{6069C4B0-6137-4076-B4F0-330CF31EE912}';
  CLASS_AcadExtrudedSurface: TGUID = '{C2D4ACCC-A3D1-4A0A-AD59-0DD8BA3D5EE1}';
  IID_IAcadRevolvedSurface: TGUID = '{0E305EE4-A4BB-4D14-A375-B3BAFC9D38C9}';
  CLASS_AcadRevolvedSurface: TGUID = '{9ECF83FB-23C5-43B6-83DE-93CFBDD74D4A}';
  IID_IAcadSweptSurface: TGUID = '{6F708280-7555-499F-B5E2-0248AB74AB2F}';
  CLASS_AcadSweptSurface: TGUID = '{FE054BB2-AF94-40AC-88AA-2F59F7018B1D}';
  IID_IAcadLoftedSurface: TGUID = '{59FBE27D-91AF-4934-B454-BE0688ABA89D}';
  CLASS_AcadLoftedSurface: TGUID = '{3497C2EC-5684-4B21-AF74-F6760E0221DC}';
  CLASS_AcadSection: TGUID = '{7C239DAB-BC87-45F3-B7B1-FCC1541A235B}';
  CLASS_AcadSectionManager: TGUID = '{8795DA35-54AA-4DCB-A065-E7397C8568A9}';
  IID_IAcadUnderlay: TGUID = '{1140D7A3-E582-4599-B98D-2387DAF35A71}';
  CLASS_AcadDwfUnderlay: TGUID = '{0D0CFF77-1350-4902-9AE0-8C9A3C22EE34}';
  CLASS_AcadDgnUnderlay: TGUID = '{11EC23A0-50D1-4129-8D37-8D1148B800DE}';
  IID_IAcadSubEntity: TGUID = '{FEF26B75-296F-4402-9210-EC80A9B39972}';
  CLASS_AcadSubEntity: TGUID = '{2B82582B-C683-49C2-AC5E-20105AD47CE9}';
  IID_IAcadSubEntSolidFace: TGUID = '{84822F99-8F0C-4F7C-8251-4344919CFEF3}';
  CLASS_AcadSubEntSolidFace: TGUID = '{4FC6CEE8-23F6-405F-8BA2-1F7036050715}';
  IID_IAcadSubEntSolidEdge: TGUID = '{06619D36-FEC2-4CD3-97F1-84949FFD63C7}';
  CLASS_AcadSubEntSolidEdge: TGUID = '{559E3754-6F34-47AF-BC1F-E2BE712B16EB}';
  IID_IAcadSubEntSolidVertex: TGUID = '{DEF51352-1B14-465C-9183-A69B87A3D11C}';
  CLASS_AcadSubEntSolidVertex: TGUID = '{203D46FB-C6F0-4E95-B702-C1E01ADEBC04}';
  IID_IAcadSubEntSolidNode: TGUID = '{699B4233-20E7-4638-8439-384D3CB00019}';
  CLASS_AcadSubEntSolidNode: TGUID = '{25F43C48-6A48-4646-8EC4-D34563D6A4F4}';
  CLASS_AcadDimension: TGUID = '{6F56D7C9-18DD-4C15-9FA8-C54E3610EC40}';
  CLASS_AcadDimAligned: TGUID = '{BF4CC07E-E9BB-40D6-873F-855B211033B9}';
  CLASS_AcadDimAngular: TGUID = '{750AEC19-2E4C-4ED9-9B9F-F9CAFCD060F3}';
  CLASS_AcadDimDiametric: TGUID = '{85452F88-5071-492E-B850-2E3C586DCBD8}';
  CLASS_AcadDimOrdinate: TGUID = '{44A52280-AE56-490D-890C-89FB7279ED6B}';
  CLASS_AcadDimRadial: TGUID = '{2C74F89E-7421-46B4-BA54-F86F1BD9F237}';
  CLASS_AcadDimRotated: TGUID = '{BBF6A206-CB04-479D-96AE-349E1E83319A}';
  CLASS_AcadDim3PointAngular: TGUID = '{BC71DEA1-D6FB-48B8-AB06-D151C81BBCDD}';
  CLASS_AcadDimArcLength: TGUID = '{ABBE3F83-D585-4A50-9B69-198B0F566F2E}';
  CLASS_AcadDimRadialLarge: TGUID = '{D86B6C47-11F2-4D95-B635-EA575F0892FC}';
  CLASS_AcadBlock: TGUID = '{20E47D5B-529A-45BD-8E77-BF1A3064A008}';
  CLASS_AcadModelSpace: TGUID = '{B5EE2B68-9A23-4BCD-BB77-FEA6DFB24DD6}';
  CLASS_AcadPaperSpace: TGUID = '{FE317223-8EDE-4684-B424-E48B9EA90220}';
  CLASS_AcadFileDependency: TGUID = '{CD865713-70D6-4E15-BB7B-9B99AD9DEB85}';
  CLASS_AcadFileDependencies: TGUID = '{834CE679-2E47-49DE-9E41-FEC87E9192EB}';
  CLASS_AcadSummaryInfo: TGUID = '{798391FE-4AF2-4851-9DDA-1F0D70C02A9E}';
  CLASS_AcadDatabasePreferences: TGUID = '{1D6DFD6A-9E16-435A-9327-6FFEC6BA372F}';
  CLASS_AcadDatabase: TGUID = '{B53CEF4B-1A13-49DE-BBC5-A7100FB2F38C}';
  IID_IAcadSecurityParams: TGUID = '{805F5969-BFFD-4683-9821-CD5590FF2F4E}';
  CLASS_AcadSecurityParams: TGUID = '{DF6525C2-6358-4B07-813D-708120C5FE1A}';
  IID_IAcadLayerStateManager: TGUID = '{46D38550-0080-484A-97B0-B3A1F5ED9824}';
  CLASS_AcadLayerStateManager: TGUID = '{4B40437B-8972-4444-BBE3-1588FF55F203}';
  DIID__DAcadApplicationEvents: TGUID = '{E8D59748-B414-4BE6-AF82-870C62C0CF4C}';
  IID_IAcadDocument: TGUID = '{0EB66A59-8FF4-410B-B697-8813116B2C5F}';
  IID_IAcadPlot: TGUID = '{DFF0942E-23C4-44B5-B67C-B511B5DD5A66}';
  IID_IAcadApplication: TGUID = '{8F17437C-2EFB-4FC4-8188-EEFA50FE7147}';
  IID_IAcadPreferences: TGUID = '{5A6047B5-55E8-456B-A5D1-D42C5DC90B96}';
  IID_IAcadPreferencesFiles: TGUID = '{E988F6D8-E009-4C4B-B20F-937E3349B7F5}';
  IID_IAcadPreferencesDisplay: TGUID = '{470F310B-CA4B-4664-B8BA-2A56745331C3}';
  IID_IAcadPreferencesOpenSave: TGUID = '{DA7E4927-7A26-4409-A515-F4F9E67EB0C3}';
  IID_IAcadPreferencesOutput: TGUID = '{E985D85D-2438-4979-8BB3-0CF1C0806140}';
  IID_IAcadPreferencesSystem: TGUID = '{42370369-A258-4EAD-96C6-F78702E57374}';
  IID_IAcadPreferencesUser: TGUID = '{4149C4B5-CA42-4ED0-B8CB-EBBE87F83912}';
  IID_IAcadPreferencesDrafting: TGUID = '{1591419F-43C2-4F66-BC6F-C0FF0EFFF074}';
  IID_IAcadPreferencesSelection: TGUID = '{129B870F-5FEE-4EF2-9BE6-30BAD4B0CD1F}';
  IID_IAcadPreferencesProfiles: TGUID = '{EB3A84E0-1069-4B35-8564-62441E5BEDC6}';
  IID_IAcadMenuGroups: TGUID = '{38931362-4638-4A2F-8201-E7B2AA52CA37}';
  IID_IAcadMenuGroup: TGUID = '{D6261081-12FD-49ED-A359-D990DF71949D}';
  IID_IAcadPopupMenus: TGUID = '{984C0B3E-F861-403A-A0FD-E332A7EC0CF3}';
  IID_IAcadPopupMenu: TGUID = '{19F1AEC4-8F70-4431-B5E3-1B3C681F0819}';
  IID_IAcadPopupMenuItem: TGUID = '{B7D20DD7-CB07-40A5-A611-1A62BA0806C7}';
  IID_IAcadToolbars: TGUID = '{1081A53F-2A08-4767-A131-08831AE62035}';
  IID_IAcadToolbar: TGUID = '{0C961978-3209-499F-809C-CABA49EBCA97}';
  IID_IAcadToolbarItem: TGUID = '{B0E04681-40F0-4BCB-A78F-03660DE0651A}';
  IID_IAcadMenuBar: TGUID = '{BD7E485E-3CD1-4DD5-9959-EB76B03024A5}';
  IID_IAcadDocuments: TGUID = '{CDF18C05-94F9-4902-856D-137AC54CEADF}';
  IID_IAcadState: TGUID = '{144790A6-6C66-49EC-96B0-DC148D06DB98}';
  IID_IAcadSelectionSets: TGUID = '{913DBB03-9E39-4CA3-940E-BB7C4B88EF89}';
  IID_IAcadSelectionSet: TGUID = '{3434ABBE-DCE0-446C-B763-E1ED8C2F7821}';
  IID_IAcadUtility: TGUID = '{22C8E547-0D27-4793-BB9F-AC58D4F8E794}';
  CLASS_AcadState: TGUID = '{2D46F523-8E0C-4E6D-A4BB-68ACED0C676C}';
  CLASS_AcadApplication: TGUID = '{28B7AA99-C0F9-4C47-995E-8A8D729603A1}';
  CLASS_AcadSelectionSet: TGUID = '{B4D2D9F3-C5D1-44AF-913A-BAFB1F357950}';
  CLASS_AcadSelectionSets: TGUID = '{2F6DB935-F865-4709-808C-ADA241F7E592}';
  CLASS_AcadPlot: TGUID = '{82F4F750-8BD9-4880-A71D-02FB08EBFAEA}';
  CLASS_AcadPreferences: TGUID = '{DBEE68F4-2BF2-43A2-BF9B-353FCDE16782}';
  CLASS_AcadPreferencesDrafting: TGUID = '{98780B52-05AD-4739-BC5C-B3BAD3D5296E}';
  CLASS_AcadPreferencesDisplay: TGUID = '{26352416-E145-4D82-92E5-3EC921A4A58E}';
  CLASS_AcadPreferencesFiles: TGUID = '{CF7E7DCE-3696-4C9F-B29E-F8980C7650B0}';
  CLASS_AcadPreferencesOpenSave: TGUID = '{6C6322F2-DB92-4304-8790-C6AD52685872}';
  CLASS_AcadPreferencesOutput: TGUID = '{E6EAB939-E3AF-4FAB-AFDC-2A77D0D5B3B8}';
  CLASS_AcadPreferencesProfiles: TGUID = '{767E31F2-FCF8-478D-8836-223DFEE4D6B3}';
  CLASS_AcadPreferencesSelection: TGUID = '{2B4D4DEA-4EC2-4C06-ADC9-B4992734A757}';
  CLASS_AcadPreferencesSystem: TGUID = '{06527FA0-74A3-4791-AA88-A63509AC82FB}';
  CLASS_AcadPreferencesUser: TGUID = '{FFDC2937-8113-401C-A224-E9A034287EA6}';
  CLASS_AcadMenuGroups: TGUID = '{E2DA6C15-C324-457C-A136-69279E9C394E}';
  CLASS_AcadMenuGroup: TGUID = '{6BD98AF5-A2B2-46A2-87EE-C3CB29A5A9CC}';
  CLASS_AcadMenuBar: TGUID = '{64B283AE-0D0B-4C24-9E94-B2F26C210C0E}';
  CLASS_AcadPopupMenus: TGUID = '{8BA4FD46-2F7C-4220-987D-71DCDEC4E739}';
  CLASS_AcadPopupMenu: TGUID = '{194C5C7B-FD4B-42B7-B3A7-A5F3DFFDC999}';
  CLASS_AcadPopupMenuItem: TGUID = '{EA6F8E27-1BD3-468A-8A57-EE2E2116AAC4}';
  CLASS_AcadUtility: TGUID = '{30A1B04F-D62D-4925-96AC-9CB7478B910F}';
  DIID__DAcadDocumentEvents: TGUID = '{C814C69D-A74B-494C-8EE6-23731B145CCB}';
  CLASS_AcadDocument: TGUID = '{7AABBB95-79BE-4C0F-8024-EB6AF271231C}';
  CLASS_AcadDocuments: TGUID = '{CA6096C3-1A75-45FF-BCBF-A198769571CC}';
  CLASS_AcadToolbars: TGUID = '{6DA5711F-DFD4-4D81-8D23-F7AEA68A920C}';
  CLASS_AcadToolbar: TGUID = '{B002FDCB-B013-4654-ACE9-8256ABB240F9}';
  CLASS_AcadToolbarItem: TGUID = '{1AAB334A-492D-4502-9F59-247C4966E705}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum AcBoolean
type
  AcBoolean = TOleEnum;
const
  acFalse = $00000000;
  acTrue = $00000001;

// Constants for enum AcOnOff
type
  AcOnOff = TOleEnum;
const
  acOff = $00000000;
  acOn = $00000001;

// Constants for enum AcEntityName
type
  AcEntityName = TOleEnum;
const
  ac3dFace = $00000001;
  ac3dPolyline = $00000002;
  ac3dSolid = $00000003;
  acArc = $00000004;
  acAttribute = $00000005;
  acAttributeReference = $00000006;
  acBlockReference = $00000007;
  acCircle = $00000008;
  acDimAligned = $00000009;
  acDimAngular = $0000000A;
  acDimDiametric = $0000000C;
  acDimOrdinate = $0000000D;
  acDimRadial = $0000000E;
  acDimRotated = $0000000F;
  acEllipse = $00000010;
  acHatch = $00000011;
  acLeader = $00000012;
  acLine = $00000013;
  acMtext = $00000015;
  acPoint = $00000016;
  acPolyline = $00000017;
  acPolylineLight = $00000018;
  acPolymesh = $00000019;
  acRaster = $0000001A;
  acRay = $0000001B;
  acRegion = $0000001C;
  acShape = $0000001D;
  acSolid = $0000001E;
  acSpline = $0000001F;
  acText = $00000020;
  acTolerance = $00000021;
  acTrace = $00000022;
  acPViewport = $00000023;
  acXline = $00000024;
  acGroup = $00000025;
  acMInsertBlock = $00000026;
  acPolyfaceMesh = $00000027;
  acMLine = $00000028;
  acDim3PointAngular = $00000029;
  acExternalReference = $0000002A;
  acTable = $0000002B;
  acDimArcLength = $0000002C;
  acDimRadialLarge = $0000002D;
  acDwfUnderlay = $0000002E;
  acDgnUnderlay = $0000002F;

// Constants for enum AcActiveSpace
type
  AcActiveSpace = TOleEnum;
const
  acPaperSpace = $00000000;
  acModelSpace = $00000001;

// Constants for enum AcKeyboardAccelerator
type
  AcKeyboardAccelerator = TOleEnum;
const
  acPreferenceClassic = $00000000;
  acPreferenceCustom = $00000001;

// Constants for enum AcPlotOrientation
type
  AcPlotOrientation = TOleEnum;
const
  acPlotOrientationPortrait = $00000000;
  acPlotOrientationLandscape = $00000001;

// Constants for enum AcColor
type
  AcColor = TOleEnum;
const
  acByBlock = $00000000;
  acRed = $00000001;
  acYellow = $00000002;
  acGreen = $00000003;
  acCyan = $00000004;
  acBlue = $00000005;
  acMagenta = $00000006;
  acWhite = $00000007;
  acByLayer = $00000100;

// Constants for enum AcAttachmentPoint
type
  AcAttachmentPoint = TOleEnum;
const
  acAttachmentPointTopLeft = $00000001;
  acAttachmentPointTopCenter = $00000002;
  acAttachmentPointTopRight = $00000003;
  acAttachmentPointMiddleLeft = $00000004;
  acAttachmentPointMiddleCenter = $00000005;
  acAttachmentPointMiddleRight = $00000006;
  acAttachmentPointBottomLeft = $00000007;
  acAttachmentPointBottomCenter = $00000008;
  acAttachmentPointBottomRight = $00000009;

// Constants for enum AcDrawingDirection
type
  AcDrawingDirection = TOleEnum;
const
  acLeftToRight = $00000001;
  acRightToLeft = $00000002;
  acTopToBottom = $00000003;
  acBottomToTop = $00000004;
  acByStyle = $00000005;

// Constants for enum AcLeaderType
type
  AcLeaderType = TOleEnum;
const
  acLineNoArrow = $00000000;
  acSplineNoArrow = $00000001;
  acLineWithArrow = $00000002;
  acSplineWithArrow = $00000003;

// Constants for enum AcAttributeMode
type
  AcAttributeMode = TOleEnum;
const
  acAttributeModeNormal = $00000000;
  acAttributeModeInvisible = $00000001;
  acAttributeModeConstant = $00000002;
  acAttributeModeVerify = $00000004;
  acAttributeModePreset = $00000008;

// Constants for enum AcHorizontalAlignment
type
  AcHorizontalAlignment = TOleEnum;
const
  acHorizontalAlignmentLeft = $00000000;
  acHorizontalAlignmentCenter = $00000001;
  acHorizontalAlignmentRight = $00000002;
  acHorizontalAlignmentAligned = $00000003;
  acHorizontalAlignmentMiddle = $00000004;
  acHorizontalAlignmentFit = $00000005;

// Constants for enum AcVerticalAlignment
type
  AcVerticalAlignment = TOleEnum;
const
  acVerticalAlignmentBaseline = $00000000;
  acVerticalAlignmentBottom = $00000001;
  acVerticalAlignmentMiddle = $00000002;
  acVerticalAlignmentTop = $00000003;

// Constants for enum AcTextGenerationFlag
type
  AcTextGenerationFlag = TOleEnum;
const
  acTextFlagBackward = $00000002;
  acTextFlagUpsideDown = $00000004;

// Constants for enum AcSelect
type
  AcSelect = TOleEnum;
const
  acSelectionSetWindow = $00000000;
  acSelectionSetCrossing = $00000001;
  acSelectionSetFence = $00000002;
  acSelectionSetPrevious = $00000003;
  acSelectionSetLast = $00000004;
  acSelectionSetAll = $00000005;
  acSelectionSetWindowPolygon = $00000006;
  acSelectionSetCrossingPolygon = $00000007;

// Constants for enum AcPatternType
type
  AcPatternType = TOleEnum;
const
  acHatchPatternTypeUserDefined = $00000000;
  acHatchPatternTypePreDefined = $00000001;
  acHatchPatternTypeCustomDefined = $00000002;

// Constants for enum AcLoopType
type
  AcLoopType = TOleEnum;
const
  acHatchLoopTypeDefault = $00000000;
  acHatchLoopTypeExternal = $00000001;
  acHatchLoopTypePolyline = $00000002;
  acHatchLoopTypeDerived = $00000004;
  acHatchLoopTypeTextbox = $00000008;

// Constants for enum AcHatchStyle
type
  AcHatchStyle = TOleEnum;
const
  acHatchStyleNormal = $00000000;
  acHatchStyleOuter = $00000001;
  acHatchStyleIgnore = $00000002;

// Constants for enum AcPolylineType
type
  AcPolylineType = TOleEnum;
const
  acSimplePoly = $00000000;
  acFitCurvePoly = $00000001;
  acQuadSplinePoly = $00000002;
  acCubicSplinePoly = $00000003;

// Constants for enum Ac3DPolylineType
type
  Ac3DPolylineType = TOleEnum;
const
  acSimple3DPoly = $00000000;
  acQuadSpline3DPoly = $00000001;
  acCubicSpline3DPoly = $00000002;

// Constants for enum AcViewportSplitType
type
  AcViewportSplitType = TOleEnum;
const
  acViewport2Horizontal = $00000000;
  acViewport2Vertical = $00000001;
  acViewport3Left = $00000002;
  acViewport3Right = $00000003;
  acViewport3Horizontal = $00000004;
  acViewport3Vertical = $00000005;
  acViewport3Above = $00000006;
  acViewport3Below = $00000007;
  acViewport4 = $00000008;

// Constants for enum AcRegenType
type
  AcRegenType = TOleEnum;
const
  acActiveViewport = $00000000;
  acAllViewports = $00000001;

// Constants for enum AcBooleanType
type
  AcBooleanType = TOleEnum;
const
  acUnion = $00000000;
  acIntersection = $00000001;
  acSubtraction = $00000002;

// Constants for enum AcExtendOption
type
  AcExtendOption = TOleEnum;
const
  acExtendNone = $00000000;
  acExtendThisEntity = $00000001;
  acExtendOtherEntity = $00000002;
  acExtendBoth = $00000003;

// Constants for enum AcAngleUnits
type
  AcAngleUnits = TOleEnum;
const
  acDegrees = $00000000;
  acDegreeMinuteSeconds = $00000001;
  acGrads = $00000002;
  acRadians = $00000003;

// Constants for enum AcUnits
type
  AcUnits = TOleEnum;
const
  acDefaultUnits = $FFFFFFFF;
  acScientific = $00000001;
  acDecimal = $00000002;
  acEngineering = $00000003;
  acArchitectural = $00000004;
  acFractional = $00000005;

// Constants for enum AcCoordinateSystem
type
  AcCoordinateSystem = TOleEnum;
const
  acWorld = $00000000;
  acUCS = $00000001;
  acDisplayDCS = $00000002;
  acPaperSpaceDCS = $00000003;
  acOCS = $00000004;

// Constants for enum AcMeasurementUnits
type
  AcMeasurementUnits = TOleEnum;
const
  acEnglish = $00000000;
  acMetric = $00000001;

// Constants for enum AcXRefDemandLoad
type
  AcXRefDemandLoad = TOleEnum;
const
  acDemandLoadDisabled = $00000000;
  acDemandLoadEnabled = $00000001;
  acDemandLoadEnabledWithCopy = $00000002;

// Constants for enum AcPreviewMode
type
  AcPreviewMode = TOleEnum;
const
  acPartialPreview = $00000000;
  acFullPreview = $00000001;

// Constants for enum AcPolymeshType
type
  AcPolymeshType = TOleEnum;
const
  acSimpleMesh = $00000000;
  acQuadSurfaceMesh = $00000005;
  acCubicSurfaceMesh = $00000006;
  acBezierSurfaceMesh = $00000008;

// Constants for enum AcZoomScaleType
type
  AcZoomScaleType = TOleEnum;
const
  acZoomScaledAbsolute = $00000000;
  acZoomScaledRelative = $00000001;
  acZoomScaledRelativePSpace = $00000002;

// Constants for enum AcDragDisplayMode
type
  AcDragDisplayMode = TOleEnum;
const
  acDragDoNotDisplay = $00000000;
  acDragDisplayOnRequest = $00000001;
  acDragDisplayAutomatically = $00000002;

// Constants for enum AcARXDemandLoad
type
  AcARXDemandLoad = TOleEnum;
const
  acDemanLoadDisable = $00000000;
  acDemandLoadOnObjectDetect = $00000001;
  acDemandLoadCmdInvoke = $00000002;

// Constants for enum AcTextFontStyle
type
  AcTextFontStyle = TOleEnum;
const
  acFontRegular = $00000000;
  acFontItalic = $00000001;
  acFontBold = $00000002;
  acFontBoldItalic = $00000003;

// Constants for enum AcProxyImage
type
  AcProxyImage = TOleEnum;
const
  acProxyNotShow = $00000000;
  acProxyShow = $00000001;
  acProxyBoundingBox = $00000002;

// Constants for enum AcKeyboardPriority
type
  AcKeyboardPriority = TOleEnum;
const
  acKeyboardRunningObjSnap = $00000000;
  acKeyboardEntry = $00000001;
  acKeyboardEntryExceptScripts = $00000002;

// Constants for enum AcMenuGroupType
type
  AcMenuGroupType = TOleEnum;
const
  acBaseMenuGroup = $00000000;
  acPartialMenuGroup = $00000001;

// Constants for enum AcMenuFileType
type
  AcMenuFileType = TOleEnum;
const
  acMenuFileCompiled = $00000000;
  acMenuFileSource = $00000001;

// Constants for enum AcMenuItemType
type
  AcMenuItemType = TOleEnum;
const
  acMenuItem = $00000000;
  acMenuSeparator = $00000001;
  acMenuSubMenu = $00000002;

// Constants for enum AcToolbarItemType
type
  AcToolbarItemType = TOleEnum;
const
  acToolbarButton = $00000000;
  acToolbarSeparator = $00000001;
  acToolbarControl = $00000002;
  acToolbarFlyout = $00000003;

// Constants for enum AcToolbarDockStatus
type
  AcToolbarDockStatus = TOleEnum;
const
  acToolbarDockTop = $00000000;
  acToolbarDockBottom = $00000001;
  acToolbarDockLeft = $00000002;
  acToolbarDockRight = $00000003;
  acToolbarFloating = $00000004;

// Constants for enum AcLineWeight
type
  AcLineWeight = TOleEnum;
const
  acLnWt000 = $00000000;
  acLnWt005 = $00000005;
  acLnWt009 = $00000009;
  acLnWt013 = $0000000D;
  acLnWt015 = $0000000F;
  acLnWt018 = $00000012;
  acLnWt020 = $00000014;
  acLnWt025 = $00000019;
  acLnWt030 = $0000001E;
  acLnWt035 = $00000023;
  acLnWt040 = $00000028;
  acLnWt050 = $00000032;
  acLnWt053 = $00000035;
  acLnWt060 = $0000003C;
  acLnWt070 = $00000046;
  acLnWt080 = $00000050;
  acLnWt090 = $0000005A;
  acLnWt100 = $00000064;
  acLnWt106 = $0000006A;
  acLnWt120 = $00000078;
  acLnWt140 = $0000008C;
  acLnWt158 = $0000009E;
  acLnWt200 = $000000C8;
  acLnWt211 = $000000D3;
  acLnWtByLayer = $FFFFFFFF;
  acLnWtByBlock = $FFFFFFFE;
  acLnWtByLwDefault = $FFFFFFFD;

// Constants for enum AcWindowState
type
  AcWindowState = TOleEnum;
const
  acNorm = $00000001;
  acMin = $00000002;
  acMax = $00000003;

// Constants for enum AcPlotPaperUnits
type
  AcPlotPaperUnits = TOleEnum;
const
  acInches = $00000000;
  acMillimeters = $00000001;
  acPixels = $00000002;

// Constants for enum AcPlotRotation
type
  AcPlotRotation = TOleEnum;
const
  ac0degrees = $00000000;
  ac90degrees = $00000001;
  ac180degrees = $00000002;
  ac270degrees = $00000003;

// Constants for enum AcPlotType
type
  AcPlotType = TOleEnum;
const
  acDisplay = $00000000;
  acExtents = $00000001;
  acLimits = $00000002;
  acView = $00000003;
  acWindow = $00000004;
  acLayout = $00000005;

// Constants for enum AcPlotScale
type
  AcPlotScale = TOleEnum;
const
  acScaleToFit = $00000000;
  ac1_128in_1ft = $00000001;
  ac1_64in_1ft = $00000002;
  ac1_32in_1ft = $00000003;
  ac1_16in_1ft = $00000004;
  ac3_32in_1ft = $00000005;
  ac1_8in_1ft = $00000006;
  ac3_16in_1ft = $00000007;
  ac1_4in_1ft = $00000008;
  ac3_8in_1ft = $00000009;
  ac1_2in_1ft = $0000000A;
  ac3_4in_1ft = $0000000B;
  ac1in_1ft = $0000000C;
  ac3in_1ft = $0000000D;
  ac6in_1ft = $0000000E;
  ac1ft_1ft = $0000000F;
  ac1_1 = $00000010;
  ac1_2 = $00000011;
  ac1_4 = $00000012;
  ac1_8 = $00000013;
  ac1_10 = $00000014;
  ac1_16 = $00000015;
  ac1_20 = $00000016;
  ac1_30 = $00000017;
  ac1_40 = $00000018;
  ac1_50 = $00000019;
  ac1_100 = $0000001A;
  ac2_1 = $0000001B;
  ac4_1 = $0000001C;
  ac8_1 = $0000001D;
  ac10_1 = $0000001E;
  ac100_1 = $0000001F;

// Constants for enum AcAlignment
type
  AcAlignment = TOleEnum;
const
  acAlignmentLeft = $00000000;
  acAlignmentCenter = $00000001;
  acAlignmentRight = $00000002;
  acAlignmentAligned = $00000003;
  acAlignmentMiddle = $00000004;
  acAlignmentFit = $00000005;
  acAlignmentTopLeft = $00000006;
  acAlignmentTopCenter = $00000007;
  acAlignmentTopRight = $00000008;
  acAlignmentMiddleLeft = $00000009;
  acAlignmentMiddleCenter = $0000000A;
  acAlignmentMiddleRight = $0000000B;
  acAlignmentBottomLeft = $0000000C;
  acAlignmentBottomCenter = $0000000D;
  acAlignmentBottomRight = $0000000E;

// Constants for enum AcLineSpacingStyle
type
  AcLineSpacingStyle = TOleEnum;
const
  acLineSpacingStyleAtLeast = $00000001;
  acLineSpacingStyleExactly = $00000002;

// Constants for enum AcDimPrecision
type
  AcDimPrecision = TOleEnum;
const
  acDimPrecisionZero = $00000000;
  acDimPrecisionOne = $00000001;
  acDimPrecisionTwo = $00000002;
  acDimPrecisionThree = $00000003;
  acDimPrecisionFour = $00000004;
  acDimPrecisionFive = $00000005;
  acDimPrecisionSix = $00000006;
  acDimPrecisionSeven = $00000007;
  acDimPrecisionEight = $00000008;

// Constants for enum AcDimUnits
type
  AcDimUnits = TOleEnum;
const
  acDimScientific = $00000001;
  acDimDecimal = $00000002;
  acDimEngineering = $00000003;
  acDimArchitecturalStacked = $00000004;
  acDimFractionalStacked = $00000005;
  acDimArchitectural = $00000006;
  acDimFractional = $00000007;
  acDimWindowsDesktop = $00000008;

// Constants for enum AcDimLUnits
type
  AcDimLUnits = TOleEnum;
const
  acDimLScientific = $00000001;
  acDimLDecimal = $00000002;
  acDimLEngineering = $00000003;
  acDimLArchitectural = $00000004;
  acDimLFractional = $00000005;
  acDimLWindowsDesktop = $00000006;

// Constants for enum AcDimArrowheadType
type
  AcDimArrowheadType = TOleEnum;
const
  acArrowDefault = $00000000;
  acArrowClosedBlank = $00000001;
  acArrowClosed = $00000002;
  acArrowDot = $00000003;
  acArrowArchTick = $00000004;
  acArrowOblique = $00000005;
  acArrowOpen = $00000006;
  acArrowOrigin = $00000007;
  acArrowOrigin2 = $00000008;
  acArrowOpen90 = $00000009;
  acArrowOpen30 = $0000000A;
  acArrowDotSmall = $0000000B;
  acArrowDotBlank = $0000000C;
  acArrowSmall = $0000000D;
  acArrowBoxBlank = $0000000E;
  acArrowBoxFilled = $0000000F;
  acArrowDatumBlank = $00000010;
  acArrowDatumFilled = $00000011;
  acArrowIntegral = $00000012;
  acArrowNone = $00000013;
  acArrowUserDefined = $00000014;

// Constants for enum AcDimCenterType
type
  AcDimCenterType = TOleEnum;
const
  acCenterMark = $00000000;
  acCenterLine = $00000001;
  acCenterNone = $00000002;

// Constants for enum AcDimFit
type
  AcDimFit = TOleEnum;
const
  acTextAndArrows = $00000000;
  acArrowsOnly = $00000001;
  acTextOnly = $00000002;
  acBestFit = $00000003;

// Constants for enum AcDimFractionType
type
  AcDimFractionType = TOleEnum;
const
  acHorizontal = $00000000;
  acDiagonal = $00000001;
  acNotStacked = $00000002;

// Constants for enum AcDimArcLengthSymbol
type
  AcDimArcLengthSymbol = TOleEnum;
const
  acSymInFront = $00000000;
  acSymAbove = $00000001;
  acSymNone = $00000002;

// Constants for enum AcDimHorizontalJustification
type
  AcDimHorizontalJustification = TOleEnum;
const
  acHorzCentered = $00000000;
  acFirstExtensionLine = $00000001;
  acSecondExtensionLine = $00000002;
  acOverFirstExtension = $00000003;
  acOverSecondExtension = $00000004;

// Constants for enum AcDimVerticalJustification
type
  AcDimVerticalJustification = TOleEnum;
const
  acVertCentered = $00000000;
  acAbove = $00000001;
  acOutside = $00000002;
  acJIS = $00000003;

// Constants for enum AcDimTextMovement
type
  AcDimTextMovement = TOleEnum;
const
  acDimLineWithText = $00000000;
  acMoveTextAddLeader = $00000001;
  acMoveTextNoLeader = $00000002;

// Constants for enum AcDimToleranceMethod
type
  AcDimToleranceMethod = TOleEnum;
const
  acTolNone = $00000000;
  acTolSymmetrical = $00000001;
  acTolDeviation = $00000002;
  acTolLimits = $00000003;
  acTolBasic = $00000004;

// Constants for enum AcDimToleranceJustify
type
  AcDimToleranceJustify = TOleEnum;
const
  acTolBottom = $00000000;
  acTolMiddle = $00000001;
  acTolTop = $00000002;

// Constants for enum AcViewportScale
type
  AcViewportScale = TOleEnum;
const
  acVpScaleToFit = $00000000;
  acVpCustomScale = $00000001;
  acVp1 = $00000002;
  acVp2 = $00000003;
  acVp3 = $00000004;
  acVp4 = $00000005;
  acVp5 = $00000006;
  acVp6 = $00000007;
  acVp7 = $00000008;
  acVp8 = $00000009;
  acVp9 = $0000000A;
  acVp10 = $0000000B;
  acVp11 = $0000000C;
  acVp12 = $0000000D;
  acVp13 = $0000000E;
  acVp14 = $0000000F;
  acVp15 = $00000010;
  acVp16 = $00000011;
  acVp17 = $00000012;
  acVp18 = $00000013;
  acVp19 = $00000014;
  acVp20 = $00000015;
  acVp21 = $00000016;
  acVp22 = $00000017;
  acVp23 = $00000018;
  acVp24 = $00000019;
  acVp25 = $0000001A;
  acVp26 = $0000001B;
  acVp27 = $0000001C;
  acVp28 = $0000001D;
  acVp29 = $0000001E;
  acVp30 = $0000001F;
  acVp31 = $00000020;
  acVp32 = $00000021;
  acVp33 = $00000022;
  acVp34 = $00000023;
  acVp35 = $00000024;
  acVp36 = $00000025;
  acVp37 = $00000026;
  acVp38 = $00000027;
  acVp39 = $00000028;
  acVp40 = $00000029;
  acVp41 = $0000002A;
  acVp42 = $0000002B;
  acVp43 = $0000002C;
  acVp44 = $0000002D;
  acVp45 = $0000002E;
  acVp46 = $0000002F;
  acVp47 = $00000030;
  acVp48 = $00000031;
  acVp49 = $00000032;
  acVp50 = $00000033;
  acVp51 = $00000034;
  acVp52 = $00000035;
  acVp53 = $00000036;
  acVp54 = $00000037;
  acVp55 = $00000038;
  acVp56 = $00000039;
  acVp57 = $0000003A;
  acVp58 = $0000003B;
  acVp59 = $0000003C;
  acVp60 = $0000003D;
  acVp61 = $0000003E;
  acVp62 = $0000003F;
  acVp63 = $00000040;
  acVp64 = $00000041;
  acVp65 = $00000042;
  acVp66 = $00000043;
  acVp67 = $00000044;
  acVp68 = $00000045;
  acVp69 = $00000046;
  acVp70 = $00000047;
  acVp71 = $00000048;
  acVp72 = $00000049;
  acVp73 = $0000004A;
  acVp74 = $0000004B;
  acVp75 = $0000004C;
  acVp76 = $0000004D;
  acVp77 = $0000004E;
  acVp78 = $0000004F;
  acVp79 = $00000050;
  acVp80 = $00000051;
  acVp81 = $00000052;
  acVp82 = $00000053;
  acVp83 = $00000054;
  acVp84 = $00000055;
  acVp85 = $00000056;
  acVp86 = $00000057;
  acVp87 = $00000058;
  acVp88 = $00000059;
  acVp89 = $0000005A;
  acVp90 = $0000005B;
  acVp91 = $0000005C;
  acVp92 = $0000005D;
  acVp93 = $0000005E;
  acVp94 = $0000005F;
  acVp95 = $00000060;
  acVp96 = $00000061;
  acVp97 = $00000062;
  acVp98 = $00000063;
  acVp99 = $00000064;
  acVp100 = $00000065;
  acVp1_1 = $00000002;
  acVp1_2 = $00000003;
  acVp1_4 = $00000004;
  acVp1_8 = $00000005;
  acVp1_10 = $00000006;
  acVp1_16 = $00000007;
  acVp1_20 = $00000008;
  acVp1_30 = $00000009;
  acVp1_40 = $0000000A;
  acVp1_50 = $0000000B;
  acVp1_100 = $0000000C;
  acVp2_1 = $0000000D;
  acVp4_1 = $0000000E;
  acVp8_1 = $0000000F;
  acVp10_1 = $00000010;
  acVp100_1 = $00000011;
  acVp1_128in_1ft = $00000012;
  acVp1_64in_1ft = $00000013;
  acVp1_32in_1ft = $00000014;
  acVp1_16in_1ft = $00000015;
  acVp3_32in_1ft = $00000016;
  acVp1_8in_1ft = $00000017;
  acVp3_16in_1ft = $00000018;
  acVp1_4in_1ft = $00000019;
  acVp3_8in_1ft = $0000001A;
  acVp1_2in_1ft = $0000001B;
  acVp3_4in_1ft = $0000001C;
  acVp1in_1ft = $0000001D;
  acVp1and1_2in_1ft = $0000001E;
  acVp3in_1ft = $0000001F;
  acVp6in_1ft = $00000020;
  acVp1ft_1ft = $00000021;

// Constants for enum AcISOPenWidth
type
  AcISOPenWidth = TOleEnum;
const
  acPenWidth013 = $0000000D;
  acPenWidth018 = $00000012;
  acPenWidth025 = $00000019;
  acPenWidth035 = $00000023;
  acPenWidth050 = $00000032;
  acPenWidth070 = $00000046;
  acPenWidth100 = $00000064;
  acPenWidth140 = $0000008C;
  acPenWidth200 = $000000C8;
  acPenWidthUnk = $FFFFFFFF;

// Constants for enum AcSaveAsType
type
  AcSaveAsType = TOleEnum;
const
  acUnknown = $FFFFFFFF;
  acR12_dxf = $00000001;
  acR13_dwg = $00000004;
  acR13_dxf = $00000005;
  acR14_dwg = $00000008;
  acR14_dxf = $00000009;
  ac2000_dwg = $0000000C;
  ac2000_dxf = $0000000D;
  ac2000_Template = $0000000E;
  ac2004_dwg = $00000018;
  ac2004_dxf = $00000019;
  ac2004_Template = $0000001A;
  ac2007_dwg = $00000024;
  ac2007_dxf = $00000025;
  ac2007_Template = $00000026;
  acNative = $00000024;
  acR15_dwg = $0000000C;
  acR15_dxf = $0000000D;
  acR15_Template = $0000000E;
  acR18_dwg = $00000018;
  acR18_dxf = $00000019;
  acR18_Template = $0000001A;

// Constants for enum AcPrinterSpoolAlert
type
  AcPrinterSpoolAlert = TOleEnum;
const
  acPrinterAlwaysAlert = $00000000;
  acPrinterAlertOnce = $00000001;
  acPrinterNeverAlertLogOnce = $00000002;
  acPrinterNeverAlert = $00000003;

// Constants for enum AcPlotPolicyForNewDwgs
type
  AcPlotPolicyForNewDwgs = TOleEnum;
const
  acPolicyNewDefault = $00000000;
  acPolicyNewLegacy = $00000001;

// Constants for enum AcPlotPolicyForLegacyDwgs
type
  AcPlotPolicyForLegacyDwgs = TOleEnum;
const
  acPolicyLegacyDefault = $00000000;
  acPolicyLegacyQuery = $00000001;
  acPolicyLegacyLegacy = $00000002;

// Constants for enum AcOleQuality
type
  AcOleQuality = TOleEnum;
const
  acOQLineArt = $00000000;
  acOQText = $00000001;
  acOQGraphics = $00000002;
  acOQPhoto = $00000003;
  acOQHighPhoto = $00000004;

// Constants for enum AcLoadPalette
type
  AcLoadPalette = TOleEnum;
const
  acPaletteByDrawing = $00000000;
  acPaletteBySession = $00000001;

// Constants for enum AcInsertUnits
type
  AcInsertUnits = TOleEnum;
const
  acInsertUnitsUnitless = $00000000;
  acInsertUnitsInches = $00000001;
  acInsertUnitsFeet = $00000002;
  acInsertUnitsMiles = $00000003;
  acInsertUnitsMillimeters = $00000004;
  acInsertUnitsCentimeters = $00000005;
  acInsertUnitsMeters = $00000006;
  acInsertUnitsKilometers = $00000007;
  acInsertUnitsMicroinches = $00000008;
  acInsertUnitsMils = $00000009;
  acInsertUnitsYards = $0000000A;
  acInsertUnitsAngstroms = $0000000B;
  acInsertUnitsNanometers = $0000000C;
  acInsertUnitsMicrons = $0000000D;
  acInsertUnitsDecimeters = $0000000E;
  acInsertUnitsDecameters = $0000000F;
  acInsertUnitsHectometers = $00000010;
  acInsertUnitsGigameters = $00000011;
  acInsertUnitsAstronomicalUnits = $00000012;
  acInsertUnitsLightYears = $00000013;
  acInsertUnitsParsecs = $00000014;

// Constants for enum AcAlignmentPointAcquisition
type
  AcAlignmentPointAcquisition = TOleEnum;
const
  acAlignPntAcquisitionAutomatic = $00000000;
  acAlignPntAcquisitionShiftToAcquire = $00000001;

// Constants for enum AcInsertUnitsAction
type
  AcInsertUnitsAction = TOleEnum;
const
  acInsertUnitsPrompt = $00000000;
  acInsertUnitsAutoAssign = $00000001;

// Constants for enum AcPlotPolicy
type
  AcPlotPolicy = TOleEnum;
const
  acPolicyNamed = $00000000;
  acPolicyLegacy = $00000001;

// Constants for enum AcDrawingAreaShortCutMenu
type
  AcDrawingAreaShortCutMenu = TOleEnum;
const
  acNoDrawingAreaShortCutMenu = $00000000;
  acUseDefaultDrawingAreaShortCutMenu = $00000001;

// Constants for enum AcDrawingAreaSCMDefault
type
  AcDrawingAreaSCMDefault = TOleEnum;
const
  acRepeatLastCommand = $00000000;
  acSCM = $00000001;

// Constants for enum AcDrawingAreaSCMEdit
type
  AcDrawingAreaSCMEdit = TOleEnum;
const
  acEdRepeatLastCommand = $00000000;
  acEdSCM = $00000001;

// Constants for enum AcDrawingAreaSCMCommand
type
  AcDrawingAreaSCMCommand = TOleEnum;
const
  acEnter = $00000000;
  acEnableSCMOptions = $00000001;
  acEnableSCM = $00000002;

// Constants for enum AcLayerStateMask
type
  AcLayerStateMask = TOleEnum;
const
  acLsNone = $00000000;
  acLsOn = $00000001;
  acLsFrozen = $00000002;
  acLsLocked = $00000004;
  acLsPlot = $00000008;
  acLsNewViewport = $00000010;
  acLsColor = $00000020;
  acLsLineType = $00000040;
  acLsLineWeight = $00000080;
  acLsPlotStyle = $00000100;
  acLsAll = $0000FFFF;

// Constants for enum AcShadePlot
type
  AcShadePlot = TOleEnum;
const
  acShadePlotAsDisplayed = $00000000;
  acShadePlotWireframe = $00000001;
  acShadePlotHidden = $00000002;
  acShadePlotRendered = $00000003;

// Constants for enum AcHatchObjectType
type
  AcHatchObjectType = TOleEnum;
const
  acHatchObject = $00000000;
  acGradientObject = $00000001;

// Constants for enum AcGradientPatternType
type
  AcGradientPatternType = TOleEnum;
const
  acPreDefinedGradient = $00000000;
  acUserDefinedGradient = $00000001;

// Constants for enum AcTableDirection
type
  AcTableDirection = TOleEnum;
const
  acTableTopToBottom = $00000000;
  acTableBottomToTop = $00000001;

// Constants for enum AcCellAlignment
type
  AcCellAlignment = TOleEnum;
const
  acTopLeft = $00000001;
  acTopCenter = $00000002;
  acTopRight = $00000003;
  acMiddleLeft = $00000004;
  acMiddleCenter = $00000005;
  acMiddleRight = $00000006;
  acBottomLeft = $00000007;
  acBottomCenter = $00000008;
  acBottomRight = $00000009;

// Constants for enum AcRowType
type
  AcRowType = TOleEnum;
const
  acUnknownRow = $00000000;
  acDataRow = $00000001;
  acTitleRow = $00000002;
  acHeaderRow = $00000004;

// Constants for enum AcValueDataType
type
  AcValueDataType = TOleEnum;
const
  acUnknownDataType = $00000000;
  acLong = $00000001;
  acDouble = $00000002;
  acString = $00000004;
  acDate = $00000008;
  acPoint2d = $00000010;
  acPoint3d = $00000020;
  acObjectId = $00000040;
  acBuffer = $00000080;
  acResbuf = $00000100;
  acGeneral = $00000200;

// Constants for enum AcValueUnitType
type
  AcValueUnitType = TOleEnum;
const
  acUnitless = $00000000;
  acUnitDistance = $00000001;
  acUnitAngle = $00000002;
  acUnitArea = $00000004;
  acUnitVolume = $00000008;

// Constants for enum AcParseOption
type
  AcParseOption = TOleEnum;
const
  acParseOptionNone = $00000000;
  acSetDefaultFormat = $00000001;
  acPreserveMtextFormat = $00000002;

// Constants for enum AcFormatOption
type
  AcFormatOption = TOleEnum;
const
  kFormatOptionNone = $00000000;
  acForEditing = $00000001;
  acForExpression = $00000002;
  acUseMaximumPrecision = $00000004;
  acIgnoreMtextFormat = $00000008;

// Constants for enum AcGridLineType
type
  AcGridLineType = TOleEnum;
const
  acInvalidGridLine = $00000000;
  acHorzTop = $00000001;
  acHorzInside = $00000002;
  acHorzBottom = $00000004;
  acVertLeft = $00000008;
  acVertInside = $00000010;
  acVertRight = $00000020;

// Constants for enum AcCellType
type
  AcCellType = TOleEnum;
const
  acUnknownCell = $00000000;
  acTextCell = $00000001;
  acBlockCell = $00000002;

// Constants for enum AcCellEdgeMask
type
  AcCellEdgeMask = TOleEnum;
const
  acTopMask = $00000001;
  acRightMask = $00000002;
  acBottomMask = $00000004;
  acLeftMask = $00000008;

// Constants for enum AcRotationAngle
type
  AcRotationAngle = TOleEnum;
const
  acDegreesUnknown = $FFFFFFFF;
  acDegrees000 = $00000000;
  acDegrees090 = $00000001;
  acDegrees180 = $00000002;
  acDegrees270 = $00000003;

// Constants for enum AcSelectType
type
  AcSelectType = TOleEnum;
const
  acTableSelectWindow = $00000001;
  acTableSelectCrossing = $00000002;

// Constants for enum AcOleType
type
  AcOleType = TOleEnum;
const
  acOTLink = $00000001;
  acOTEmbedded = $00000002;
  acOTStatic = $00000003;

// Constants for enum AcOlePlotQuality
type
  AcOlePlotQuality = TOleEnum;
const
  acOPQMonochrome = $00000000;
  acOPQLowGraphics = $00000001;
  acOPQHighGraphics = $00000002;

// Constants for enum AcTableStyleOverrides
type
  AcTableStyleOverrides = TOleEnum;
const
  acTitleSuppressed = $00000001;
  acHeaderSuppressed = $00000002;
  acFlowDirection = $00000003;
  acHorzCellMargin = $00000004;
  acVertCellMargin = $00000005;
  acTitleRowColor = $00000006;
  acHeaderRowColor = $00000007;
  acDataRowColor = $00000008;
  acTitleRowFillNone = $00000009;
  acHeaderRowFillNone = $0000000A;
  acDataRowFillNone = $0000000B;
  acTitleRowFillColor = $0000000C;
  acHeaderRowFillColor = $0000000D;
  acDataRowFillColor = $0000000E;
  acTitleRowAlignment = $0000000F;
  acHeaderRowAlignment = $00000010;
  acDataRowAlignment = $00000011;
  acTitleRowTextStyle = $00000012;
  acHeaderRowTextStyle = $00000013;
  acDataRowTextStyle = $00000014;
  acTitleRowTextHeight = $00000015;
  acHeaderRowTextHeight = $00000016;
  acDataRowTextHeight = $00000017;
  acTitleRowDataType = $00000018;
  acHeaderRowDataType = $00000019;
  acDataRowDataType = $0000001A;
  acTitleHorzTopColor = $00000028;
  acTitleHorzInsideColor = $00000029;
  acTitleHorzBottomColor = $0000002A;
  acTitleVertLeftColor = $0000002B;
  acTitleVertInsideColor = $0000002C;
  acTitleVertRightColor = $0000002D;
  acHeaderHorzTopColor = $0000002E;
  acHeaderHorzInsideColor = $0000002F;
  acHeaderHorzBottomColor = $00000030;
  acHeaderVertLeftColor = $00000031;
  acHeaderVertInsideColor = $00000032;
  acHeaderVertRightColor = $00000033;
  acDataHorzTopColor = $00000034;
  acDataHorzInsideColor = $00000035;
  acDataHorzBottomColor = $00000036;
  acDataVertLeftColor = $00000037;
  acDataVertInsideColor = $00000038;
  acDataVertRightColor = $00000039;
  acTitleHorzTopLineWeight = $00000046;
  acTitleHorzInsideLineWeight = $00000047;
  acTitleHorzBottomLineWeight = $00000048;
  acTitleVertLeftLineWeight = $00000049;
  acTitleVertInsideLineWeight = $0000004A;
  acTitleVertRightLineWeight = $0000004B;
  acHeaderHorzTopLineWeight = $0000004C;
  acHeaderHorzInsideLineWeight = $0000004D;
  acHeaderHorzBottomLineWeight = $0000004E;
  acHeaderVertLeftLineWeight = $0000004F;
  acHeaderVertInsideLineWeight = $00000050;
  acHeaderVertRightLineWeight = $00000051;
  acDataHorzTopLineWeight = $00000052;
  acDataHorzInsideLineWeight = $00000053;
  acDataHorzBottomLineWeight = $00000054;
  acDataVertLeftLineWeight = $00000055;
  acDataVertInsideLineWeight = $00000056;
  acDataVertRightLineWeight = $00000057;
  acTitleHorzTopVisibility = $00000064;
  acTitleHorzInsideVisibility = $00000065;
  acTitleHorzBottomVisibility = $00000066;
  acTitleVertLeftVisibility = $00000067;
  acTitleVertInsideVisibility = $00000068;
  acTitleVertRightVisibility = $00000069;
  acHeaderHorzTopVisibility = $0000006A;
  acHeaderHorzInsideVisibility = $0000006B;
  acHeaderHorzBottomVisibility = $0000006C;
  acHeaderVertLeftVisibility = $0000006D;
  acHeaderVertInsideVisibility = $0000006E;
  acHeaderVertRightVisibility = $0000006F;
  acDataHorzTopVisibility = $00000070;
  acDataHorzInsideVisibility = $00000071;
  acDataHorzBottomVisibility = $00000072;
  acDataVertLeftVisibility = $00000073;
  acDataVertInsideVisibility = $00000074;
  acDataVertRightVisibility = $00000075;
  acCellAlign = $00000082;
  acCellBackgroundFillNone = $00000083;
  acCellBackgroundColor = $00000084;
  acCellContentColor = $00000085;
  acCellTextStyle = $00000086;
  acCellTextHeight = $00000087;
  acCellTopGridColor = $00000088;
  acCellRightGridColor = $00000089;
  acCellBottomGridColor = $0000008A;
  acCellLeftGridColor = $0000008B;
  acCellTopGridLineWeight = $0000008C;
  acCellRightGridLineWeight = $0000008D;
  acCellBottomGridLineWeight = $0000008E;
  acCellLeftGridLineWeight = $0000008F;
  acCellTopVisibility = $00000090;
  acCellRightVisibility = $00000091;
  acCellBottomVisibility = $00000092;
  acCellLeftVisibility = $00000093;
  acCellDataType = $00000094;

// Constants for enum AcMLineJustification
type
  AcMLineJustification = TOleEnum;
const
  acTop = $00000000;
  acZero = $00000001;
  acBottom = $00000002;

// Constants for enum AcBlockScaling
type
  AcBlockScaling = TOleEnum;
const
  acAny = $00000000;
  acUniform = $00000001;

// Constants for enum AcDynamicBlockReferencePropertyUnitsType
type
  AcDynamicBlockReferencePropertyUnitsType = TOleEnum;
const
  acNoUnits = $00000000;
  acAngular = $00000001;
  acDistance = $00000002;
  acArea = $00000003;

// Constants for enum AcSectionState
type
  AcSectionState = TOleEnum;
const
  acSectionStatePlane = $00000001;
  acSectionStateBoundary = $00000002;
  acSectionStateVolume = $00000004;

// Constants for enum AcSectionSubItem
type
  AcSectionSubItem = TOleEnum;
const
  acSectionSubItemkNone = $00000000;
  acSectionSubItemSectionLine = $00000001;
  acSectionSubItemSectionLineTop = $00000002;
  acSectionSubItemSectionLineBottom = $00000004;
  acSectionSubItemBackLine = $00000008;
  acSectionSubItemBackLineTop = $00000010;
  acSectionSubItemBackLineBottom = $00000020;
  acSectionSubItemVerticalLineTop = $00000040;
  acSectionSubItemVerticalLineBottom = $00000080;

// Constants for enum AcSectionType
type
  AcSectionType = TOleEnum;
const
  acSectionTypeLiveSection = $00000001;
  acSectionType2dSection = $00000002;
  acSectionType3dSection = $00000004;

// Constants for enum AcSectionGeneration
type
  AcSectionGeneration = TOleEnum;
const
  acSectionGenerationSourceAllObjects = $00000001;
  acSectionGenerationSourceSelectedObjects = $00000002;
  acSectionGenerationDestinationNewBlock = $00000010;
  acSectionGenerationDestinationReplaceBlock = $00000020;
  acSectionGenerationDestinationFile = $00000040;

// Constants for enum AcHelixConstrainType
type
  AcHelixConstrainType = TOleEnum;
const
  acTurnHeight = $00000000;
  acTurns = $00000001;
  acHeight = $00000002;

// Constants for enum AcShadowDisplayType
type
  AcShadowDisplayType = TOleEnum;
const
  acCastsAndReceivesShadows = $00000000;
  acCastsShadows = $00000001;
  acReceivesShadows = $00000002;
  acIgnoreShadows = $00000003;

// Constants for enum AcLoftedSurfaceNormalType
type
  AcLoftedSurfaceNormalType = TOleEnum;
const
  acRuled = $00000000;
  acSmooth = $00000001;
  acFirstNormal = $00000002;
  acLastNormal = $00000003;
  acEndsNormal = $00000004;
  acAllNormal = $00000005;
  acUseDraftAngles = $00000006;

// Constants for enum AcHelixTwistType
type
  AcHelixTwistType = TOleEnum;
const
  acCCW = $00000000;
  acCW = $00000001;

// Constants for enum AcColorMethod
type
  AcColorMethod = TOleEnum;
const
  acColorMethodByLayer = $000000C0;
  acColorMethodByBlock = $000000C1;
  acColorMethodByRGB = $000000C2;
  acColorMethodByACI = $000000C3;
  acColorMethodForeground = $000000C5;

// Constants for enum AcadSecurityParamsType
type
  AcadSecurityParamsType = TOleEnum;
const
  ACADSECURITYPARAMS_ENCRYPT_DATA = $00000001;
  ACADSECURITYPARAMS_ENCRYPT_PROPS = $00000002;
  ACADSECURITYPARAMS_SIGN_DATA = $00000010;
  ACADSECURITYPARAMS_ADD_TIMESTAMP = $00000020;

// Constants for enum AcadSecurityParamsConstants
type
  AcadSecurityParamsConstants = TOleEnum;
const
  ACADSECURITYPARAMS_ALGID_RC4 = $00006801;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IAcadObject = interface;
  IAcadObjectDisp = dispinterface;
  IAcadDatabase = interface;
  IAcadDatabaseDisp = dispinterface;
  IAcadBlock = interface;
  IAcadBlockDisp = dispinterface;
  IAcadModelSpace = interface;
  IAcadModelSpaceDisp = dispinterface;
  IAcadEntity = interface;
  IAcadEntityDisp = dispinterface;
  IAcadAcCmColor = interface;
  IAcadAcCmColorDisp = dispinterface;
  IAcadHyperlinks = interface;
  IAcadHyperlinksDisp = dispinterface;
  IAcadHyperlink = interface;
  IAcadHyperlinkDisp = dispinterface;
  IAcad3DFace = interface;
  IAcad3DFaceDisp = dispinterface;
  IAcadPolygonMesh = interface;
  IAcadPolygonMeshDisp = dispinterface;
  IAcad3DPolyline = interface;
  IAcad3DPolylineDisp = dispinterface;
  IAcadArc = interface;
  IAcadArcDisp = dispinterface;
  IAcadAttribute = interface;
  IAcadAttributeDisp = dispinterface;
  IAcad3DSolid = interface;
  IAcad3DSolidDisp = dispinterface;
  IAcadRegion = interface;
  IAcadRegionDisp = dispinterface;
  IAcadCircle = interface;
  IAcadCircleDisp = dispinterface;
  IAcadDimension = interface;
  IAcadDimensionDisp = dispinterface;
  IAcadDimAligned = interface;
  IAcadDimAlignedDisp = dispinterface;
  IAcadDimAngular = interface;
  IAcadDimAngularDisp = dispinterface;
  IAcadDimDiametric = interface;
  IAcadDimDiametricDisp = dispinterface;
  IAcadDimRotated = interface;
  IAcadDimRotatedDisp = dispinterface;
  IAcadDimOrdinate = interface;
  IAcadDimOrdinateDisp = dispinterface;
  IAcadDimRadial = interface;
  IAcadDimRadialDisp = dispinterface;
  IAcadEllipse = interface;
  IAcadEllipseDisp = dispinterface;
  IAcadLeader = interface;
  IAcadLeaderDisp = dispinterface;
  IAcadMText = interface;
  IAcadMTextDisp = dispinterface;
  IAcadPoint = interface;
  IAcadPointDisp = dispinterface;
  IAcadLWPolyline = interface;
  IAcadLWPolylineDisp = dispinterface;
  IAcadPolyline = interface;
  IAcadPolylineDisp = dispinterface;
  IAcadRay = interface;
  IAcadRayDisp = dispinterface;
  IAcadShape = interface;
  IAcadShapeDisp = dispinterface;
  IAcadSolid = interface;
  IAcadSolidDisp = dispinterface;
  IAcadSpline = interface;
  IAcadSplineDisp = dispinterface;
  IAcadText = interface;
  IAcadTextDisp = dispinterface;
  IAcadTolerance = interface;
  IAcadToleranceDisp = dispinterface;
  IAcadTrace = interface;
  IAcadTraceDisp = dispinterface;
  IAcadXline = interface;
  IAcadXlineDisp = dispinterface;
  IAcadBlockReference = interface;
  IAcadBlockReferenceDisp = dispinterface;
  IAcadHatch = interface;
  IAcadHatchDisp = dispinterface;
  IAcadRasterImage = interface;
  IAcadRasterImageDisp = dispinterface;
  IAcadLine = interface;
  IAcadLineDisp = dispinterface;
  IAcadPlotConfiguration = interface;
  IAcadPlotConfigurationDisp = dispinterface;
  IAcadLayout = interface;
  IAcadLayoutDisp = dispinterface;
  IAcadMInsertBlock = interface;
  IAcadMInsertBlockDisp = dispinterface;
  IAcadPolyfaceMesh = interface;
  IAcadPolyfaceMeshDisp = dispinterface;
  IAcadMLine = interface;
  IAcadMLineDisp = dispinterface;
  IAcadDim3PointAngular = interface;
  IAcadDim3PointAngularDisp = dispinterface;
  IAcadExternalReference = interface;
  IAcadExternalReferenceDisp = dispinterface;
  IAcadTable = interface;
  IAcadTableDisp = dispinterface;
  IAcadDimArcLength = interface;
  IAcadDimArcLengthDisp = dispinterface;
  IAcadDimRadialLarge = interface;
  IAcadDimRadialLargeDisp = dispinterface;
  IAcadSection = interface;
  IAcadSectionDisp = dispinterface;
  IAcadSectionSettings = interface;
  IAcadSectionSettingsDisp = dispinterface;
  IAcadSectionTypeSettings = interface;
  IAcadSectionTypeSettingsDisp = dispinterface;
  IAcadPaperSpace = interface;
  IAcadPaperSpaceDisp = dispinterface;
  IAcadPViewport = interface;
  IAcadPViewportDisp = dispinterface;
  IAcadView = interface;
  IAcadViewDisp = dispinterface;
  IAcadBlocks = interface;
  IAcadBlocksDisp = dispinterface;
  IAcadGroups = interface;
  IAcadGroupsDisp = dispinterface;
  IAcadGroup = interface;
  IAcadGroupDisp = dispinterface;
  IAcadDimStyles = interface;
  IAcadDimStylesDisp = dispinterface;
  IAcadDimStyle = interface;
  IAcadDimStyleDisp = dispinterface;
  IAcadLayers = interface;
  IAcadLayersDisp = dispinterface;
  IAcadLayer = interface;
  IAcadLayerDisp = dispinterface;
  IAcadLineTypes = interface;
  IAcadLineTypesDisp = dispinterface;
  IAcadLineType = interface;
  IAcadLineTypeDisp = dispinterface;
  IAcadDictionaries = interface;
  IAcadDictionariesDisp = dispinterface;
  IAcadDictionary = interface;
  IAcadDictionaryDisp = dispinterface;
  IAcadXRecord = interface;
  IAcadXRecordDisp = dispinterface;
  IAcadRegisteredApplications = interface;
  IAcadRegisteredApplicationsDisp = dispinterface;
  IAcadRegisteredApplication = interface;
  IAcadRegisteredApplicationDisp = dispinterface;
  IAcadTextStyles = interface;
  IAcadTextStylesDisp = dispinterface;
  IAcadTextStyle = interface;
  IAcadTextStyleDisp = dispinterface;
  IAcadUCSs = interface;
  IAcadUCSsDisp = dispinterface;
  IAcadUCS = interface;
  IAcadUCSDisp = dispinterface;
  IAcadViews = interface;
  IAcadViewsDisp = dispinterface;
  IAcadViewports = interface;
  IAcadViewportsDisp = dispinterface;
  IAcadViewport = interface;
  IAcadViewportDisp = dispinterface;
  IAcadLayouts = interface;
  IAcadLayoutsDisp = dispinterface;
  IAcadPlotConfigurations = interface;
  IAcadPlotConfigurationsDisp = dispinterface;
  IAcadDatabasePreferences = interface;
  IAcadDatabasePreferencesDisp = dispinterface;
  IAcadFileDependencies = interface;
  IAcadFileDependenciesDisp = dispinterface;
  IAcadFileDependency = interface;
  IAcadFileDependencyDisp = dispinterface;
  IAcadSummaryInfo = interface;
  IAcadSummaryInfoDisp = dispinterface;
  IAcadSectionManager = interface;
  IAcadSectionManagerDisp = dispinterface;
  IAcadMaterials = interface;
  IAcadMaterialsDisp = dispinterface;
  IAcadMaterial = interface;
  IAcadMaterialDisp = dispinterface;
  IAcadDynamicBlockReferenceProperty = interface;
  IAcadDynamicBlockReferencePropertyDisp = dispinterface;
  IAcadObjectEvents = interface;
  IAcadSortentsTable = interface;
  IAcadSortentsTableDisp = dispinterface;
  IAcadIdPair = interface;
  IAcadIdPairDisp = dispinterface;
  IAcadTableStyle = interface;
  IAcadTableStyleDisp = dispinterface;
  IAcadShadowDisplay = interface;
  IAcadShadowDisplayDisp = dispinterface;
  IAcadAttributeReference = interface;
  IAcadAttributeReferenceDisp = dispinterface;
  IAcadOle = interface;
  IAcadOleDisp = dispinterface;
  IAcadHelix = interface;
  IAcadHelixDisp = dispinterface;
  IAcadSurface = interface;
  IAcadSurfaceDisp = dispinterface;
  IAcadPlaneSurface = interface;
  IAcadPlaneSurfaceDisp = dispinterface;
  IAcadExtrudedSurface = interface;
  IAcadExtrudedSurfaceDisp = dispinterface;
  IAcadRevolvedSurface = interface;
  IAcadRevolvedSurfaceDisp = dispinterface;
  IAcadSweptSurface = interface;
  IAcadSweptSurfaceDisp = dispinterface;
  IAcadLoftedSurface = interface;
  IAcadLoftedSurfaceDisp = dispinterface;
  IAcadUnderlay = interface;
  IAcadUnderlayDisp = dispinterface;
  IAcadSubEntity = interface;
  IAcadSubEntityDisp = dispinterface;
  IAcadSubEntSolidFace = interface;
  IAcadSubEntSolidFaceDisp = dispinterface;
  IAcadSubEntSolidEdge = interface;
  IAcadSubEntSolidEdgeDisp = dispinterface;
  IAcadSubEntSolidVertex = interface;
  IAcadSubEntSolidVertexDisp = dispinterface;
  IAcadSubEntSolidNode = interface;
  IAcadSubEntSolidNodeDisp = dispinterface;
  IAcadSecurityParams = interface;
  IAcadSecurityParamsDisp = dispinterface;
  IAcadLayerStateManager = interface;
  IAcadLayerStateManagerDisp = dispinterface;
  _DAcadApplicationEvents = dispinterface;
  IAcadDocument = interface;
  IAcadDocumentDisp = dispinterface;
  IAcadPlot = interface;
  IAcadPlotDisp = dispinterface;
  IAcadApplication = interface;
  IAcadApplicationDisp = dispinterface;
  IAcadPreferences = interface;
  IAcadPreferencesDisp = dispinterface;
  IAcadPreferencesFiles = interface;
  IAcadPreferencesFilesDisp = dispinterface;
  IAcadPreferencesDisplay = interface;
  IAcadPreferencesDisplayDisp = dispinterface;
  IAcadPreferencesOpenSave = interface;
  IAcadPreferencesOpenSaveDisp = dispinterface;
  IAcadPreferencesOutput = interface;
  IAcadPreferencesOutputDisp = dispinterface;
  IAcadPreferencesSystem = interface;
  IAcadPreferencesSystemDisp = dispinterface;
  IAcadPreferencesUser = interface;
  IAcadPreferencesUserDisp = dispinterface;
  IAcadPreferencesDrafting = interface;
  IAcadPreferencesDraftingDisp = dispinterface;
  IAcadPreferencesSelection = interface;
  IAcadPreferencesSelectionDisp = dispinterface;
  IAcadPreferencesProfiles = interface;
  IAcadPreferencesProfilesDisp = dispinterface;
  IAcadMenuGroups = interface;
  IAcadMenuGroupsDisp = dispinterface;
  IAcadMenuGroup = interface;
  IAcadMenuGroupDisp = dispinterface;
  IAcadPopupMenus = interface;
  IAcadPopupMenusDisp = dispinterface;
  IAcadPopupMenu = interface;
  IAcadPopupMenuDisp = dispinterface;
  IAcadPopupMenuItem = interface;
  IAcadPopupMenuItemDisp = dispinterface;
  IAcadToolbars = interface;
  IAcadToolbarsDisp = dispinterface;
  IAcadToolbar = interface;
  IAcadToolbarDisp = dispinterface;
  IAcadToolbarItem = interface;
  IAcadToolbarItemDisp = dispinterface;
  IAcadMenuBar = interface;
  IAcadMenuBarDisp = dispinterface;
  IAcadDocuments = interface;
  IAcadDocumentsDisp = dispinterface;
  IAcadState = interface;
  IAcadStateDisp = dispinterface;
  IAcadSelectionSets = interface;
  IAcadSelectionSetsDisp = dispinterface;
  IAcadSelectionSet = interface;
  IAcadSelectionSetDisp = dispinterface;
  IAcadUtility = interface;
  IAcadUtilityDisp = dispinterface;
  _DAcadDocumentEvents = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  AcadHyperlink = IAcadHyperlink;
  AcadDynamicBlockReferenceProperty = IAcadDynamicBlockReferenceProperty;
  AcadAcCmColor = IAcadAcCmColor;
  AcadObject = IAcadObject;
  AcadXRecord = IAcadXRecord;
  AcadSortentsTable = IAcadSortentsTable;
  AcadDimStyle = IAcadDimStyle;
  AcadLayer = IAcadLayer;
  AcadLineType = IAcadLineType;
  AcadMaterial = IAcadMaterial;
  AcadRegisteredApplication = IAcadRegisteredApplication;
  AcadTextStyle = IAcadTextStyle;
  AcadUCS = IAcadUCS;
  AcadView = IAcadView;
  AcadViewport = IAcadViewport;
  AcadGroup = IAcadGroup;
  AcadPlotConfiguration = IAcadPlotConfiguration;
  AcadLayout = IAcadLayout;
  AcadIdPair = IAcadIdPair;
  AcadTableStyle = IAcadTableStyle;
  AcadSectionSettings = IAcadSectionSettings;
  AcadSectionTypeSettings = IAcadSectionTypeSettings;
  AcadHyperlinks = IAcadHyperlinks;
  AcadDictionary = IAcadDictionary;
  AcadLayers = IAcadLayers;
  AcadDimStyles = IAcadDimStyles;
  AcadDictionaries = IAcadDictionaries;
  AcadLineTypes = IAcadLineTypes;
  AcadMaterials = IAcadMaterials;
  AcadTextStyles = IAcadTextStyles;
  AcadUCSs = IAcadUCSs;
  AcadRegisteredApplications = IAcadRegisteredApplications;
  AcadViews = IAcadViews;
  AcadViewports = IAcadViewports;
  AcadGroups = IAcadGroups;
  AcadBlocks = IAcadBlocks;
  AcadLayouts = IAcadLayouts;
  AcadPlotConfigurations = IAcadPlotConfigurations;
  AcadEntity = IAcadEntity;
  AcadRasterImage = IAcadRasterImage;
  Acad3DFace = IAcad3DFace;
  Acad3DPolyline = IAcad3DPolyline;
  AcadRegion = IAcadRegion;
  Acad3DSolid = IAcad3DSolid;
  AcadArc = IAcadArc;
  AcadAttribute = IAcadAttribute;
  AcadAttributeReference = IAcadAttributeReference;
  AcadBlockReference = IAcadBlockReference;
  AcadCircle = IAcadCircle;
  AcadEllipse = IAcadEllipse;
  AcadHatch = IAcadHatch;
  AcadLeader = IAcadLeader;
  AcadLWPolyline = IAcadLWPolyline;
  AcadLine = IAcadLine;
  AcadMText = IAcadMText;
  AcadPoint = IAcadPoint;
  AcadPolyline = IAcadPolyline;
  AcadPolygonMesh = IAcadPolygonMesh;
  AcadRay = IAcadRay;
  AcadShape = IAcadShape;
  AcadSolid = IAcadSolid;
  AcadSpline = IAcadSpline;
  AcadText = IAcadText;
  AcadTolerance = IAcadTolerance;
  AcadTrace = IAcadTrace;
  AcadXline = IAcadXline;
  AcadPViewport = IAcadPViewport;
  AcadMInsertBlock = IAcadMInsertBlock;
  AcadPolyfaceMesh = IAcadPolyfaceMesh;
  AcadMLine = IAcadMLine;
  AcadExternalReference = IAcadExternalReference;
  AcadTable = IAcadTable;
  AcadOle = IAcadOle;
  AcadHelix = IAcadHelix;
  AcadSurface = IAcadSurface;
  AcadPlaneSurface = IAcadPlaneSurface;
  AcadExtrudedSurface = IAcadExtrudedSurface;
  AcadRevolvedSurface = IAcadRevolvedSurface;
  AcadSweptSurface = IAcadSweptSurface;
  AcadLoftedSurface = IAcadLoftedSurface;
  AcadSection = IAcadSection;
  AcadSectionManager = IAcadSectionManager;
  AcadDwfUnderlay = IAcadUnderlay;
  AcadDgnUnderlay = IAcadUnderlay;
  AcadSubEntity = IAcadSubEntity;
  AcadSubEntSolidFace = IAcadSubEntSolidFace;
  AcadSubEntSolidEdge = IAcadSubEntSolidEdge;
  AcadSubEntSolidVertex = IAcadSubEntSolidVertex;
  AcadSubEntSolidNode = IAcadSubEntSolidNode;
  AcadDimension = IAcadDimension;
  AcadDimAligned = IAcadDimAligned;
  AcadDimAngular = IAcadDimAngular;
  AcadDimDiametric = IAcadDimDiametric;
  AcadDimOrdinate = IAcadDimOrdinate;
  AcadDimRadial = IAcadDimRadial;
  AcadDimRotated = IAcadDimRotated;
  AcadDim3PointAngular = IAcadDim3PointAngular;
  AcadDimArcLength = IAcadDimArcLength;
  AcadDimRadialLarge = IAcadDimRadialLarge;
  AcadBlock = IAcadBlock;
  AcadModelSpace = IAcadModelSpace;
  AcadPaperSpace = IAcadPaperSpace;
  AcadFileDependency = IAcadFileDependency;
  AcadFileDependencies = IAcadFileDependencies;
  AcadSummaryInfo = IAcadSummaryInfo;
  AcadDatabasePreferences = IAcadDatabasePreferences;
  AcadDatabase = IAcadDatabase;
  AcadSecurityParams = IAcadSecurityParams;
  AcadLayerStateManager = IAcadLayerStateManager;
  AcadState = IAcadState;
  AcadApplication = IAcadApplication;
  AcadSelectionSet = IAcadSelectionSet;
  AcadSelectionSets = IAcadSelectionSets;
  AcadPlot = IAcadPlot;
  AcadPreferences = IAcadPreferences;
  AcadPreferencesDrafting = IAcadPreferencesDrafting;
  AcadPreferencesDisplay = IAcadPreferencesDisplay;
  AcadPreferencesFiles = IAcadPreferencesFiles;
  AcadPreferencesOpenSave = IAcadPreferencesOpenSave;
  AcadPreferencesOutput = IAcadPreferencesOutput;
  AcadPreferencesProfiles = IAcadPreferencesProfiles;
  AcadPreferencesSelection = IAcadPreferencesSelection;
  AcadPreferencesSystem = IAcadPreferencesSystem;
  AcadPreferencesUser = IAcadPreferencesUser;
  AcadMenuGroups = IAcadMenuGroups;
  AcadMenuGroup = IAcadMenuGroup;
  AcadMenuBar = IAcadMenuBar;
  AcadPopupMenus = IAcadPopupMenus;
  AcadPopupMenu = IAcadPopupMenu;
  AcadPopupMenuItem = IAcadPopupMenuItem;
  AcadUtility = IAcadUtility;
  AcadDocument = IAcadDocument;
  AcadDocuments = IAcadDocuments;
  AcadToolbars = IAcadToolbars;
  AcadToolbar = IAcadToolbar;
  AcadToolbarItem = IAcadToolbarItem;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PDouble1 = ^Double; {*}
  PWordBool1 = ^WordBool; {*}
  PWideString1 = ^WideString; {*}
  PInteger1 = ^Integer; {*}
  POleVariant1 = ^OleVariant; {*}

  ACAD_COLOR = AcColor; 
  ACAD_LAYER = WideString; 
  ACAD_LTYPE = WideString; 
  ACAD_NULL = Integer; 
  ACAD_DISTANCE = Double; 
  ACAD_ANGLE = Double; 
  ACAD_LWEIGHT = AcLineWeight; 
  ACAD_NOUNITS = Double; 
  ACAD_POINT = OleVariant; 

// *********************************************************************//
// Interface: IAcadObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF942C4F-A848-4192-B7C2-94C680C264A1}
// *********************************************************************//
  IAcadObject = interface(IDispatch)
    ['{EF942C4F-A848-4192-B7C2-94C680C264A1}']
    function Get_Handle: WideString; safecall;
    function Get_ObjectName: WideString; safecall;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); safecall;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); safecall;
    procedure Delete; safecall;
    function Get_ObjectID: Integer; safecall;
    function Get_Application: IDispatch; safecall;
    function Get_Database: IAcadDatabase; safecall;
    function Get_HasExtensionDictionary: WordBool; safecall;
    function GetExtensionDictionary: IAcadDictionary; safecall;
    function Get_OwnerID: Integer; safecall;
    function Get_Document: IDispatch; safecall;
    procedure Erase; safecall;
    property Handle: WideString read Get_Handle;
    property ObjectName: WideString read Get_ObjectName;
    property ObjectID: Integer read Get_ObjectID;
    property Application: IDispatch read Get_Application;
    property Database: IAcadDatabase read Get_Database;
    property HasExtensionDictionary: WordBool read Get_HasExtensionDictionary;
    property OwnerID: Integer read Get_OwnerID;
    property Document: IDispatch read Get_Document;
  end;

// *********************************************************************//
// DispIntf:  IAcadObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF942C4F-A848-4192-B7C2-94C680C264A1}
// *********************************************************************//
  IAcadObjectDisp = dispinterface
    ['{EF942C4F-A848-4192-B7C2-94C680C264A1}']
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDatabase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9625062-DC43-4D1C-9FC6-8512123BB91B}
// *********************************************************************//
  IAcadDatabase = interface(IDispatch)
    ['{A9625062-DC43-4D1C-9FC6-8512123BB91B}']
    function Get_ModelSpace: IAcadModelSpace; safecall;
    function Get_PaperSpace: IAcadPaperSpace; safecall;
    function Get_Blocks: IAcadBlocks; safecall;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant; safecall;
    function Get_Groups: IAcadGroups; safecall;
    function Get_DimStyles: IAcadDimStyles; safecall;
    function Get_Layers: IAcadLayers; safecall;
    function Get_Linetypes: IAcadLineTypes; safecall;
    function Get_Dictionaries: IAcadDictionaries; safecall;
    function Get_RegisteredApplications: IAcadRegisteredApplications; safecall;
    function Get_TextStyles: IAcadTextStyles; safecall;
    function Get_UserCoordinateSystems: IAcadUCSs; safecall;
    function Get_Views: IAcadViews; safecall;
    function Get_Viewports: IAcadViewports; safecall;
    function Get_ElevationModelSpace: Double; safecall;
    procedure Set_ElevationModelSpace(Elevation: Double); safecall;
    function Get_ElevationPaperSpace: Double; safecall;
    procedure Set_ElevationPaperSpace(Elevation: Double); safecall;
    function Get_Limits: OleVariant; safecall;
    procedure Set_Limits(Limits: OleVariant); safecall;
    function HandleToObject(const Handle: WideString): IDispatch; safecall;
    function ObjectIdToObject(ObjectID: Integer): IDispatch; safecall;
    function Get_Layouts: IAcadLayouts; safecall;
    function Get_PlotConfigurations: IAcadPlotConfigurations; safecall;
    function Get_Preferences: IAcadDatabasePreferences; safecall;
    function Get_FileDependencies: IAcadFileDependencies; safecall;
    function Get_SummaryInfo: IAcadSummaryInfo; safecall;
    function Get_SectionManager: IAcadSectionManager; safecall;
    function Get_Materials: IAcadMaterials; safecall;
    property ModelSpace: IAcadModelSpace read Get_ModelSpace;
    property PaperSpace: IAcadPaperSpace read Get_PaperSpace;
    property Blocks: IAcadBlocks read Get_Blocks;
    property Groups: IAcadGroups read Get_Groups;
    property DimStyles: IAcadDimStyles read Get_DimStyles;
    property Layers: IAcadLayers read Get_Layers;
    property Linetypes: IAcadLineTypes read Get_Linetypes;
    property Dictionaries: IAcadDictionaries read Get_Dictionaries;
    property RegisteredApplications: IAcadRegisteredApplications read Get_RegisteredApplications;
    property TextStyles: IAcadTextStyles read Get_TextStyles;
    property UserCoordinateSystems: IAcadUCSs read Get_UserCoordinateSystems;
    property Views: IAcadViews read Get_Views;
    property Viewports: IAcadViewports read Get_Viewports;
    property ElevationModelSpace: Double read Get_ElevationModelSpace write Set_ElevationModelSpace;
    property ElevationPaperSpace: Double read Get_ElevationPaperSpace write Set_ElevationPaperSpace;
    property Limits: OleVariant read Get_Limits write Set_Limits;
    property Layouts: IAcadLayouts read Get_Layouts;
    property PlotConfigurations: IAcadPlotConfigurations read Get_PlotConfigurations;
    property Preferences: IAcadDatabasePreferences read Get_Preferences;
    property FileDependencies: IAcadFileDependencies read Get_FileDependencies;
    property SummaryInfo: IAcadSummaryInfo read Get_SummaryInfo;
    property SectionManager: IAcadSectionManager read Get_SectionManager;
    property Materials: IAcadMaterials read Get_Materials;
  end;

// *********************************************************************//
// DispIntf:  IAcadDatabaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9625062-DC43-4D1C-9FC6-8512123BB91B}
// *********************************************************************//
  IAcadDatabaseDisp = dispinterface
    ['{A9625062-DC43-4D1C-9FC6-8512123BB91B}']
    property ModelSpace: IAcadModelSpace readonly dispid 1;
    property PaperSpace: IAcadPaperSpace readonly dispid 2;
    property Blocks: IAcadBlocks readonly dispid 3;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant; dispid 4;
    property Groups: IAcadGroups readonly dispid 5;
    property DimStyles: IAcadDimStyles readonly dispid 6;
    property Layers: IAcadLayers readonly dispid 7;
    property Linetypes: IAcadLineTypes readonly dispid 8;
    property Dictionaries: IAcadDictionaries readonly dispid 9;
    property RegisteredApplications: IAcadRegisteredApplications readonly dispid 10;
    property TextStyles: IAcadTextStyles readonly dispid 11;
    property UserCoordinateSystems: IAcadUCSs readonly dispid 12;
    property Views: IAcadViews readonly dispid 13;
    property Viewports: IAcadViewports readonly dispid 14;
    property ElevationModelSpace: Double dispid 15;
    property ElevationPaperSpace: Double dispid 16;
    property Limits: OleVariant dispid 17;
    function HandleToObject(const Handle: WideString): IDispatch; dispid 18;
    function ObjectIdToObject(ObjectID: Integer): IDispatch; dispid 19;
    property Layouts: IAcadLayouts readonly dispid 20;
    property PlotConfigurations: IAcadPlotConfigurations readonly dispid 21;
    property Preferences: IAcadDatabasePreferences readonly dispid 22;
    property FileDependencies: IAcadFileDependencies readonly dispid 70;
    property SummaryInfo: IAcadSummaryInfo readonly dispid 71;
    property SectionManager: IAcadSectionManager readonly dispid 72;
    property Materials: IAcadMaterials readonly dispid 73;
  end;

// *********************************************************************//
// Interface: IAcadBlock
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {165531B8-67A4-46D8-AC99-F8150FA7A412}
// *********************************************************************//
  IAcadBlock = interface(IAcadObject)
    ['{165531B8-67A4-46D8-AC99-F8150FA7A412}']
    function Item(Index: OleVariant): IAcadEntity; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure Set_Origin(Origin: OleVariant); safecall;
    function AddCustomObject(const ClassName: WideString): IDispatch; safecall;
    function Add3DFace(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                       Point4: OleVariant): IAcad3DFace; safecall;
    function Add3DMesh(M: SYSINT; N: SYSINT; PointsMatrix: OleVariant): IAcadPolygonMesh; safecall;
    function Add3DPoly(PointsArray: OleVariant): IAcad3DPolyline; safecall;
    function AddArc(Center: OleVariant; Radius: Double; StartAngle: Double; EndAngle: Double): IAcadArc; safecall;
    function AddAttribute(Height: Double; Mode: AcAttributeMode; const Prompt: WideString; 
                          InsertionPoint: OleVariant; const Tag: WideString; const Value: WideString): IAcadAttribute; safecall;
    function AddBox(Origin: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; safecall;
    function AddCircle(Center: OleVariant; Radius: Double): IAcadCircle; safecall;
    function AddCone(Center: OleVariant; BaseRadius: Double; Height: Double): IAcad3DSolid; safecall;
    function AddCylinder(Center: OleVariant; Radius: Double; Height: Double): IAcad3DSolid; safecall;
    function AddDimAligned(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           TextPosition: OleVariant): IAcadDimAligned; safecall;
    function AddDimAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                           SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDimAngular; safecall;
    function AddDimDiametric(ChordPoint: OleVariant; FarChordPoint: OleVariant; LeaderLength: Double): IAcadDimDiametric; safecall;
    function AddDimRotated(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           DimLineLocation: OleVariant; RotationAngle: Double): IAcadDimRotated; safecall;
    function AddDimOrdinate(DefinitionPoint: OleVariant; LeaderEndPoint: OleVariant; 
                            UseXAxis: SYSINT): IAcadDimOrdinate; safecall;
    function AddDimRadial(Center: OleVariant; ChordPoint: OleVariant; LeaderLength: Double): IAcadDimRadial; safecall;
    function AddEllipse(Center: OleVariant; MajorAxis: OleVariant; RadiusRatio: Double): IAcadEllipse; safecall;
    function AddEllipticalCone(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                               Height: Double): IAcad3DSolid; safecall;
    function AddEllipticalCylinder(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                                   Height: Double): IAcad3DSolid; safecall;
    function AddExtrudedSolid(const Profile: IAcadRegion; Height: Double; TaperAngle: Double): IAcad3DSolid; safecall;
    function AddExtrudedSolidAlongPath(const Profile: IAcadRegion; const Path: IDispatch): IAcad3DSolid; safecall;
    function AddLeader(PointsArray: OleVariant; const Annotation: IAcadEntity; Type_: AcLeaderType): IAcadLeader; safecall;
    function AddMText(InsertionPoint: OleVariant; Width: Double; const Text: WideString): IAcadMText; safecall;
    function AddPoint(Point: OleVariant): IAcadPoint; safecall;
    function AddLightWeightPolyline(VerticesList: OleVariant): IAcadLWPolyline; safecall;
    function AddPolyline(VerticesList: OleVariant): IAcadPolyline; safecall;
    function AddRay(Point1: OleVariant; Point2: OleVariant): IAcadRay; safecall;
    function AddRegion(ObjectList: OleVariant): OleVariant; safecall;
    function AddRevolvedSolid(const Profile: IAcadRegion; AxisPoint: OleVariant; 
                              AxisDir: OleVariant; Angle: Double): IAcad3DSolid; safecall;
    function AddShape(const Name: WideString; InsertionPoint: OleVariant; ScaleFactor: Double; 
                      RotationAngle: Double): IAcadShape; safecall;
    function AddSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; Point4: OleVariant): IAcadSolid; safecall;
    function AddSphere(Center: OleVariant; Radius: Double): IAcad3DSolid; safecall;
    function AddSpline(PointsArray: OleVariant; StartTangent: OleVariant; EndTangent: OleVariant): IAcadSpline; safecall;
    function AddText(const TextString: WideString; InsertionPoint: OleVariant; Height: Double): IAcadText; safecall;
    function AddTolerance(const Text: WideString; InsertionPoint: OleVariant; Direction: OleVariant): IAcadTolerance; safecall;
    function AddTorus(Center: OleVariant; TorusRadius: Double; TubeRadius: Double): IAcad3DSolid; safecall;
    function AddTrace(PointsArray: OleVariant): IAcadTrace; safecall;
    function AddWedge(Center: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; safecall;
    function AddXline(Point1: OleVariant; Point2: OleVariant): IAcadXline; safecall;
    function InsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                         Yscale: Double; Zscale: Double; Rotation: Double; Password: OleVariant): IAcadBlockReference; safecall;
    function AddHatch(PatternType: SYSINT; const PatternName: WideString; Associativity: WordBool; 
                      HatchObjectType: OleVariant): IAcadHatch; safecall;
    function AddRaster(const imageFileName: WideString; InsertionPoint: OleVariant; 
                       ScaleFactor: Double; RotationAngle: Double): IAcadRasterImage; safecall;
    function AddLine(StartPoint: OleVariant; EndPoint: OleVariant): IAcadLine; safecall;
    function Get_IsLayout: WordBool; safecall;
    function Get_Layout: IAcadLayout; safecall;
    function Get_IsXRef: WordBool; safecall;
    function AddMInsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                             Yscale: Double; Zscale: Double; Rotation: Double; NumRows: Integer; 
                             NumColumns: Integer; RowSpacing: Integer; ColumnSpacing: Integer; 
                             Password: OleVariant): IAcadMInsertBlock; safecall;
    function AddPolyfaceMesh(VertexList: OleVariant; FaceList: OleVariant): IAcadPolyfaceMesh; safecall;
    function AddMLine(VertexList: OleVariant): IAcadMLine; safecall;
    function AddDim3PointAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                                 SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDim3PointAngular; safecall;
    function Get_XRefDatabase: IAcadDatabase; safecall;
    function AttachExternalReference(const PathName: WideString; const Name: WideString; 
                                     InsertionPoint: OleVariant; Xscale: Double; Yscale: Double; 
                                     Zscale: Double; Rotation: Double; bOverlay: WordBool; 
                                     Password: OleVariant): IAcadExternalReference; safecall;
    procedure Unload; safecall;
    procedure Reload; safecall;
    procedure Bind(bPrefixName: WordBool); safecall;
    procedure Detach; safecall;
    function AddTable(InsertionPoint: OleVariant; NumRows: SYSINT; NumColumns: SYSINT; 
                      RowHeight: Double; ColWidth: Double): IAcadTable; safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const bstrName: WideString); safecall;
    function Get_Comments: WideString; safecall;
    procedure Set_Comments(const bstrName: WideString); safecall;
    function Get_Units: AcInsertUnits; safecall;
    procedure Set_Units(pIU: AcInsertUnits); safecall;
    function Get_Explodable: WordBool; safecall;
    procedure Set_Explodable(bExplodable: WordBool); safecall;
    function Get_BlockScaling: AcBlockScaling; safecall;
    procedure Set_BlockScaling(pBS: AcBlockScaling); safecall;
    function Get_IsDynamicBlock: WordBool; safecall;
    function AddDimArc(ArcCenter: OleVariant; FirstEndPoint: OleVariant; 
                       SecondEndPoint: OleVariant; ArcPoint: OleVariant): IAcadDimArcLength; safecall;
    function AddDimRadialLarge(Center: OleVariant; ChordPoint: OleVariant; 
                               OverrideCenter: OleVariant; JogPoint: OleVariant; JogAngle: Double): IAcadDimRadialLarge; safecall;
    function AddSection(FromPoint: OleVariant; ToPoint: OleVariant; planeVector: OleVariant): IAcadSection; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Name: WideString read Get_Name write Set_Name;
    property Origin: OleVariant read Get_Origin write Set_Origin;
    property IsLayout: WordBool read Get_IsLayout;
    property Layout: IAcadLayout read Get_Layout;
    property IsXRef: WordBool read Get_IsXRef;
    property XRefDatabase: IAcadDatabase read Get_XRefDatabase;
    property Path: WideString read Get_Path write Set_Path;
    property Comments: WideString read Get_Comments write Set_Comments;
    property Units: AcInsertUnits read Get_Units write Set_Units;
    property Explodable: WordBool read Get_Explodable write Set_Explodable;
    property BlockScaling: AcBlockScaling read Get_BlockScaling write Set_BlockScaling;
    property IsDynamicBlock: WordBool read Get_IsDynamicBlock;
  end;

// *********************************************************************//
// DispIntf:  IAcadBlockDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {165531B8-67A4-46D8-AC99-F8150FA7A412}
// *********************************************************************//
  IAcadBlockDisp = dispinterface
    ['{165531B8-67A4-46D8-AC99-F8150FA7A412}']
    function Item(Index: OleVariant): IAcadEntity; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1536;
    property Name: WideString dispid 1537;
    property Origin: OleVariant dispid 1538;
    function AddCustomObject(const ClassName: WideString): IDispatch; dispid 1539;
    function Add3DFace(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                       Point4: OleVariant): IAcad3DFace; dispid 1540;
    function Add3DMesh(M: SYSINT; N: SYSINT; PointsMatrix: OleVariant): IAcadPolygonMesh; dispid 1541;
    function Add3DPoly(PointsArray: OleVariant): IAcad3DPolyline; dispid 1542;
    function AddArc(Center: OleVariant; Radius: Double; StartAngle: Double; EndAngle: Double): IAcadArc; dispid 1543;
    function AddAttribute(Height: Double; Mode: AcAttributeMode; const Prompt: WideString; 
                          InsertionPoint: OleVariant; const Tag: WideString; const Value: WideString): IAcadAttribute; dispid 1544;
    function AddBox(Origin: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1545;
    function AddCircle(Center: OleVariant; Radius: Double): IAcadCircle; dispid 1546;
    function AddCone(Center: OleVariant; BaseRadius: Double; Height: Double): IAcad3DSolid; dispid 1547;
    function AddCylinder(Center: OleVariant; Radius: Double; Height: Double): IAcad3DSolid; dispid 1548;
    function AddDimAligned(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           TextPosition: OleVariant): IAcadDimAligned; dispid 1549;
    function AddDimAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                           SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDimAngular; dispid 1550;
    function AddDimDiametric(ChordPoint: OleVariant; FarChordPoint: OleVariant; LeaderLength: Double): IAcadDimDiametric; dispid 1551;
    function AddDimRotated(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           DimLineLocation: OleVariant; RotationAngle: Double): IAcadDimRotated; dispid 1552;
    function AddDimOrdinate(DefinitionPoint: OleVariant; LeaderEndPoint: OleVariant; 
                            UseXAxis: SYSINT): IAcadDimOrdinate; dispid 1553;
    function AddDimRadial(Center: OleVariant; ChordPoint: OleVariant; LeaderLength: Double): IAcadDimRadial; dispid 1554;
    function AddEllipse(Center: OleVariant; MajorAxis: OleVariant; RadiusRatio: Double): IAcadEllipse; dispid 1555;
    function AddEllipticalCone(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                               Height: Double): IAcad3DSolid; dispid 1556;
    function AddEllipticalCylinder(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                                   Height: Double): IAcad3DSolid; dispid 1557;
    function AddExtrudedSolid(const Profile: IAcadRegion; Height: Double; TaperAngle: Double): IAcad3DSolid; dispid 1558;
    function AddExtrudedSolidAlongPath(const Profile: IAcadRegion; const Path: IDispatch): IAcad3DSolid; dispid 1559;
    function AddLeader(PointsArray: OleVariant; const Annotation: IAcadEntity; Type_: AcLeaderType): IAcadLeader; dispid 1560;
    function AddMText(InsertionPoint: OleVariant; Width: Double; const Text: WideString): IAcadMText; dispid 1561;
    function AddPoint(Point: OleVariant): IAcadPoint; dispid 1562;
    function AddLightWeightPolyline(VerticesList: OleVariant): IAcadLWPolyline; dispid 1563;
    function AddPolyline(VerticesList: OleVariant): IAcadPolyline; dispid 1564;
    function AddRay(Point1: OleVariant; Point2: OleVariant): IAcadRay; dispid 1565;
    function AddRegion(ObjectList: OleVariant): OleVariant; dispid 1566;
    function AddRevolvedSolid(const Profile: IAcadRegion; AxisPoint: OleVariant; 
                              AxisDir: OleVariant; Angle: Double): IAcad3DSolid; dispid 1567;
    function AddShape(const Name: WideString; InsertionPoint: OleVariant; ScaleFactor: Double; 
                      RotationAngle: Double): IAcadShape; dispid 1568;
    function AddSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; Point4: OleVariant): IAcadSolid; dispid 1569;
    function AddSphere(Center: OleVariant; Radius: Double): IAcad3DSolid; dispid 1570;
    function AddSpline(PointsArray: OleVariant; StartTangent: OleVariant; EndTangent: OleVariant): IAcadSpline; dispid 1571;
    function AddText(const TextString: WideString; InsertionPoint: OleVariant; Height: Double): IAcadText; dispid 1572;
    function AddTolerance(const Text: WideString; InsertionPoint: OleVariant; Direction: OleVariant): IAcadTolerance; dispid 1573;
    function AddTorus(Center: OleVariant; TorusRadius: Double; TubeRadius: Double): IAcad3DSolid; dispid 1574;
    function AddTrace(PointsArray: OleVariant): IAcadTrace; dispid 1575;
    function AddWedge(Center: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1576;
    function AddXline(Point1: OleVariant; Point2: OleVariant): IAcadXline; dispid 1577;
    function InsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                         Yscale: Double; Zscale: Double; Rotation: Double; Password: OleVariant): IAcadBlockReference; dispid 1578;
    function AddHatch(PatternType: SYSINT; const PatternName: WideString; Associativity: WordBool; 
                      HatchObjectType: OleVariant): IAcadHatch; dispid 1579;
    function AddRaster(const imageFileName: WideString; InsertionPoint: OleVariant; 
                       ScaleFactor: Double; RotationAngle: Double): IAcadRasterImage; dispid 1580;
    function AddLine(StartPoint: OleVariant; EndPoint: OleVariant): IAcadLine; dispid 1581;
    property IsLayout: WordBool readonly dispid 1582;
    property Layout: IAcadLayout readonly dispid 1583;
    property IsXRef: WordBool readonly dispid 1584;
    function AddMInsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                             Yscale: Double; Zscale: Double; Rotation: Double; NumRows: Integer; 
                             NumColumns: Integer; RowSpacing: Integer; ColumnSpacing: Integer; 
                             Password: OleVariant): IAcadMInsertBlock; dispid 1585;
    function AddPolyfaceMesh(VertexList: OleVariant; FaceList: OleVariant): IAcadPolyfaceMesh; dispid 1586;
    function AddMLine(VertexList: OleVariant): IAcadMLine; dispid 1587;
    function AddDim3PointAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                                 SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDim3PointAngular; dispid 1588;
    property XRefDatabase: IAcadDatabase readonly dispid 1589;
    function AttachExternalReference(const PathName: WideString; const Name: WideString; 
                                     InsertionPoint: OleVariant; Xscale: Double; Yscale: Double; 
                                     Zscale: Double; Rotation: Double; bOverlay: WordBool; 
                                     Password: OleVariant): IAcadExternalReference; dispid 1590;
    procedure Unload; dispid 1591;
    procedure Reload; dispid 1592;
    procedure Bind(bPrefixName: WordBool); dispid 1593;
    procedure Detach; dispid 1594;
    function AddTable(InsertionPoint: OleVariant; NumRows: SYSINT; NumColumns: SYSINT; 
                      RowHeight: Double; ColWidth: Double): IAcadTable; dispid 1595;
    property Path: WideString dispid 1596;
    property Comments: WideString dispid 1597;
    property Units: AcInsertUnits dispid 1598;
    property Explodable: WordBool dispid 1599;
    property BlockScaling: AcBlockScaling dispid 1600;
    property IsDynamicBlock: WordBool readonly dispid 1601;
    function AddDimArc(ArcCenter: OleVariant; FirstEndPoint: OleVariant; 
                       SecondEndPoint: OleVariant; ArcPoint: OleVariant): IAcadDimArcLength; dispid 1602;
    function AddDimRadialLarge(Center: OleVariant; ChordPoint: OleVariant; 
                               OverrideCenter: OleVariant; JogPoint: OleVariant; JogAngle: Double): IAcadDimRadialLarge; dispid 1603;
    function AddSection(FromPoint: OleVariant; ToPoint: OleVariant; planeVector: OleVariant): IAcadSection; dispid 1604;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadModelSpace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B0C6EF1-BEFA-4CCD-B408-1A274E825C39}
// *********************************************************************//
  IAcadModelSpace = interface(IAcadBlock)
    ['{2B0C6EF1-BEFA-4CCD-B408-1A274E825C39}']
  end;

// *********************************************************************//
// DispIntf:  IAcadModelSpaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B0C6EF1-BEFA-4CCD-B408-1A274E825C39}
// *********************************************************************//
  IAcadModelSpaceDisp = dispinterface
    ['{2B0C6EF1-BEFA-4CCD-B408-1A274E825C39}']
    function Item(Index: OleVariant): IAcadEntity; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1536;
    property Name: WideString dispid 1537;
    property Origin: OleVariant dispid 1538;
    function AddCustomObject(const ClassName: WideString): IDispatch; dispid 1539;
    function Add3DFace(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                       Point4: OleVariant): IAcad3DFace; dispid 1540;
    function Add3DMesh(M: SYSINT; N: SYSINT; PointsMatrix: OleVariant): IAcadPolygonMesh; dispid 1541;
    function Add3DPoly(PointsArray: OleVariant): IAcad3DPolyline; dispid 1542;
    function AddArc(Center: OleVariant; Radius: Double; StartAngle: Double; EndAngle: Double): IAcadArc; dispid 1543;
    function AddAttribute(Height: Double; Mode: AcAttributeMode; const Prompt: WideString; 
                          InsertionPoint: OleVariant; const Tag: WideString; const Value: WideString): IAcadAttribute; dispid 1544;
    function AddBox(Origin: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1545;
    function AddCircle(Center: OleVariant; Radius: Double): IAcadCircle; dispid 1546;
    function AddCone(Center: OleVariant; BaseRadius: Double; Height: Double): IAcad3DSolid; dispid 1547;
    function AddCylinder(Center: OleVariant; Radius: Double; Height: Double): IAcad3DSolid; dispid 1548;
    function AddDimAligned(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           TextPosition: OleVariant): IAcadDimAligned; dispid 1549;
    function AddDimAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                           SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDimAngular; dispid 1550;
    function AddDimDiametric(ChordPoint: OleVariant; FarChordPoint: OleVariant; LeaderLength: Double): IAcadDimDiametric; dispid 1551;
    function AddDimRotated(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           DimLineLocation: OleVariant; RotationAngle: Double): IAcadDimRotated; dispid 1552;
    function AddDimOrdinate(DefinitionPoint: OleVariant; LeaderEndPoint: OleVariant; 
                            UseXAxis: SYSINT): IAcadDimOrdinate; dispid 1553;
    function AddDimRadial(Center: OleVariant; ChordPoint: OleVariant; LeaderLength: Double): IAcadDimRadial; dispid 1554;
    function AddEllipse(Center: OleVariant; MajorAxis: OleVariant; RadiusRatio: Double): IAcadEllipse; dispid 1555;
    function AddEllipticalCone(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                               Height: Double): IAcad3DSolid; dispid 1556;
    function AddEllipticalCylinder(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                                   Height: Double): IAcad3DSolid; dispid 1557;
    function AddExtrudedSolid(const Profile: IAcadRegion; Height: Double; TaperAngle: Double): IAcad3DSolid; dispid 1558;
    function AddExtrudedSolidAlongPath(const Profile: IAcadRegion; const Path: IDispatch): IAcad3DSolid; dispid 1559;
    function AddLeader(PointsArray: OleVariant; const Annotation: IAcadEntity; Type_: AcLeaderType): IAcadLeader; dispid 1560;
    function AddMText(InsertionPoint: OleVariant; Width: Double; const Text: WideString): IAcadMText; dispid 1561;
    function AddPoint(Point: OleVariant): IAcadPoint; dispid 1562;
    function AddLightWeightPolyline(VerticesList: OleVariant): IAcadLWPolyline; dispid 1563;
    function AddPolyline(VerticesList: OleVariant): IAcadPolyline; dispid 1564;
    function AddRay(Point1: OleVariant; Point2: OleVariant): IAcadRay; dispid 1565;
    function AddRegion(ObjectList: OleVariant): OleVariant; dispid 1566;
    function AddRevolvedSolid(const Profile: IAcadRegion; AxisPoint: OleVariant; 
                              AxisDir: OleVariant; Angle: Double): IAcad3DSolid; dispid 1567;
    function AddShape(const Name: WideString; InsertionPoint: OleVariant; ScaleFactor: Double; 
                      RotationAngle: Double): IAcadShape; dispid 1568;
    function AddSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; Point4: OleVariant): IAcadSolid; dispid 1569;
    function AddSphere(Center: OleVariant; Radius: Double): IAcad3DSolid; dispid 1570;
    function AddSpline(PointsArray: OleVariant; StartTangent: OleVariant; EndTangent: OleVariant): IAcadSpline; dispid 1571;
    function AddText(const TextString: WideString; InsertionPoint: OleVariant; Height: Double): IAcadText; dispid 1572;
    function AddTolerance(const Text: WideString; InsertionPoint: OleVariant; Direction: OleVariant): IAcadTolerance; dispid 1573;
    function AddTorus(Center: OleVariant; TorusRadius: Double; TubeRadius: Double): IAcad3DSolid; dispid 1574;
    function AddTrace(PointsArray: OleVariant): IAcadTrace; dispid 1575;
    function AddWedge(Center: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1576;
    function AddXline(Point1: OleVariant; Point2: OleVariant): IAcadXline; dispid 1577;
    function InsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                         Yscale: Double; Zscale: Double; Rotation: Double; Password: OleVariant): IAcadBlockReference; dispid 1578;
    function AddHatch(PatternType: SYSINT; const PatternName: WideString; Associativity: WordBool; 
                      HatchObjectType: OleVariant): IAcadHatch; dispid 1579;
    function AddRaster(const imageFileName: WideString; InsertionPoint: OleVariant; 
                       ScaleFactor: Double; RotationAngle: Double): IAcadRasterImage; dispid 1580;
    function AddLine(StartPoint: OleVariant; EndPoint: OleVariant): IAcadLine; dispid 1581;
    property IsLayout: WordBool readonly dispid 1582;
    property Layout: IAcadLayout readonly dispid 1583;
    property IsXRef: WordBool readonly dispid 1584;
    function AddMInsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                             Yscale: Double; Zscale: Double; Rotation: Double; NumRows: Integer; 
                             NumColumns: Integer; RowSpacing: Integer; ColumnSpacing: Integer; 
                             Password: OleVariant): IAcadMInsertBlock; dispid 1585;
    function AddPolyfaceMesh(VertexList: OleVariant; FaceList: OleVariant): IAcadPolyfaceMesh; dispid 1586;
    function AddMLine(VertexList: OleVariant): IAcadMLine; dispid 1587;
    function AddDim3PointAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                                 SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDim3PointAngular; dispid 1588;
    property XRefDatabase: IAcadDatabase readonly dispid 1589;
    function AttachExternalReference(const PathName: WideString; const Name: WideString; 
                                     InsertionPoint: OleVariant; Xscale: Double; Yscale: Double; 
                                     Zscale: Double; Rotation: Double; bOverlay: WordBool; 
                                     Password: OleVariant): IAcadExternalReference; dispid 1590;
    procedure Unload; dispid 1591;
    procedure Reload; dispid 1592;
    procedure Bind(bPrefixName: WordBool); dispid 1593;
    procedure Detach; dispid 1594;
    function AddTable(InsertionPoint: OleVariant; NumRows: SYSINT; NumColumns: SYSINT; 
                      RowHeight: Double; ColWidth: Double): IAcadTable; dispid 1595;
    property Path: WideString dispid 1596;
    property Comments: WideString dispid 1597;
    property Units: AcInsertUnits dispid 1598;
    property Explodable: WordBool dispid 1599;
    property BlockScaling: AcBlockScaling dispid 1600;
    property IsDynamicBlock: WordBool readonly dispid 1601;
    function AddDimArc(ArcCenter: OleVariant; FirstEndPoint: OleVariant; 
                       SecondEndPoint: OleVariant; ArcPoint: OleVariant): IAcadDimArcLength; dispid 1602;
    function AddDimRadialLarge(Center: OleVariant; ChordPoint: OleVariant; 
                               OverrideCenter: OleVariant; JogPoint: OleVariant; JogAngle: Double): IAcadDimRadialLarge; dispid 1603;
    function AddSection(FromPoint: OleVariant; ToPoint: OleVariant; planeVector: OleVariant): IAcadSection; dispid 1604;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadEntity
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E460D811-DFF0-4FCD-9D75-B440FA38263B}
// *********************************************************************//
  IAcadEntity = interface(IAcadObject)
    ['{E460D811-DFF0-4FCD-9D75-B440FA38263B}']
    function Get_TrueColor: IAcadAcCmColor; safecall;
    procedure Set_TrueColor(const pColor: IAcadAcCmColor); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Layer: WideString); safecall;
    function Get_Linetype: WideString; safecall;
    procedure Set_Linetype(const Linetype: WideString); safecall;
    function Get_LinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_LinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(bVisible: WordBool); safecall;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; safecall;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; safecall;
    procedure Highlight(HighlightFlag: WordBool); safecall;
    function Copy: IDispatch; safecall;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); safecall;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); safecall;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); safecall;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; safecall;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; safecall;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); safecall;
    procedure TransformBy(TransformationMatrix: OleVariant); safecall;
    procedure Update; safecall;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); safecall;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; safecall;
    function Get_PlotStyleName: WideString; safecall;
    procedure Set_PlotStyleName(const plotStyle: WideString); safecall;
    function Get_Lineweight: ACAD_LWEIGHT; safecall;
    procedure Set_Lineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_Hyperlinks: IAcadHyperlinks; safecall;
    function Get_Material: WideString; safecall;
    procedure Set_Material(const Material: WideString); safecall;
    function Get_EntityName: WideString; safecall;
    function Get_EntityType: Integer; safecall;
    function Get_color: ACAD_COLOR; safecall;
    procedure Set_color(color: ACAD_COLOR); safecall;
    property TrueColor: IAcadAcCmColor read Get_TrueColor write Set_TrueColor;
    property Layer: WideString read Get_Layer write Set_Layer;
    property Linetype: WideString read Get_Linetype write Set_Linetype;
    property LinetypeScale: ACAD_NOUNITS read Get_LinetypeScale write Set_LinetypeScale;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property PlotStyleName: WideString read Get_PlotStyleName write Set_PlotStyleName;
    property Lineweight: ACAD_LWEIGHT read Get_Lineweight write Set_Lineweight;
    property Hyperlinks: IAcadHyperlinks read Get_Hyperlinks;
    property Material: WideString read Get_Material write Set_Material;
    property EntityName: WideString read Get_EntityName;
    property EntityType: Integer read Get_EntityType;
    property color: ACAD_COLOR read Get_color write Set_color;
  end;

// *********************************************************************//
// DispIntf:  IAcadEntityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E460D811-DFF0-4FCD-9D75-B440FA38263B}
// *********************************************************************//
  IAcadEntityDisp = dispinterface
    ['{E460D811-DFF0-4FCD-9D75-B440FA38263B}']
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadAcCmColor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7382F647-BC48-456E-B877-D18F58BE6878}
// *********************************************************************//
  IAcadAcCmColor = interface(IDispatch)
    ['{7382F647-BC48-456E-B877-D18F58BE6878}']
    procedure Set_EntityColor(eColor: Integer); safecall;
    function Get_EntityColor: Integer; safecall;
    function Get_ColorName: WideString; safecall;
    function Get_BookName: WideString; safecall;
    procedure SetNames(const ColorName: WideString; const BookName: WideString); safecall;
    procedure Delete; safecall;
    function Get_Red: Integer; safecall;
    function Get_Blue: Integer; safecall;
    function Get_Green: Integer; safecall;
    procedure SetRGB(Red: Integer; Green: Integer; Blue: Integer); safecall;
    procedure Set_ColorMethod(Flags: AcColorMethod); safecall;
    function Get_ColorMethod: AcColorMethod; safecall;
    function Get_ColorIndex: AcColor; safecall;
    procedure Set_ColorIndex(color: AcColor); safecall;
    procedure SetColorBookColor(const BookName: WideString; const ColorName: WideString); safecall;
    property EntityColor: Integer read Get_EntityColor write Set_EntityColor;
    property ColorName: WideString read Get_ColorName;
    property BookName: WideString read Get_BookName;
    property Red: Integer read Get_Red;
    property Blue: Integer read Get_Blue;
    property Green: Integer read Get_Green;
    property ColorMethod: AcColorMethod read Get_ColorMethod write Set_ColorMethod;
    property ColorIndex: AcColor read Get_ColorIndex write Set_ColorIndex;
  end;

// *********************************************************************//
// DispIntf:  IAcadAcCmColorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7382F647-BC48-456E-B877-D18F58BE6878}
// *********************************************************************//
  IAcadAcCmColorDisp = dispinterface
    ['{7382F647-BC48-456E-B877-D18F58BE6878}']
    property EntityColor: Integer dispid 1;
    property ColorName: WideString readonly dispid 2;
    property BookName: WideString readonly dispid 3;
    procedure SetNames(const ColorName: WideString; const BookName: WideString); dispid 4;
    procedure Delete; dispid 5;
    property Red: Integer readonly dispid 6;
    property Blue: Integer readonly dispid 7;
    property Green: Integer readonly dispid 8;
    procedure SetRGB(Red: Integer; Green: Integer; Blue: Integer); dispid 9;
    property ColorMethod: AcColorMethod dispid 16;
    property ColorIndex: AcColor dispid 17;
    procedure SetColorBookColor(const BookName: WideString; const ColorName: WideString); dispid 18;
  end;

// *********************************************************************//
// Interface: IAcadHyperlinks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FE28743E-1DAD-48F5-936B-6924E68AE3BE}
// *********************************************************************//
  IAcadHyperlinks = interface(IDispatch)
    ['{FE28743E-1DAD-48F5-936B-6924E68AE3BE}']
    function Item(Index: Integer): IAcadHyperlink; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Application: IDispatch; safecall;
    function Add(const Name: WideString; Description: OleVariant; NamedLocation: OleVariant): IAcadHyperlink; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Application: IDispatch read Get_Application;
  end;

// *********************************************************************//
// DispIntf:  IAcadHyperlinksDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FE28743E-1DAD-48F5-936B-6924E68AE3BE}
// *********************************************************************//
  IAcadHyperlinksDisp = dispinterface
    ['{FE28743E-1DAD-48F5-936B-6924E68AE3BE}']
    function Item(Index: Integer): IAcadHyperlink; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    property Application: IDispatch readonly dispid 2;
    function Add(const Name: WideString; Description: OleVariant; NamedLocation: OleVariant): IAcadHyperlink; dispid 3;
  end;

// *********************************************************************//
// Interface: IAcadHyperlink
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82090F76-F6CB-4414-93E3-7A7EC8286BAC}
// *********************************************************************//
  IAcadHyperlink = interface(IDispatch)
    ['{82090F76-F6CB-4414-93E3-7A7EC8286BAC}']
    procedure Set_URL(const URLPath: WideString); safecall;
    function Get_URL: WideString; safecall;
    procedure Set_URLDescription(const Description: WideString); safecall;
    function Get_URLDescription: WideString; safecall;
    function Get_Application: IDispatch; safecall;
    procedure Delete; safecall;
    procedure Set_URLNamedLocation(const Location: WideString); safecall;
    function Get_URLNamedLocation: WideString; safecall;
    property URL: WideString read Get_URL write Set_URL;
    property URLDescription: WideString read Get_URLDescription write Set_URLDescription;
    property Application: IDispatch read Get_Application;
    property URLNamedLocation: WideString read Get_URLNamedLocation write Set_URLNamedLocation;
  end;

// *********************************************************************//
// DispIntf:  IAcadHyperlinkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82090F76-F6CB-4414-93E3-7A7EC8286BAC}
// *********************************************************************//
  IAcadHyperlinkDisp = dispinterface
    ['{82090F76-F6CB-4414-93E3-7A7EC8286BAC}']
    property URL: WideString dispid 1;
    property URLDescription: WideString dispid 2;
    property Application: IDispatch readonly dispid 3;
    procedure Delete; dispid 4;
    property URLNamedLocation: WideString dispid 5;
  end;

// *********************************************************************//
// Interface: IAcad3DFace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C09A2DB0-CBD5-4106-A6EB-35736B3F5754}
// *********************************************************************//
  IAcad3DFace = interface(IAcadEntity)
    ['{C09A2DB0-CBD5-4106-A6EB-35736B3F5754}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(corners: OleVariant); safecall;
    function Get_VisibilityEdge1: WordBool; safecall;
    procedure Set_VisibilityEdge1(visibility: WordBool); safecall;
    function Get_VisibilityEdge2: WordBool; safecall;
    procedure Set_VisibilityEdge2(visibility: WordBool); safecall;
    function Get_VisibilityEdge3: WordBool; safecall;
    procedure Set_VisibilityEdge3(visibility: WordBool); safecall;
    function Get_VisibilityEdge4: WordBool; safecall;
    procedure Set_VisibilityEdge4(visibility: WordBool); safecall;
    function GetInvisibleEdge(Index: SYSINT): WordBool; safecall;
    procedure SetInvisibleEdge(Index: SYSINT; State: WordBool); safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property VisibilityEdge1: WordBool read Get_VisibilityEdge1 write Set_VisibilityEdge1;
    property VisibilityEdge2: WordBool read Get_VisibilityEdge2 write Set_VisibilityEdge2;
    property VisibilityEdge3: WordBool read Get_VisibilityEdge3 write Set_VisibilityEdge3;
    property VisibilityEdge4: WordBool read Get_VisibilityEdge4 write Set_VisibilityEdge4;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
  end;

// *********************************************************************//
// DispIntf:  IAcad3DFaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C09A2DB0-CBD5-4106-A6EB-35736B3F5754}
// *********************************************************************//
  IAcad3DFaceDisp = dispinterface
    ['{C09A2DB0-CBD5-4106-A6EB-35736B3F5754}']
    property Coordinates: OleVariant dispid 1;
    property VisibilityEdge1: WordBool dispid 2;
    property VisibilityEdge2: WordBool dispid 3;
    property VisibilityEdge3: WordBool dispid 4;
    property VisibilityEdge4: WordBool dispid 5;
    function GetInvisibleEdge(Index: SYSINT): WordBool; dispid 6;
    procedure SetInvisibleEdge(Index: SYSINT; State: WordBool); dispid 7;
    property Coordinate[Index: SYSINT]: OleVariant dispid 8;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPolygonMesh
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8436D08F-6B44-4B65-AECB-4B3F570E38E8}
// *********************************************************************//
  IAcadPolygonMesh = interface(IAcadEntity)
    ['{8436D08F-6B44-4B65-AECB-4B3F570E38E8}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    function Get_MClose: WordBool; safecall;
    procedure Set_MClose(bClose: WordBool); safecall;
    function Get_NClose: WordBool; safecall;
    procedure Set_NClose(bClose: WordBool); safecall;
    function Get_MDensity: Integer; safecall;
    procedure Set_MDensity(density: Integer); safecall;
    function Get_NDensity: Integer; safecall;
    procedure Set_NDensity(density: Integer); safecall;
    function Get_MVertexCount: Integer; safecall;
    function Get_NVertexCount: Integer; safecall;
    function Get_type_: AcPolymeshType; safecall;
    procedure Set_type_(Type_: AcPolymeshType); safecall;
    procedure AppendVertex(vertex: OleVariant); safecall;
    function Explode: OleVariant; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property MClose: WordBool read Get_MClose write Set_MClose;
    property NClose: WordBool read Get_NClose write Set_NClose;
    property MDensity: Integer read Get_MDensity write Set_MDensity;
    property NDensity: Integer read Get_NDensity write Set_NDensity;
    property MVertexCount: Integer read Get_MVertexCount;
    property NVertexCount: Integer read Get_NVertexCount;
    property type_: AcPolymeshType read Get_type_ write Set_type_;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
  end;

// *********************************************************************//
// DispIntf:  IAcadPolygonMeshDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8436D08F-6B44-4B65-AECB-4B3F570E38E8}
// *********************************************************************//
  IAcadPolygonMeshDisp = dispinterface
    ['{8436D08F-6B44-4B65-AECB-4B3F570E38E8}']
    property Coordinates: OleVariant dispid 1;
    property MClose: WordBool dispid 2;
    property NClose: WordBool dispid 3;
    property MDensity: Integer dispid 4;
    property NDensity: Integer dispid 5;
    property MVertexCount: Integer readonly dispid 6;
    property NVertexCount: Integer readonly dispid 7;
    property type_: AcPolymeshType dispid 8;
    procedure AppendVertex(vertex: OleVariant); dispid 9;
    function Explode: OleVariant; dispid 10;
    property Coordinate[Index: SYSINT]: OleVariant dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcad3DPolyline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B89275F4-543E-4EAF-A931-DAB1341A2B67}
// *********************************************************************//
  IAcad3DPolyline = interface(IAcadEntity)
    ['{B89275F4-543E-4EAF-A931-DAB1341A2B67}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    procedure AppendVertex(vertex: OleVariant); safecall;
    function Explode: OleVariant; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    function Get_type_: Ac3DPolylineType; safecall;
    procedure Set_type_(Type_: Ac3DPolylineType); safecall;
    function Get_Closed: WordBool; safecall;
    procedure Set_Closed(fClose: WordBool); safecall;
    function Get_Length: Double; safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property type_: Ac3DPolylineType read Get_type_ write Set_type_;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property Length: Double read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  IAcad3DPolylineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B89275F4-543E-4EAF-A931-DAB1341A2B67}
// *********************************************************************//
  IAcad3DPolylineDisp = dispinterface
    ['{B89275F4-543E-4EAF-A931-DAB1341A2B67}']
    property Coordinates: OleVariant dispid 1;
    procedure AppendVertex(vertex: OleVariant); dispid 2;
    function Explode: OleVariant; dispid 3;
    property Coordinate[Index: SYSINT]: OleVariant dispid 4;
    property type_: Ac3DPolylineType dispid 5;
    property Closed: WordBool dispid 6;
    property Length: Double readonly dispid 7;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadArc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD789CE5-850C-4FED-B9B7-34F4A7192DD7}
// *********************************************************************//
  IAcadArc = interface(IAcadEntity)
    ['{DD789CE5-850C-4FED-B9B7-34F4A7192DD7}']
    function Get_StartPoint: OleVariant; safecall;
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(CenterPoint: OleVariant); safecall;
    function Get_EndPoint: OleVariant; safecall;
    function Get_Radius: Double; safecall;
    procedure Set_Radius(Radius: Double); safecall;
    function Get_StartAngle: ACAD_ANGLE; safecall;
    procedure Set_StartAngle(Angle: ACAD_ANGLE); safecall;
    function Get_EndAngle: ACAD_ANGLE; safecall;
    procedure Set_EndAngle(Angle: ACAD_ANGLE); safecall;
    function Get_TotalAngle: ACAD_ANGLE; safecall;
    function Get_ArcLength: ACAD_DISTANCE; safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    function Get_Area: Double; safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    property StartPoint: OleVariant read Get_StartPoint;
    property Center: OleVariant read Get_Center write Set_Center;
    property EndPoint: OleVariant read Get_EndPoint;
    property Radius: Double read Get_Radius write Set_Radius;
    property StartAngle: ACAD_ANGLE read Get_StartAngle write Set_StartAngle;
    property EndAngle: ACAD_ANGLE read Get_EndAngle write Set_EndAngle;
    property TotalAngle: ACAD_ANGLE read Get_TotalAngle;
    property ArcLength: ACAD_DISTANCE read Get_ArcLength;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Area: Double read Get_Area;
    property Normal: OleVariant read Get_Normal write Set_Normal;
  end;

// *********************************************************************//
// DispIntf:  IAcadArcDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD789CE5-850C-4FED-B9B7-34F4A7192DD7}
// *********************************************************************//
  IAcadArcDisp = dispinterface
    ['{DD789CE5-850C-4FED-B9B7-34F4A7192DD7}']
    property StartPoint: OleVariant readonly dispid 1;
    property Center: OleVariant dispid 2;
    property EndPoint: OleVariant readonly dispid 3;
    property Radius: Double dispid 4;
    property StartAngle: ACAD_ANGLE dispid 5;
    property EndAngle: ACAD_ANGLE dispid 6;
    property TotalAngle: ACAD_ANGLE readonly dispid 7;
    property ArcLength: ACAD_DISTANCE readonly dispid 8;
    property Thickness: Double dispid 9;
    function Offset(Distance: Double): OleVariant; dispid 10;
    property Area: Double readonly dispid 11;
    property Normal: OleVariant dispid 12;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadAttribute
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {090C78C3-33E1-451B-B00F-A58F7B62DA00}
// *********************************************************************//
  IAcadAttribute = interface(IAcadEntity)
    ['{090C78C3-33E1-451B-B00F-A58F7B62DA00}']
    function Get_FieldLength: Integer; safecall;
    procedure Set_FieldLength(fieldLen: Integer); safecall;
    function Get_TagString: WideString; safecall;
    procedure Set_TagString(const Tag: WideString); safecall;
    function Get_PromptString: WideString; safecall;
    procedure Set_PromptString(const bstrPrompt: WideString); safecall;
    function Get_TextString: WideString; safecall;
    procedure Set_TextString(const bstrText: WideString); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const Name: WideString); safecall;
    function Get_Alignment: AcAlignment; safecall;
    procedure Set_Alignment(align: AcAlignment); safecall;
    function Get_HorizontalAlignment: AcHorizontalAlignment; safecall;
    procedure Set_HorizontalAlignment(horizAlign: AcHorizontalAlignment); safecall;
    function Get_VerticalAlignment: AcVerticalAlignment; safecall;
    procedure Set_VerticalAlignment(vertiAlign: AcVerticalAlignment); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(scalFactor: ACAD_NOUNITS); safecall;
    function Get_ObliqueAngle: ACAD_ANGLE; safecall;
    procedure Set_ObliqueAngle(obliAngle: ACAD_ANGLE); safecall;
    function Get_TextAlignmentPoint: OleVariant; safecall;
    procedure Set_TextAlignmentPoint(alignPoint: OleVariant); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_TextGenerationFlag: Integer; safecall;
    procedure Set_TextGenerationFlag(textGenFlag: Integer); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_Mode: Integer; safecall;
    procedure Set_Mode(Mode: Integer); safecall;
    function Get_UpsideDown: WordBool; safecall;
    procedure Set_UpsideDown(bUpsideDown: WordBool); safecall;
    function Get_Backward: WordBool; safecall;
    procedure Set_Backward(bBackward: WordBool); safecall;
    function Get_Invisible: WordBool; safecall;
    procedure Set_Invisible(bInvisible: WordBool); safecall;
    function Get_Constant: WordBool; safecall;
    procedure Set_Constant(bConstant: WordBool); safecall;
    function Get_Verify: WordBool; safecall;
    procedure Set_Verify(bVerify: WordBool); safecall;
    function Get_Preset: WordBool; safecall;
    procedure Set_Preset(bPreset: WordBool); safecall;
    function Get_LockPosition: WordBool; safecall;
    procedure Set_LockPosition(bLockPosition: WordBool); safecall;
    property FieldLength: Integer read Get_FieldLength write Set_FieldLength;
    property TagString: WideString read Get_TagString write Set_TagString;
    property PromptString: WideString read Get_PromptString write Set_PromptString;
    property TextString: WideString read Get_TextString write Set_TextString;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property Alignment: AcAlignment read Get_Alignment write Set_Alignment;
    property HorizontalAlignment: AcHorizontalAlignment read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property VerticalAlignment: AcVerticalAlignment read Get_VerticalAlignment write Set_VerticalAlignment;
    property Height: Double read Get_Height write Set_Height;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property ObliqueAngle: ACAD_ANGLE read Get_ObliqueAngle write Set_ObliqueAngle;
    property TextAlignmentPoint: OleVariant read Get_TextAlignmentPoint write Set_TextAlignmentPoint;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property TextGenerationFlag: Integer read Get_TextGenerationFlag write Set_TextGenerationFlag;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Mode: Integer read Get_Mode write Set_Mode;
    property UpsideDown: WordBool read Get_UpsideDown write Set_UpsideDown;
    property Backward: WordBool read Get_Backward write Set_Backward;
    property Invisible: WordBool read Get_Invisible write Set_Invisible;
    property Constant: WordBool read Get_Constant write Set_Constant;
    property Verify: WordBool read Get_Verify write Set_Verify;
    property Preset: WordBool read Get_Preset write Set_Preset;
    property LockPosition: WordBool read Get_LockPosition write Set_LockPosition;
  end;

// *********************************************************************//
// DispIntf:  IAcadAttributeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {090C78C3-33E1-451B-B00F-A58F7B62DA00}
// *********************************************************************//
  IAcadAttributeDisp = dispinterface
    ['{090C78C3-33E1-451B-B00F-A58F7B62DA00}']
    property FieldLength: Integer dispid 1;
    property TagString: WideString dispid 2;
    property PromptString: WideString dispid 3;
    property TextString: WideString dispid 4;
    property StyleName: WideString dispid 5;
    property Alignment: AcAlignment dispid 6;
    property HorizontalAlignment: AcHorizontalAlignment dispid 7;
    property VerticalAlignment: AcVerticalAlignment dispid 8;
    property Height: Double dispid 9;
    property Rotation: ACAD_ANGLE dispid 10;
    property ScaleFactor: ACAD_NOUNITS dispid 11;
    property ObliqueAngle: ACAD_ANGLE dispid 12;
    property TextAlignmentPoint: OleVariant dispid 13;
    property InsertionPoint: OleVariant dispid 14;
    property Normal: OleVariant dispid 15;
    property TextGenerationFlag: Integer dispid 16;
    property Thickness: Double dispid 17;
    property Mode: Integer dispid 18;
    property UpsideDown: WordBool dispid 19;
    property Backward: WordBool dispid 20;
    property Invisible: WordBool dispid 21;
    property Constant: WordBool dispid 22;
    property Verify: WordBool dispid 23;
    property Preset: WordBool dispid 24;
    property LockPosition: WordBool dispid 25;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcad3DSolid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DF94C736-F717-4469-A886-B9902747352D}
// *********************************************************************//
  IAcad3DSolid = interface(IAcadEntity)
    ['{DF94C736-F717-4469-A886-B9902747352D}']
    function Get_Centroid: OleVariant; safecall;
    function Get_MomentOfInertia: OleVariant; safecall;
    function Get_PrincipalDirections: OleVariant; safecall;
    function Get_PrincipalMoments: OleVariant; safecall;
    function Get_ProductOfInertia: OleVariant; safecall;
    function Get_RadiiOfGyration: OleVariant; safecall;
    function Get_Volume: Double; safecall;
    procedure Boolean(Operation: AcBooleanType; const SolidObject: IAcad3DSolid); safecall;
    function CheckInterference(const Object_: IAcad3DSolid; CreateInterferenceSolid: WordBool): IAcad3DSolid; safecall;
    function SectionSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IAcadRegion; safecall;
    function SliceSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                        Negative: WordBool): IAcad3DSolid; safecall;
    function Get_SolidType: WideString; safecall;
    function Get_Position: OleVariant; safecall;
    procedure Set_Position(Position: OleVariant); safecall;
    function Get_History: WordBool; safecall;
    procedure Set_History(bHistory: WordBool); safecall;
    function Get_ShowHistory: WordBool; safecall;
    procedure Set_ShowHistory(Position: WordBool); safecall;
    property Centroid: OleVariant read Get_Centroid;
    property MomentOfInertia: OleVariant read Get_MomentOfInertia;
    property PrincipalDirections: OleVariant read Get_PrincipalDirections;
    property PrincipalMoments: OleVariant read Get_PrincipalMoments;
    property ProductOfInertia: OleVariant read Get_ProductOfInertia;
    property RadiiOfGyration: OleVariant read Get_RadiiOfGyration;
    property Volume: Double read Get_Volume;
    property SolidType: WideString read Get_SolidType;
    property Position: OleVariant read Get_Position write Set_Position;
    property History: WordBool read Get_History write Set_History;
    property ShowHistory: WordBool read Get_ShowHistory write Set_ShowHistory;
  end;

// *********************************************************************//
// DispIntf:  IAcad3DSolidDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DF94C736-F717-4469-A886-B9902747352D}
// *********************************************************************//
  IAcad3DSolidDisp = dispinterface
    ['{DF94C736-F717-4469-A886-B9902747352D}']
    property Centroid: OleVariant readonly dispid 1;
    property MomentOfInertia: OleVariant readonly dispid 2;
    property PrincipalDirections: OleVariant readonly dispid 3;
    property PrincipalMoments: OleVariant readonly dispid 4;
    property ProductOfInertia: OleVariant readonly dispid 5;
    property RadiiOfGyration: OleVariant readonly dispid 6;
    property Volume: Double readonly dispid 7;
    procedure Boolean(Operation: AcBooleanType; const SolidObject: IAcad3DSolid); dispid 8;
    function CheckInterference(const Object_: IAcad3DSolid; CreateInterferenceSolid: WordBool): IAcad3DSolid; dispid 9;
    function SectionSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IAcadRegion; dispid 10;
    function SliceSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                        Negative: WordBool): IAcad3DSolid; dispid 11;
    property SolidType: WideString readonly dispid 12;
    property Position: OleVariant dispid 13;
    property History: WordBool dispid 14;
    property ShowHistory: WordBool dispid 15;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRegion
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9A07525-8E2B-4CEA-AE14-058FC16DB0E8}
// *********************************************************************//
  IAcadRegion = interface(IAcadEntity)
    ['{C9A07525-8E2B-4CEA-AE14-058FC16DB0E8}']
    function Get_Area: Double; safecall;
    function Get_Centroid: OleVariant; safecall;
    function Get_MomentOfInertia: OleVariant; safecall;
    function Get_Normal: OleVariant; safecall;
    function Get_Perimeter: Double; safecall;
    function Get_PrincipalDirections: OleVariant; safecall;
    function Get_PrincipalMoments: OleVariant; safecall;
    function Get_ProductOfInertia: Double; safecall;
    function Get_RadiiOfGyration: OleVariant; safecall;
    procedure Boolean(Operation: AcBooleanType; const Object_: IAcadRegion); safecall;
    function Explode: OleVariant; safecall;
    property Area: Double read Get_Area;
    property Centroid: OleVariant read Get_Centroid;
    property MomentOfInertia: OleVariant read Get_MomentOfInertia;
    property Normal: OleVariant read Get_Normal;
    property Perimeter: Double read Get_Perimeter;
    property PrincipalDirections: OleVariant read Get_PrincipalDirections;
    property PrincipalMoments: OleVariant read Get_PrincipalMoments;
    property ProductOfInertia: Double read Get_ProductOfInertia;
    property RadiiOfGyration: OleVariant read Get_RadiiOfGyration;
  end;

// *********************************************************************//
// DispIntf:  IAcadRegionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9A07525-8E2B-4CEA-AE14-058FC16DB0E8}
// *********************************************************************//
  IAcadRegionDisp = dispinterface
    ['{C9A07525-8E2B-4CEA-AE14-058FC16DB0E8}']
    property Area: Double readonly dispid 1;
    property Centroid: OleVariant readonly dispid 2;
    property MomentOfInertia: OleVariant readonly dispid 3;
    property Normal: OleVariant readonly dispid 4;
    property Perimeter: Double readonly dispid 5;
    property PrincipalDirections: OleVariant readonly dispid 6;
    property PrincipalMoments: OleVariant readonly dispid 7;
    property ProductOfInertia: Double readonly dispid 8;
    property RadiiOfGyration: OleVariant readonly dispid 9;
    procedure Boolean(Operation: AcBooleanType; const Object_: IAcadRegion); dispid 10;
    function Explode: OleVariant; dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadCircle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A7F2D00-0E8E-4228-8CB5-2E07B54ED2C4}
// *********************************************************************//
  IAcadCircle = interface(IAcadEntity)
    ['{8A7F2D00-0E8E-4228-8CB5-2E07B54ED2C4}']
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(CenterPoint: OleVariant); safecall;
    function Get_Radius: Double; safecall;
    procedure Set_Radius(Radius: Double); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_Circumference: Double; safecall;
    procedure Set_Circumference(Circumference: Double); safecall;
    function Get_Area: Double; safecall;
    procedure Set_Area(Area: Double); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    property Center: OleVariant read Get_Center write Set_Center;
    property Radius: Double read Get_Radius write Set_Radius;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property Circumference: Double read Get_Circumference write Set_Circumference;
    property Area: Double read Get_Area write Set_Area;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
  end;

// *********************************************************************//
// DispIntf:  IAcadCircleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A7F2D00-0E8E-4228-8CB5-2E07B54ED2C4}
// *********************************************************************//
  IAcadCircleDisp = dispinterface
    ['{8A7F2D00-0E8E-4228-8CB5-2E07B54ED2C4}']
    property Center: OleVariant dispid 1;
    property Radius: Double dispid 2;
    property Diameter: Double dispid 3;
    property Circumference: Double dispid 4;
    property Area: Double dispid 5;
    property Normal: OleVariant dispid 6;
    property Thickness: Double dispid 7;
    function Offset(Distance: Double): OleVariant; dispid 8;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimension
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06B71947-9E46-4B8F-B277-812B172E02EA}
// *********************************************************************//
  IAcadDimension = interface(IAcadEntity)
    ['{06B71947-9E46-4B8F-B277-812B172E02EA}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_TextPosition: OleVariant; safecall;
    procedure Set_TextPosition(textPos: OleVariant); safecall;
    function Get_TextRotation: ACAD_ANGLE; safecall;
    procedure Set_TextRotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_TextOverride: WideString; safecall;
    procedure Set_TextOverride(const bstrText: WideString); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_TextColor: ACAD_COLOR; safecall;
    procedure Set_TextColor(color: ACAD_COLOR); safecall;
    function Get_DecimalSeparator: WideString; safecall;
    procedure Set_DecimalSeparator(const character: WideString); safecall;
    function Get_TextGap: Double; safecall;
    procedure Set_TextGap(Offset: Double); safecall;
    function Get_TextPrefix: WideString; safecall;
    procedure Set_TextPrefix(const prefix: WideString); safecall;
    function Get_TextSuffix: WideString; safecall;
    procedure Set_TextSuffix(const suffix: WideString); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(factor: ACAD_NOUNITS); safecall;
    function Get_VerticalTextPosition: AcDimVerticalJustification; safecall;
    procedure Set_VerticalTextPosition(Type_: AcDimVerticalJustification); safecall;
    function Get_TolerancePrecision: AcDimPrecision; safecall;
    procedure Set_TolerancePrecision(precision: AcDimPrecision); safecall;
    function Get_ToleranceHeightScale: ACAD_NOUNITS; safecall;
    procedure Set_ToleranceHeightScale(scale: ACAD_NOUNITS); safecall;
    function Get_ToleranceLowerLimit: Double; safecall;
    procedure Set_ToleranceLowerLimit(lower: Double); safecall;
    function Get_TextMovement: AcDimTextMovement; safecall;
    procedure Set_TextMovement(Move: AcDimTextMovement); safecall;
    function Get_ToleranceDisplay: AcDimToleranceMethod; safecall;
    procedure Set_ToleranceDisplay(method: AcDimToleranceMethod); safecall;
    function Get_ToleranceJustification: AcDimToleranceJustify; safecall;
    procedure Set_ToleranceJustification(method: AcDimToleranceJustify); safecall;
    function Get_ToleranceUpperLimit: Double; safecall;
    procedure Set_ToleranceUpperLimit(upper: Double); safecall;
    function Get_TextStyle: WideString; safecall;
    procedure Set_TextStyle(const style: WideString); safecall;
    function Get_TextHeight: Double; safecall;
    procedure Set_TextHeight(Height: Double); safecall;
    function Get_SuppressLeadingZeros: WordBool; safecall;
    procedure Set_SuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_SuppressTrailingZeros: WordBool; safecall;
    procedure Set_SuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_ToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_ToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_ToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_ToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_TextFill: WordBool; safecall;
    procedure Set_TextFill(bVal: WordBool); safecall;
    function Get_TextFillColor: ACAD_COLOR; safecall;
    procedure Set_TextFillColor(color: ACAD_COLOR); safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property TextPosition: OleVariant read Get_TextPosition write Set_TextPosition;
    property TextRotation: ACAD_ANGLE read Get_TextRotation write Set_TextRotation;
    property TextOverride: WideString read Get_TextOverride write Set_TextOverride;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property TextColor: ACAD_COLOR read Get_TextColor write Set_TextColor;
    property DecimalSeparator: WideString read Get_DecimalSeparator write Set_DecimalSeparator;
    property TextGap: Double read Get_TextGap write Set_TextGap;
    property TextPrefix: WideString read Get_TextPrefix write Set_TextPrefix;
    property TextSuffix: WideString read Get_TextSuffix write Set_TextSuffix;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property VerticalTextPosition: AcDimVerticalJustification read Get_VerticalTextPosition write Set_VerticalTextPosition;
    property TolerancePrecision: AcDimPrecision read Get_TolerancePrecision write Set_TolerancePrecision;
    property ToleranceHeightScale: ACAD_NOUNITS read Get_ToleranceHeightScale write Set_ToleranceHeightScale;
    property ToleranceLowerLimit: Double read Get_ToleranceLowerLimit write Set_ToleranceLowerLimit;
    property TextMovement: AcDimTextMovement read Get_TextMovement write Set_TextMovement;
    property ToleranceDisplay: AcDimToleranceMethod read Get_ToleranceDisplay write Set_ToleranceDisplay;
    property ToleranceJustification: AcDimToleranceJustify read Get_ToleranceJustification write Set_ToleranceJustification;
    property ToleranceUpperLimit: Double read Get_ToleranceUpperLimit write Set_ToleranceUpperLimit;
    property TextStyle: WideString read Get_TextStyle write Set_TextStyle;
    property TextHeight: Double read Get_TextHeight write Set_TextHeight;
    property SuppressLeadingZeros: WordBool read Get_SuppressLeadingZeros write Set_SuppressLeadingZeros;
    property SuppressTrailingZeros: WordBool read Get_SuppressTrailingZeros write Set_SuppressTrailingZeros;
    property ToleranceSuppressLeadingZeros: WordBool read Get_ToleranceSuppressLeadingZeros write Set_ToleranceSuppressLeadingZeros;
    property ToleranceSuppressTrailingZeros: WordBool read Get_ToleranceSuppressTrailingZeros write Set_ToleranceSuppressTrailingZeros;
    property TextFill: WordBool read Get_TextFill write Set_TextFill;
    property TextFillColor: ACAD_COLOR read Get_TextFillColor write Set_TextFillColor;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimensionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06B71947-9E46-4B8F-B277-812B172E02EA}
// *********************************************************************//
  IAcadDimensionDisp = dispinterface
    ['{06B71947-9E46-4B8F-B277-812B172E02EA}']
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimAligned
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB6BA922-5284-4D66-8D31-6E732B1645CC}
// *********************************************************************//
  IAcadDimAligned = interface(IAcadDimension)
    ['{AB6BA922-5284-4D66-8D31-6E732B1645CC}']
    procedure GhostMethod_IAcadDimAligned_0_1; safecall;
    procedure GhostMethod_IAcadDimAligned_4_2; safecall;
    procedure GhostMethod_IAcadDimAligned_8_3; safecall;
    procedure GhostMethod_IAcadDimAligned_12_4; safecall;
    procedure GhostMethod_IAcadDimAligned_16_5; safecall;
    procedure GhostMethod_IAcadDimAligned_20_6; safecall;
    procedure GhostMethod_IAcadDimAligned_24_7; safecall;
    procedure GhostMethod_IAcadDimAligned_28_8; safecall;
    procedure GhostMethod_IAcadDimAligned_32_9; safecall;
    procedure GhostMethod_IAcadDimAligned_36_10; safecall;
    procedure GhostMethod_IAcadDimAligned_40_11; safecall;
    procedure GhostMethod_IAcadDimAligned_44_12; safecall;
    procedure GhostMethod_IAcadDimAligned_48_13; safecall;
    procedure GhostMethod_IAcadDimAligned_52_14; safecall;
    procedure GhostMethod_IAcadDimAligned_56_15; safecall;
    procedure GhostMethod_IAcadDimAligned_60_16; safecall;
    procedure GhostMethod_IAcadDimAligned_64_17; safecall;
    procedure GhostMethod_IAcadDimAligned_68_18; safecall;
    procedure GhostMethod_IAcadDimAligned_72_19; safecall;
    procedure GhostMethod_IAcadDimAligned_76_20; safecall;
    procedure GhostMethod_IAcadDimAligned_80_21; safecall;
    procedure GhostMethod_IAcadDimAligned_84_22; safecall;
    procedure GhostMethod_IAcadDimAligned_88_23; safecall;
    procedure GhostMethod_IAcadDimAligned_92_24; safecall;
    procedure GhostMethod_IAcadDimAligned_96_25; safecall;
    procedure GhostMethod_IAcadDimAligned_100_26; safecall;
    procedure GhostMethod_IAcadDimAligned_104_27; safecall;
    procedure GhostMethod_IAcadDimAligned_108_28; safecall;
    procedure GhostMethod_IAcadDimAligned_112_29; safecall;
    procedure GhostMethod_IAcadDimAligned_116_30; safecall;
    procedure GhostMethod_IAcadDimAligned_120_31; safecall;
    procedure GhostMethod_IAcadDimAligned_124_32; safecall;
    procedure GhostMethod_IAcadDimAligned_128_33; safecall;
    procedure GhostMethod_IAcadDimAligned_132_34; safecall;
    procedure GhostMethod_IAcadDimAligned_136_35; safecall;
    procedure GhostMethod_IAcadDimAligned_140_36; safecall;
    procedure GhostMethod_IAcadDimAligned_144_37; safecall;
    procedure GhostMethod_IAcadDimAligned_148_38; safecall;
    procedure GhostMethod_IAcadDimAligned_152_39; safecall;
    procedure GhostMethod_IAcadDimAligned_156_40; safecall;
    procedure GhostMethod_IAcadDimAligned_160_41; safecall;
    procedure GhostMethod_IAcadDimAligned_164_42; safecall;
    procedure GhostMethod_IAcadDimAligned_168_43; safecall;
    procedure GhostMethod_IAcadDimAligned_172_44; safecall;
    procedure GhostMethod_IAcadDimAligned_176_45; safecall;
    procedure GhostMethod_IAcadDimAligned_180_46; safecall;
    procedure GhostMethod_IAcadDimAligned_184_47; safecall;
    procedure GhostMethod_IAcadDimAligned_188_48; safecall;
    procedure GhostMethod_IAcadDimAligned_192_49; safecall;
    procedure GhostMethod_IAcadDimAligned_196_50; safecall;
    procedure GhostMethod_IAcadDimAligned_200_51; safecall;
    procedure GhostMethod_IAcadDimAligned_204_52; safecall;
    procedure GhostMethod_IAcadDimAligned_208_53; safecall;
    procedure GhostMethod_IAcadDimAligned_212_54; safecall;
    procedure GhostMethod_IAcadDimAligned_216_55; safecall;
    procedure GhostMethod_IAcadDimAligned_220_56; safecall;
    procedure GhostMethod_IAcadDimAligned_224_57; safecall;
    procedure GhostMethod_IAcadDimAligned_228_58; safecall;
    procedure GhostMethod_IAcadDimAligned_232_59; safecall;
    procedure GhostMethod_IAcadDimAligned_236_60; safecall;
    procedure GhostMethod_IAcadDimAligned_240_61; safecall;
    procedure GhostMethod_IAcadDimAligned_244_62; safecall;
    procedure GhostMethod_IAcadDimAligned_248_63; safecall;
    procedure GhostMethod_IAcadDimAligned_252_64; safecall;
    procedure GhostMethod_IAcadDimAligned_256_65; safecall;
    procedure GhostMethod_IAcadDimAligned_260_66; safecall;
    procedure GhostMethod_IAcadDimAligned_264_67; safecall;
    procedure GhostMethod_IAcadDimAligned_268_68; safecall;
    procedure GhostMethod_IAcadDimAligned_272_69; safecall;
    procedure GhostMethod_IAcadDimAligned_276_70; safecall;
    procedure GhostMethod_IAcadDimAligned_280_71; safecall;
    procedure GhostMethod_IAcadDimAligned_284_72; safecall;
    procedure GhostMethod_IAcadDimAligned_288_73; safecall;
    procedure GhostMethod_IAcadDimAligned_292_74; safecall;
    procedure GhostMethod_IAcadDimAligned_296_75; safecall;
    procedure GhostMethod_IAcadDimAligned_300_76; safecall;
    procedure GhostMethod_IAcadDimAligned_304_77; safecall;
    procedure GhostMethod_IAcadDimAligned_308_78; safecall;
    procedure GhostMethod_IAcadDimAligned_312_79; safecall;
    procedure GhostMethod_IAcadDimAligned_316_80; safecall;
    procedure GhostMethod_IAcadDimAligned_320_81; safecall;
    procedure GhostMethod_IAcadDimAligned_324_82; safecall;
    procedure GhostMethod_IAcadDimAligned_328_83; safecall;
    procedure GhostMethod_IAcadDimAligned_332_84; safecall;
    procedure GhostMethod_IAcadDimAligned_336_85; safecall;
    procedure GhostMethod_IAcadDimAligned_340_86; safecall;
    procedure GhostMethod_IAcadDimAligned_344_87; safecall;
    procedure GhostMethod_IAcadDimAligned_348_88; safecall;
    procedure GhostMethod_IAcadDimAligned_352_89; safecall;
    procedure GhostMethod_IAcadDimAligned_356_90; safecall;
    procedure GhostMethod_IAcadDimAligned_360_91; safecall;
    procedure GhostMethod_IAcadDimAligned_364_92; safecall;
    procedure GhostMethod_IAcadDimAligned_368_93; safecall;
    procedure GhostMethod_IAcadDimAligned_372_94; safecall;
    procedure GhostMethod_IAcadDimAligned_376_95; safecall;
    procedure GhostMethod_IAcadDimAligned_380_96; safecall;
    procedure GhostMethod_IAcadDimAligned_384_97; safecall;
    procedure GhostMethod_IAcadDimAligned_388_98; safecall;
    procedure GhostMethod_IAcadDimAligned_392_99; safecall;
    procedure GhostMethod_IAcadDimAligned_396_100; safecall;
    procedure GhostMethod_IAcadDimAligned_400_101; safecall;
    procedure GhostMethod_IAcadDimAligned_404_102; safecall;
    procedure GhostMethod_IAcadDimAligned_408_103; safecall;
    procedure GhostMethod_IAcadDimAligned_412_104; safecall;
    procedure GhostMethod_IAcadDimAligned_416_105; safecall;
    procedure GhostMethod_IAcadDimAligned_420_106; safecall;
    procedure GhostMethod_IAcadDimAligned_424_107; safecall;
    procedure GhostMethod_IAcadDimAligned_428_108; safecall;
    procedure GhostMethod_IAcadDimAligned_432_109; safecall;
    procedure GhostMethod_IAcadDimAligned_436_110; safecall;
    procedure GhostMethod_IAcadDimAligned_440_111; safecall;
    function Get_ExtLine1Point: OleVariant; safecall;
    procedure Set_ExtLine1Point(xLine1Point: OleVariant); safecall;
    function Get_ExtLine2Point: OleVariant; safecall;
    procedure Set_ExtLine2Point(xLine2Point: OleVariant); safecall;
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const suffix: WideString); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(color: ACAD_COLOR); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(color: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_DimensionLineExtend: Double; safecall;
    procedure Set_DimensionLineExtend(extend: Double); safecall;
    function Get_ExtensionLineExtend: Double; safecall;
    procedure Set_ExtensionLineExtend(extend: Double); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_HorizontalTextPosition: AcDimHorizontalJustification; safecall;
    procedure Set_HorizontalTextPosition(Type_: AcDimHorizontalJustification); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine1Suppress: WordBool; safecall;
    procedure Set_ExtLine1Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine2Suppress: WordBool; safecall;
    procedure Set_ExtLine2Suppress(bSuppress: WordBool); safecall;
    function Get_DimLineInside: WordBool; safecall;
    procedure Set_DimLineInside(bInside: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    function Get_ExtLine1Linetype: WideString; safecall;
    procedure Set_ExtLine1Linetype(const Linetype: WideString); safecall;
    function Get_ExtLine2Linetype: WideString; safecall;
    procedure Set_ExtLine2Linetype(const Linetype: WideString); safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property ExtLine1Point: OleVariant read Get_ExtLine1Point write Set_ExtLine1Point;
    property ExtLine2Point: OleVariant read Get_ExtLine2Point write Set_ExtLine2Point;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property DimensionLineExtend: Double read Get_DimensionLineExtend write Set_DimensionLineExtend;
    property ExtensionLineExtend: Double read Get_ExtensionLineExtend write Set_ExtensionLineExtend;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property HorizontalTextPosition: AcDimHorizontalJustification read Get_HorizontalTextPosition write Set_HorizontalTextPosition;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property ExtLine1Suppress: WordBool read Get_ExtLine1Suppress write Set_ExtLine1Suppress;
    property ExtLine2Suppress: WordBool read Get_ExtLine2Suppress write Set_ExtLine2Suppress;
    property DimLineInside: WordBool read Get_DimLineInside write Set_DimLineInside;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: Double read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
    property ExtLine1Linetype: WideString read Get_ExtLine1Linetype write Set_ExtLine1Linetype;
    property ExtLine2Linetype: WideString read Get_ExtLine2Linetype write Set_ExtLine2Linetype;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimAlignedDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB6BA922-5284-4D66-8D31-6E732B1645CC}
// *********************************************************************//
  IAcadDimAlignedDisp = dispinterface
    ['{AB6BA922-5284-4D66-8D31-6E732B1645CC}']
    procedure GhostMethod_IAcadDimAligned_0_1; dispid 1610678272;
    procedure GhostMethod_IAcadDimAligned_4_2; dispid 1610678273;
    procedure GhostMethod_IAcadDimAligned_8_3; dispid 1610678274;
    procedure GhostMethod_IAcadDimAligned_12_4; dispid 1610678275;
    procedure GhostMethod_IAcadDimAligned_16_5; dispid 1610678276;
    procedure GhostMethod_IAcadDimAligned_20_6; dispid 1610678277;
    procedure GhostMethod_IAcadDimAligned_24_7; dispid 1610678278;
    procedure GhostMethod_IAcadDimAligned_28_8; dispid 1610678279;
    procedure GhostMethod_IAcadDimAligned_32_9; dispid 1610678280;
    procedure GhostMethod_IAcadDimAligned_36_10; dispid 1610678281;
    procedure GhostMethod_IAcadDimAligned_40_11; dispid 1610678282;
    procedure GhostMethod_IAcadDimAligned_44_12; dispid 1610678283;
    procedure GhostMethod_IAcadDimAligned_48_13; dispid 1610678284;
    procedure GhostMethod_IAcadDimAligned_52_14; dispid 1610678285;
    procedure GhostMethod_IAcadDimAligned_56_15; dispid 1610678286;
    procedure GhostMethod_IAcadDimAligned_60_16; dispid 1610678287;
    procedure GhostMethod_IAcadDimAligned_64_17; dispid 1610678288;
    procedure GhostMethod_IAcadDimAligned_68_18; dispid 1610678289;
    procedure GhostMethod_IAcadDimAligned_72_19; dispid 1610678290;
    procedure GhostMethod_IAcadDimAligned_76_20; dispid 1610678291;
    procedure GhostMethod_IAcadDimAligned_80_21; dispid 1610678292;
    procedure GhostMethod_IAcadDimAligned_84_22; dispid 1610678293;
    procedure GhostMethod_IAcadDimAligned_88_23; dispid 1610678294;
    procedure GhostMethod_IAcadDimAligned_92_24; dispid 1610678295;
    procedure GhostMethod_IAcadDimAligned_96_25; dispid 1610678296;
    procedure GhostMethod_IAcadDimAligned_100_26; dispid 1610678297;
    procedure GhostMethod_IAcadDimAligned_104_27; dispid 1610678298;
    procedure GhostMethod_IAcadDimAligned_108_28; dispid 1610678299;
    procedure GhostMethod_IAcadDimAligned_112_29; dispid 1610678300;
    procedure GhostMethod_IAcadDimAligned_116_30; dispid 1610678301;
    procedure GhostMethod_IAcadDimAligned_120_31; dispid 1610678302;
    procedure GhostMethod_IAcadDimAligned_124_32; dispid 1610678303;
    procedure GhostMethod_IAcadDimAligned_128_33; dispid 1610678304;
    procedure GhostMethod_IAcadDimAligned_132_34; dispid 1610678305;
    procedure GhostMethod_IAcadDimAligned_136_35; dispid 1610678306;
    procedure GhostMethod_IAcadDimAligned_140_36; dispid 1610678307;
    procedure GhostMethod_IAcadDimAligned_144_37; dispid 1610678308;
    procedure GhostMethod_IAcadDimAligned_148_38; dispid 1610678309;
    procedure GhostMethod_IAcadDimAligned_152_39; dispid 1610678310;
    procedure GhostMethod_IAcadDimAligned_156_40; dispid 1610678311;
    procedure GhostMethod_IAcadDimAligned_160_41; dispid 1610678312;
    procedure GhostMethod_IAcadDimAligned_164_42; dispid 1610678313;
    procedure GhostMethod_IAcadDimAligned_168_43; dispid 1610678314;
    procedure GhostMethod_IAcadDimAligned_172_44; dispid 1610678315;
    procedure GhostMethod_IAcadDimAligned_176_45; dispid 1610678316;
    procedure GhostMethod_IAcadDimAligned_180_46; dispid 1610678317;
    procedure GhostMethod_IAcadDimAligned_184_47; dispid 1610678318;
    procedure GhostMethod_IAcadDimAligned_188_48; dispid 1610678319;
    procedure GhostMethod_IAcadDimAligned_192_49; dispid 1610678320;
    procedure GhostMethod_IAcadDimAligned_196_50; dispid 1610678321;
    procedure GhostMethod_IAcadDimAligned_200_51; dispid 1610678322;
    procedure GhostMethod_IAcadDimAligned_204_52; dispid 1610678323;
    procedure GhostMethod_IAcadDimAligned_208_53; dispid 1610678324;
    procedure GhostMethod_IAcadDimAligned_212_54; dispid 1610678325;
    procedure GhostMethod_IAcadDimAligned_216_55; dispid 1610678326;
    procedure GhostMethod_IAcadDimAligned_220_56; dispid 1610678327;
    procedure GhostMethod_IAcadDimAligned_224_57; dispid 1610678328;
    procedure GhostMethod_IAcadDimAligned_228_58; dispid 1610678329;
    procedure GhostMethod_IAcadDimAligned_232_59; dispid 1610678330;
    procedure GhostMethod_IAcadDimAligned_236_60; dispid 1610678331;
    procedure GhostMethod_IAcadDimAligned_240_61; dispid 1610678332;
    procedure GhostMethod_IAcadDimAligned_244_62; dispid 1610678333;
    procedure GhostMethod_IAcadDimAligned_248_63; dispid 1610678334;
    procedure GhostMethod_IAcadDimAligned_252_64; dispid 1610678335;
    procedure GhostMethod_IAcadDimAligned_256_65; dispid 1610678336;
    procedure GhostMethod_IAcadDimAligned_260_66; dispid 1610678337;
    procedure GhostMethod_IAcadDimAligned_264_67; dispid 1610678338;
    procedure GhostMethod_IAcadDimAligned_268_68; dispid 1610678339;
    procedure GhostMethod_IAcadDimAligned_272_69; dispid 1610678340;
    procedure GhostMethod_IAcadDimAligned_276_70; dispid 1610678341;
    procedure GhostMethod_IAcadDimAligned_280_71; dispid 1610678342;
    procedure GhostMethod_IAcadDimAligned_284_72; dispid 1610678343;
    procedure GhostMethod_IAcadDimAligned_288_73; dispid 1610678344;
    procedure GhostMethod_IAcadDimAligned_292_74; dispid 1610678345;
    procedure GhostMethod_IAcadDimAligned_296_75; dispid 1610678346;
    procedure GhostMethod_IAcadDimAligned_300_76; dispid 1610678347;
    procedure GhostMethod_IAcadDimAligned_304_77; dispid 1610678348;
    procedure GhostMethod_IAcadDimAligned_308_78; dispid 1610678349;
    procedure GhostMethod_IAcadDimAligned_312_79; dispid 1610678350;
    procedure GhostMethod_IAcadDimAligned_316_80; dispid 1610678351;
    procedure GhostMethod_IAcadDimAligned_320_81; dispid 1610678352;
    procedure GhostMethod_IAcadDimAligned_324_82; dispid 1610678353;
    procedure GhostMethod_IAcadDimAligned_328_83; dispid 1610678354;
    procedure GhostMethod_IAcadDimAligned_332_84; dispid 1610678355;
    procedure GhostMethod_IAcadDimAligned_336_85; dispid 1610678356;
    procedure GhostMethod_IAcadDimAligned_340_86; dispid 1610678357;
    procedure GhostMethod_IAcadDimAligned_344_87; dispid 1610678358;
    procedure GhostMethod_IAcadDimAligned_348_88; dispid 1610678359;
    procedure GhostMethod_IAcadDimAligned_352_89; dispid 1610678360;
    procedure GhostMethod_IAcadDimAligned_356_90; dispid 1610678361;
    procedure GhostMethod_IAcadDimAligned_360_91; dispid 1610678362;
    procedure GhostMethod_IAcadDimAligned_364_92; dispid 1610678363;
    procedure GhostMethod_IAcadDimAligned_368_93; dispid 1610678364;
    procedure GhostMethod_IAcadDimAligned_372_94; dispid 1610678365;
    procedure GhostMethod_IAcadDimAligned_376_95; dispid 1610678366;
    procedure GhostMethod_IAcadDimAligned_380_96; dispid 1610678367;
    procedure GhostMethod_IAcadDimAligned_384_97; dispid 1610678368;
    procedure GhostMethod_IAcadDimAligned_388_98; dispid 1610678369;
    procedure GhostMethod_IAcadDimAligned_392_99; dispid 1610678370;
    procedure GhostMethod_IAcadDimAligned_396_100; dispid 1610678371;
    procedure GhostMethod_IAcadDimAligned_400_101; dispid 1610678372;
    procedure GhostMethod_IAcadDimAligned_404_102; dispid 1610678373;
    procedure GhostMethod_IAcadDimAligned_408_103; dispid 1610678374;
    procedure GhostMethod_IAcadDimAligned_412_104; dispid 1610678375;
    procedure GhostMethod_IAcadDimAligned_416_105; dispid 1610678376;
    procedure GhostMethod_IAcadDimAligned_420_106; dispid 1610678377;
    procedure GhostMethod_IAcadDimAligned_424_107; dispid 1610678378;
    procedure GhostMethod_IAcadDimAligned_428_108; dispid 1610678379;
    procedure GhostMethod_IAcadDimAligned_432_109; dispid 1610678380;
    procedure GhostMethod_IAcadDimAligned_436_110; dispid 1610678381;
    procedure GhostMethod_IAcadDimAligned_440_111; dispid 1610678382;
    property ExtLine1Point: OleVariant dispid 1;
    property ExtLine2Point: OleVariant dispid 2;
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property DimensionLineExtend: Double dispid 16;
    property ExtensionLineExtend: Double dispid 17;
    property Fit: AcDimFit dispid 18;
    property FractionFormat: AcDimFractionType dispid 19;
    property HorizontalTextPosition: AcDimHorizontalJustification dispid 20;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property RoundDistance: Double dispid 24;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property ExtLine1Suppress: WordBool dispid 27;
    property ExtLine2Suppress: WordBool dispid 28;
    property DimLineInside: WordBool dispid 29;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property ExtensionLineOffset: Double dispid 35;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property ExtLine1Linetype: WideString dispid 81;
    property ExtLine2Linetype: WideString dispid 82;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimAngular
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0DA98A7-8B08-46A2-8B45-4BF873CB6CEF}
// *********************************************************************//
  IAcadDimAngular = interface(IAcadDimension)
    ['{E0DA98A7-8B08-46A2-8B45-4BF873CB6CEF}']
    function Get_ExtLine1StartPoint: OleVariant; safecall;
    procedure Set_ExtLine1StartPoint(xLine1Point: OleVariant); safecall;
    function Get_ExtLine1EndPoint: OleVariant; safecall;
    procedure Set_ExtLine1EndPoint(xLine1Point: OleVariant); safecall;
    function Get_ExtLine2StartPoint: OleVariant; safecall;
    procedure Set_ExtLine2StartPoint(xLine2Point: OleVariant); safecall;
    function Get_ExtLine2EndPoint: OleVariant; safecall;
    procedure Set_ExtLine2EndPoint(xLine2Point: OleVariant); safecall;
    function Get_AngleFormat: AcAngleUnits; safecall;
    procedure Set_AngleFormat(format: AcAngleUnits); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineExtend: Double; safecall;
    procedure Set_ExtensionLineExtend(extend: Double); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_HorizontalTextPosition: AcDimHorizontalJustification; safecall;
    procedure Set_HorizontalTextPosition(Type_: AcDimHorizontalJustification); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine1Suppress: WordBool; safecall;
    procedure Set_ExtLine1Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine2Suppress: WordBool; safecall;
    procedure Set_ExtLine2Suppress(bSuppress: WordBool); safecall;
    function Get_DimLineInside: WordBool; safecall;
    procedure Set_DimLineInside(bInside: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_TextPrecision: AcDimPrecision; safecall;
    procedure Set_TextPrecision(precision: AcDimPrecision); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: ACAD_ANGLE; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    function Get_ExtLine1Linetype: WideString; safecall;
    procedure Set_ExtLine1Linetype(const Linetype: WideString); safecall;
    function Get_ExtLine2Linetype: WideString; safecall;
    procedure Set_ExtLine2Linetype(const Linetype: WideString); safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property ExtLine1StartPoint: OleVariant read Get_ExtLine1StartPoint write Set_ExtLine1StartPoint;
    property ExtLine1EndPoint: OleVariant read Get_ExtLine1EndPoint write Set_ExtLine1EndPoint;
    property ExtLine2StartPoint: OleVariant read Get_ExtLine2StartPoint write Set_ExtLine2StartPoint;
    property ExtLine2EndPoint: OleVariant read Get_ExtLine2EndPoint write Set_ExtLine2EndPoint;
    property AngleFormat: AcAngleUnits read Get_AngleFormat write Set_AngleFormat;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property ExtensionLineExtend: Double read Get_ExtensionLineExtend write Set_ExtensionLineExtend;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property HorizontalTextPosition: AcDimHorizontalJustification read Get_HorizontalTextPosition write Set_HorizontalTextPosition;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property ExtLine1Suppress: WordBool read Get_ExtLine1Suppress write Set_ExtLine1Suppress;
    property ExtLine2Suppress: WordBool read Get_ExtLine2Suppress write Set_ExtLine2Suppress;
    property DimLineInside: WordBool read Get_DimLineInside write Set_DimLineInside;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property TextPrecision: AcDimPrecision read Get_TextPrecision write Set_TextPrecision;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: ACAD_ANGLE read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
    property ExtLine1Linetype: WideString read Get_ExtLine1Linetype write Set_ExtLine1Linetype;
    property ExtLine2Linetype: WideString read Get_ExtLine2Linetype write Set_ExtLine2Linetype;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimAngularDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0DA98A7-8B08-46A2-8B45-4BF873CB6CEF}
// *********************************************************************//
  IAcadDimAngularDisp = dispinterface
    ['{E0DA98A7-8B08-46A2-8B45-4BF873CB6CEF}']
    property ExtLine1StartPoint: OleVariant dispid 37;
    property ExtLine1EndPoint: OleVariant dispid 38;
    property ExtLine2StartPoint: OleVariant dispid 39;
    property ExtLine2EndPoint: OleVariant dispid 40;
    property AngleFormat: AcAngleUnits dispid 41;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property ExtensionLineExtend: Double dispid 17;
    property Fit: AcDimFit dispid 18;
    property HorizontalTextPosition: AcDimHorizontalJustification dispid 20;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property ExtLine1Suppress: WordBool dispid 27;
    property ExtLine2Suppress: WordBool dispid 28;
    property DimLineInside: WordBool dispid 29;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property TextPrecision: AcDimPrecision dispid 36;
    property ExtensionLineOffset: Double dispid 35;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: ACAD_ANGLE readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property ExtLine1Linetype: WideString dispid 81;
    property ExtLine2Linetype: WideString dispid 82;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimDiametric
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CE984151-66ED-4500-B99D-85ACCEC10820}
// *********************************************************************//
  IAcadDimDiametric = interface(IAcadDimension)
    ['{CE984151-66ED-4500-B99D-85ACCEC10820}']
    procedure Set_LeaderLength(Param1: Double); safecall;
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_CenterType: AcDimCenterType; safecall;
    procedure Set_CenterType(Type_: AcDimCenterType); safecall;
    function Get_CenterMarkSize: Double; safecall;
    procedure Set_CenterMarkSize(Type_: Double); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    property LeaderLength: Double write Set_LeaderLength;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property CenterType: AcDimCenterType read Get_CenterType write Set_CenterType;
    property CenterMarkSize: Double read Get_CenterMarkSize write Set_CenterMarkSize;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: Double read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimDiametricDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CE984151-66ED-4500-B99D-85ACCEC10820}
// *********************************************************************//
  IAcadDimDiametricDisp = dispinterface
    ['{CE984151-66ED-4500-B99D-85ACCEC10820}']
    property LeaderLength: Double writeonly dispid 42;
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property FractionFormat: AcDimFractionType dispid 19;
    property Fit: AcDimFit dispid 18;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property RoundDistance: Double dispid 24;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property CenterType: AcDimCenterType dispid 43;
    property CenterMarkSize: Double dispid 44;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimRotated
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D07DB6F3-DB36-4D70-BD1B-4B16CCD7B103}
// *********************************************************************//
  IAcadDimRotated = interface(IAcadDimension)
    ['{D07DB6F3-DB36-4D70-BD1B-4B16CCD7B103}']
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_DimensionLineExtend: Double; safecall;
    procedure Set_DimensionLineExtend(extend: Double); safecall;
    function Get_ExtensionLineExtend: Double; safecall;
    procedure Set_ExtensionLineExtend(extend: Double); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_HorizontalTextPosition: AcDimHorizontalJustification; safecall;
    procedure Set_HorizontalTextPosition(Type_: AcDimHorizontalJustification); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine1Suppress: WordBool; safecall;
    procedure Set_ExtLine1Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine2Suppress: WordBool; safecall;
    procedure Set_ExtLine2Suppress(bSuppress: WordBool); safecall;
    function Get_DimLineInside: WordBool; safecall;
    procedure Set_DimLineInside(bInside: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    function Get_ExtLine1Linetype: WideString; safecall;
    procedure Set_ExtLine1Linetype(const Linetype: WideString); safecall;
    function Get_ExtLine2Linetype: WideString; safecall;
    procedure Set_ExtLine2Linetype(const Linetype: WideString); safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property DimensionLineExtend: Double read Get_DimensionLineExtend write Set_DimensionLineExtend;
    property ExtensionLineExtend: Double read Get_ExtensionLineExtend write Set_ExtensionLineExtend;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property HorizontalTextPosition: AcDimHorizontalJustification read Get_HorizontalTextPosition write Set_HorizontalTextPosition;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property ExtLine1Suppress: WordBool read Get_ExtLine1Suppress write Set_ExtLine1Suppress;
    property ExtLine2Suppress: WordBool read Get_ExtLine2Suppress write Set_ExtLine2Suppress;
    property DimLineInside: WordBool read Get_DimLineInside write Set_DimLineInside;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: Double read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
    property ExtLine1Linetype: WideString read Get_ExtLine1Linetype write Set_ExtLine1Linetype;
    property ExtLine2Linetype: WideString read Get_ExtLine2Linetype write Set_ExtLine2Linetype;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimRotatedDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D07DB6F3-DB36-4D70-BD1B-4B16CCD7B103}
// *********************************************************************//
  IAcadDimRotatedDisp = dispinterface
    ['{D07DB6F3-DB36-4D70-BD1B-4B16CCD7B103}']
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property DimensionLineExtend: Double dispid 16;
    property ExtensionLineExtend: Double dispid 17;
    property Fit: AcDimFit dispid 18;
    property FractionFormat: AcDimFractionType dispid 19;
    property HorizontalTextPosition: AcDimHorizontalJustification dispid 20;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property RoundDistance: Double dispid 24;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property ExtLine1Suppress: WordBool dispid 27;
    property ExtLine2Suppress: WordBool dispid 28;
    property DimLineInside: WordBool dispid 29;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property ExtensionLineOffset: Double dispid 35;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property ExtLine1Linetype: WideString dispid 81;
    property ExtLine2Linetype: WideString dispid 82;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimOrdinate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BBE360E-DC9A-4640-8597-C54166887E54}
// *********************************************************************//
  IAcadDimOrdinate = interface(IAcadDimension)
    ['{8BBE360E-DC9A-4640-8597-C54166887E54}']
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Measurement: Double; safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Measurement: Double read Get_Measurement;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimOrdinateDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BBE360E-DC9A-4640-8597-C54166887E54}
// *********************************************************************//
  IAcadDimOrdinateDisp = dispinterface
    ['{8BBE360E-DC9A-4640-8597-C54166887E54}']
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property FractionFormat: AcDimFractionType dispid 19;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property RoundDistance: Double dispid 24;
    property ExtensionLineOffset: Double dispid 35;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property ArrowheadSize: Double dispid 61;
    property Measurement: Double readonly dispid 64;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimRadial
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC56A33B-1DC1-42FE-B848-D469E375FC44}
// *********************************************************************//
  IAcadDimRadial = interface(IAcadDimension)
    ['{FC56A33B-1DC1-42FE-B848-D469E375FC44}']
    procedure Set_LeaderLength(Param1: Double); safecall;
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_CenterType: AcDimCenterType; safecall;
    procedure Set_CenterType(Type_: AcDimCenterType); safecall;
    function Get_CenterMarkSize: Double; safecall;
    procedure Set_CenterMarkSize(Type_: Double); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLineSuppress: WordBool; safecall;
    procedure Set_DimLineSuppress(bSuppress: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_ArrowheadType: AcDimArrowheadType; safecall;
    procedure Set_ArrowheadType(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_ArrowheadBlock: WideString; safecall;
    procedure Set_ArrowheadBlock(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    property LeaderLength: Double write Set_LeaderLength;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property CenterType: AcDimCenterType read Get_CenterType write Set_CenterType;
    property CenterMarkSize: Double read Get_CenterMarkSize write Set_CenterMarkSize;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLineSuppress: WordBool read Get_DimLineSuppress write Set_DimLineSuppress;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property ArrowheadType: AcDimArrowheadType read Get_ArrowheadType write Set_ArrowheadType;
    property Measurement: Double read Get_Measurement;
    property ArrowheadBlock: WideString read Get_ArrowheadBlock write Set_ArrowheadBlock;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimRadialDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC56A33B-1DC1-42FE-B848-D469E375FC44}
// *********************************************************************//
  IAcadDimRadialDisp = dispinterface
    ['{FC56A33B-1DC1-42FE-B848-D469E375FC44}']
    property LeaderLength: Double writeonly dispid 42;
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property CenterType: AcDimCenterType dispid 43;
    property CenterMarkSize: Double dispid 44;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property FractionFormat: AcDimFractionType dispid 19;
    property Fit: AcDimFit dispid 18;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property RoundDistance: Double dispid 24;
    property DimLineSuppress: WordBool dispid 26;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property ArrowheadType: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property ArrowheadBlock: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadEllipse
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F64246E5-206A-42C2-B3E7-A725B2C07CFB}
// *********************************************************************//
  IAcadEllipse = interface(IAcadEntity)
    ['{F64246E5-206A-42C2-B3E7-A725B2C07CFB}']
    function Get_StartPoint: OleVariant; safecall;
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(Center: OleVariant); safecall;
    function Get_EndPoint: OleVariant; safecall;
    function Get_MajorRadius: Double; safecall;
    procedure Set_MajorRadius(MajorRadius: Double); safecall;
    function Get_MinorRadius: Double; safecall;
    procedure Set_MinorRadius(MinorRadius: Double); safecall;
    function Get_RadiusRatio: Double; safecall;
    procedure Set_RadiusRatio(RadiusRatio: Double); safecall;
    function Get_StartAngle: ACAD_ANGLE; safecall;
    procedure Set_StartAngle(StartAngle: ACAD_ANGLE); safecall;
    function Get_EndAngle: ACAD_ANGLE; safecall;
    procedure Set_EndAngle(EndAngle: ACAD_ANGLE); safecall;
    function Get_StartParameter: Double; safecall;
    procedure Set_StartParameter(StartParameter: Double); safecall;
    function Get_EndParameter: Double; safecall;
    procedure Set_EndParameter(EndParameter: Double); safecall;
    function Get_MajorAxis: OleVariant; safecall;
    procedure Set_MajorAxis(MajorAxis: OleVariant); safecall;
    function Get_MinorAxis: OleVariant; safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Area: Double; safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    property StartPoint: OleVariant read Get_StartPoint;
    property Center: OleVariant read Get_Center write Set_Center;
    property EndPoint: OleVariant read Get_EndPoint;
    property MajorRadius: Double read Get_MajorRadius write Set_MajorRadius;
    property MinorRadius: Double read Get_MinorRadius write Set_MinorRadius;
    property RadiusRatio: Double read Get_RadiusRatio write Set_RadiusRatio;
    property StartAngle: ACAD_ANGLE read Get_StartAngle write Set_StartAngle;
    property EndAngle: ACAD_ANGLE read Get_EndAngle write Set_EndAngle;
    property StartParameter: Double read Get_StartParameter write Set_StartParameter;
    property EndParameter: Double read Get_EndParameter write Set_EndParameter;
    property MajorAxis: OleVariant read Get_MajorAxis write Set_MajorAxis;
    property MinorAxis: OleVariant read Get_MinorAxis;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Area: Double read Get_Area;
  end;

// *********************************************************************//
// DispIntf:  IAcadEllipseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F64246E5-206A-42C2-B3E7-A725B2C07CFB}
// *********************************************************************//
  IAcadEllipseDisp = dispinterface
    ['{F64246E5-206A-42C2-B3E7-A725B2C07CFB}']
    property StartPoint: OleVariant readonly dispid 1;
    property Center: OleVariant dispid 2;
    property EndPoint: OleVariant readonly dispid 3;
    property MajorRadius: Double dispid 4;
    property MinorRadius: Double dispid 5;
    property RadiusRatio: Double dispid 6;
    property StartAngle: ACAD_ANGLE dispid 7;
    property EndAngle: ACAD_ANGLE dispid 8;
    property StartParameter: Double dispid 9;
    property EndParameter: Double dispid 10;
    property MajorAxis: OleVariant dispid 11;
    property MinorAxis: OleVariant readonly dispid 12;
    property Normal: OleVariant dispid 13;
    property Area: Double readonly dispid 14;
    function Offset(Distance: Double): OleVariant; dispid 15;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLeader
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D035FBCB-313A-4165-86A7-AAD91DA820E5}
// *********************************************************************//
  IAcadLeader = interface(IAcadEntity)
    ['{D035FBCB-313A-4165-86A7-AAD91DA820E5}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_type_: AcLeaderType; safecall;
    procedure Set_type_(Type_: AcLeaderType); safecall;
    procedure Evaluate; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    function Get_Annotation: IAcadEntity; safecall;
    procedure Set_Annotation(const pVal: IAcadEntity); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_ArrowheadType: AcDimArrowheadType; safecall;
    procedure Set_ArrowheadType(Type_: AcDimArrowheadType); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(factor: ACAD_NOUNITS); safecall;
    function Get_VerticalTextPosition: AcDimVerticalJustification; safecall;
    procedure Set_VerticalTextPosition(Type_: AcDimVerticalJustification); safecall;
    function Get_TextGap: Double; safecall;
    procedure Set_TextGap(Offset: Double); safecall;
    function Get_ArrowheadBlock: WideString; safecall;
    procedure Set_ArrowheadBlock(const BlockName: WideString); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property type_: AcLeaderType read Get_type_ write Set_type_;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property Annotation: IAcadEntity read Get_Annotation write Set_Annotation;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property ArrowheadType: AcDimArrowheadType read Get_ArrowheadType write Set_ArrowheadType;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property VerticalTextPosition: AcDimVerticalJustification read Get_VerticalTextPosition write Set_VerticalTextPosition;
    property TextGap: Double read Get_TextGap write Set_TextGap;
    property ArrowheadBlock: WideString read Get_ArrowheadBlock write Set_ArrowheadBlock;
  end;

// *********************************************************************//
// DispIntf:  IAcadLeaderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D035FBCB-313A-4165-86A7-AAD91DA820E5}
// *********************************************************************//
  IAcadLeaderDisp = dispinterface
    ['{D035FBCB-313A-4165-86A7-AAD91DA820E5}']
    property Coordinates: OleVariant dispid 64;
    property Normal: OleVariant readonly dispid 1537;
    property StyleName: WideString dispid 1542;
    property type_: AcLeaderType dispid 65;
    procedure Evaluate; dispid 66;
    property Coordinate[Index: SYSINT]: OleVariant dispid 67;
    property Annotation: IAcadEntity dispid 68;
    property ArrowheadSize: Double dispid 1543;
    property ArrowheadType: AcDimArrowheadType dispid 69;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 1550;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TextGap: Double dispid 1549;
    property ArrowheadBlock: WideString dispid 70;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadMText
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED80FACC-C4E8-4370-B5F3-1EA7F3554324}
// *********************************************************************//
  IAcadMText = interface(IAcadEntity)
    ['{ED80FACC-C4E8-4370-B5F3-1EA7F3554324}']
    function Get_TextString: WideString; safecall;
    procedure Set_TextString(const bstrText: WideString); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_AttachmentPoint: AcAttachmentPoint; safecall;
    procedure Set_AttachmentPoint(attPoint: AcAttachmentPoint); safecall;
    function Get_DrawingDirection: AcDrawingDirection; safecall;
    procedure Set_DrawingDirection(drawDir: AcDrawingDirection); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_LineSpacingFactor: Double; safecall;
    procedure Set_LineSpacingFactor(factor: Double); safecall;
    function Get_LineSpacingStyle: AcLineSpacingStyle; safecall;
    procedure Set_LineSpacingStyle(style: AcLineSpacingStyle); safecall;
    function Get_LineSpacingDistance: Double; safecall;
    procedure Set_LineSpacingDistance(Value: Double); safecall;
    function Get_BackgroundFill: WordBool; safecall;
    procedure Set_BackgroundFill(bUseBackgroundFill: WordBool); safecall;
    function FieldCode: WideString; safecall;
    property TextString: WideString read Get_TextString write Set_TextString;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property AttachmentPoint: AcAttachmentPoint read Get_AttachmentPoint write Set_AttachmentPoint;
    property DrawingDirection: AcDrawingDirection read Get_DrawingDirection write Set_DrawingDirection;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property LineSpacingFactor: Double read Get_LineSpacingFactor write Set_LineSpacingFactor;
    property LineSpacingStyle: AcLineSpacingStyle read Get_LineSpacingStyle write Set_LineSpacingStyle;
    property LineSpacingDistance: Double read Get_LineSpacingDistance write Set_LineSpacingDistance;
    property BackgroundFill: WordBool read Get_BackgroundFill write Set_BackgroundFill;
  end;

// *********************************************************************//
// DispIntf:  IAcadMTextDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED80FACC-C4E8-4370-B5F3-1EA7F3554324}
// *********************************************************************//
  IAcadMTextDisp = dispinterface
    ['{ED80FACC-C4E8-4370-B5F3-1EA7F3554324}']
    property TextString: WideString dispid 1;
    property StyleName: WideString dispid 2;
    property AttachmentPoint: AcAttachmentPoint dispid 3;
    property DrawingDirection: AcDrawingDirection dispid 4;
    property Width: Double dispid 5;
    property Height: Double dispid 6;
    property Rotation: ACAD_ANGLE dispid 7;
    property InsertionPoint: OleVariant dispid 8;
    property Normal: OleVariant dispid 9;
    property LineSpacingFactor: Double dispid 10;
    property LineSpacingStyle: AcLineSpacingStyle dispid 11;
    property LineSpacingDistance: Double dispid 12;
    property BackgroundFill: WordBool dispid 13;
    function FieldCode: WideString; dispid 14;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPoint
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F0BB516-7C5B-4BA4-820F-24B1E962D971}
// *********************************************************************//
  IAcadPoint = interface(IAcadEntity)
    ['{8F0BB516-7C5B-4BA4-820F-24B1E962D971}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
  end;

// *********************************************************************//
// DispIntf:  IAcadPointDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F0BB516-7C5B-4BA4-820F-24B1E962D971}
// *********************************************************************//
  IAcadPointDisp = dispinterface
    ['{8F0BB516-7C5B-4BA4-820F-24B1E962D971}']
    property Coordinates: OleVariant dispid 1;
    property Normal: OleVariant dispid 2;
    property Thickness: Double dispid 3;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLWPolyline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82DEE429-1C13-460B-88FA-C63E0CA33D21}
// *********************************************************************//
  IAcadLWPolyline = interface(IAcadEntity)
    ['{82DEE429-1C13-460B-88FA-C63E0CA33D21}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    procedure AddVertex(Index: SYSINT; vertex: OleVariant); safecall;
    function Explode: OleVariant; safecall;
    function GetBulge(Index: SYSINT): Double; safecall;
    procedure SetBulge(Index: SYSINT; bulge: Double); safecall;
    procedure GetWidth(Index: SYSINT; out StartWidth: Double; out EndWidth: Double); safecall;
    procedure SetWidth(Index: SYSINT; StartWidth: Double; EndWidth: Double); safecall;
    function Get_ConstantWidth: Double; safecall;
    procedure Set_ConstantWidth(Width: Double); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    function Get_Elevation: Double; safecall;
    procedure Set_Elevation(Elevation: Double); safecall;
    function Get_Area: Double; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    function Get_Closed: WordBool; safecall;
    procedure Set_Closed(fClose: WordBool); safecall;
    function Get_LinetypeGeneration: WordBool; safecall;
    procedure Set_LinetypeGeneration(bLinetypeGen: WordBool); safecall;
    function Get_Length: Double; safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ConstantWidth: Double read Get_ConstantWidth write Set_ConstantWidth;
    property Elevation: Double read Get_Elevation write Set_Elevation;
    property Area: Double read Get_Area;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property LinetypeGeneration: WordBool read Get_LinetypeGeneration write Set_LinetypeGeneration;
    property Length: Double read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  IAcadLWPolylineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82DEE429-1C13-460B-88FA-C63E0CA33D21}
// *********************************************************************//
  IAcadLWPolylineDisp = dispinterface
    ['{82DEE429-1C13-460B-88FA-C63E0CA33D21}']
    property Coordinates: OleVariant dispid 1;
    property Normal: OleVariant dispid 2;
    property Thickness: Double dispid 3;
    procedure AddVertex(Index: SYSINT; vertex: OleVariant); dispid 4;
    function Explode: OleVariant; dispid 5;
    function GetBulge(Index: SYSINT): Double; dispid 6;
    procedure SetBulge(Index: SYSINT; bulge: Double); dispid 7;
    procedure GetWidth(Index: SYSINT; out StartWidth: Double; out EndWidth: Double); dispid 8;
    procedure SetWidth(Index: SYSINT; StartWidth: Double; EndWidth: Double); dispid 9;
    property ConstantWidth: Double dispid 10;
    function Offset(Distance: Double): OleVariant; dispid 11;
    property Elevation: Double dispid 12;
    property Area: Double readonly dispid 13;
    property Coordinate[Index: SYSINT]: OleVariant dispid 14;
    property Closed: WordBool dispid 15;
    property LinetypeGeneration: WordBool dispid 16;
    property Length: Double readonly dispid 17;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPolyline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09B5650-3A79-41F7-A459-1817D6F1797C}
// *********************************************************************//
  IAcadPolyline = interface(IAcadEntity)
    ['{A09B5650-3A79-41F7-A459-1817D6F1797C}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Coordinates: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    procedure AppendVertex(vertex: OleVariant); safecall;
    function Explode: OleVariant; safecall;
    function GetBulge(Index: SYSINT): Double; safecall;
    procedure SetBulge(Index: SYSINT; bulge: Double); safecall;
    procedure GetWidth(Index: SYSINT; out StartWidth: Double; var EndWidth: Double); safecall;
    procedure SetWidth(Index: SYSINT; StartWidth: Double; EndWidth: Double); safecall;
    function Get_ConstantWidth: Double; safecall;
    procedure Set_ConstantWidth(Width: Double); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    function Get_Elevation: Double; safecall;
    procedure Set_Elevation(Elevation: Double); safecall;
    function Get_type_: AcPolylineType; safecall;
    procedure Set_type_(Type_: AcPolylineType); safecall;
    function Get_Closed: WordBool; safecall;
    procedure Set_Closed(fClose: WordBool); safecall;
    function Get_LinetypeGeneration: WordBool; safecall;
    procedure Set_LinetypeGeneration(bLinetypeGen: WordBool); safecall;
    function Get_Area: Double; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    function Get_Length: Double; safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ConstantWidth: Double read Get_ConstantWidth write Set_ConstantWidth;
    property Elevation: Double read Get_Elevation write Set_Elevation;
    property type_: AcPolylineType read Get_type_ write Set_type_;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property LinetypeGeneration: WordBool read Get_LinetypeGeneration write Set_LinetypeGeneration;
    property Area: Double read Get_Area;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property Length: Double read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  IAcadPolylineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09B5650-3A79-41F7-A459-1817D6F1797C}
// *********************************************************************//
  IAcadPolylineDisp = dispinterface
    ['{A09B5650-3A79-41F7-A459-1817D6F1797C}']
    property Coordinates: OleVariant dispid 1;
    property Normal: OleVariant dispid 2;
    property Thickness: Double dispid 3;
    procedure AppendVertex(vertex: OleVariant); dispid 4;
    function Explode: OleVariant; dispid 5;
    function GetBulge(Index: SYSINT): Double; dispid 6;
    procedure SetBulge(Index: SYSINT; bulge: Double); dispid 7;
    procedure GetWidth(Index: SYSINT; out StartWidth: Double; var EndWidth: Double); dispid 8;
    procedure SetWidth(Index: SYSINT; StartWidth: Double; EndWidth: Double); dispid 9;
    property ConstantWidth: Double dispid 10;
    function Offset(Distance: Double): OleVariant; dispid 11;
    property Elevation: Double dispid 12;
    property type_: AcPolylineType dispid 13;
    property Closed: WordBool dispid 14;
    property LinetypeGeneration: WordBool dispid 15;
    property Area: Double readonly dispid 16;
    property Coordinate[Index: SYSINT]: OleVariant dispid 17;
    property Length: Double readonly dispid 18;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRay
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE71C3CD-270F-4A01-86F4-91694B267C19}
// *********************************************************************//
  IAcadRay = interface(IAcadEntity)
    ['{BE71C3CD-270F-4A01-86F4-91694B267C19}']
    function Get_BasePoint: OleVariant; safecall;
    procedure Set_BasePoint(BasePoint: OleVariant); safecall;
    function Get_SecondPoint: OleVariant; safecall;
    procedure Set_SecondPoint(SecondPoint: OleVariant); safecall;
    function Get_DirectionVector: OleVariant; safecall;
    procedure Set_DirectionVector(dirVector: OleVariant); safecall;
    property BasePoint: OleVariant read Get_BasePoint write Set_BasePoint;
    property SecondPoint: OleVariant read Get_SecondPoint write Set_SecondPoint;
    property DirectionVector: OleVariant read Get_DirectionVector write Set_DirectionVector;
  end;

// *********************************************************************//
// DispIntf:  IAcadRayDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE71C3CD-270F-4A01-86F4-91694B267C19}
// *********************************************************************//
  IAcadRayDisp = dispinterface
    ['{BE71C3CD-270F-4A01-86F4-91694B267C19}']
    property BasePoint: OleVariant dispid 1;
    property SecondPoint: OleVariant dispid 2;
    property DirectionVector: OleVariant dispid 3;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadShape
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {822BD4B7-7F08-4871-80DD-FEA0C7E8BCD4}
// *********************************************************************//
  IAcadShape = interface(IAcadEntity)
    ['{822BD4B7-7F08-4871-80DD-FEA0C7E8BCD4}']
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(scalFactor: ACAD_NOUNITS); safecall;
    function Get_ObliqueAngle: ACAD_ANGLE; safecall;
    procedure Set_ObliqueAngle(obliAngle: ACAD_ANGLE); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Name: WideString read Get_Name write Set_Name;
    property Height: Double read Get_Height write Set_Height;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property ObliqueAngle: ACAD_ANGLE read Get_ObliqueAngle write Set_ObliqueAngle;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
  end;

// *********************************************************************//
// DispIntf:  IAcadShapeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {822BD4B7-7F08-4871-80DD-FEA0C7E8BCD4}
// *********************************************************************//
  IAcadShapeDisp = dispinterface
    ['{822BD4B7-7F08-4871-80DD-FEA0C7E8BCD4}']
    property InsertionPoint: OleVariant dispid 1;
    property Name: WideString dispid 2;
    property Height: Double dispid 3;
    property Rotation: ACAD_ANGLE dispid 4;
    property ScaleFactor: ACAD_NOUNITS dispid 5;
    property ObliqueAngle: ACAD_ANGLE dispid 6;
    property Normal: OleVariant dispid 7;
    property Thickness: Double dispid 8;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSolid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23F23BC3-887A-4ED5-BDB7-8BAF1D820228}
// *********************************************************************//
  IAcadSolid = interface(IAcadEntity)
    ['{23F23BC3-887A-4ED5-BDB7-8BAF1D820228}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(corners: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
  end;

// *********************************************************************//
// DispIntf:  IAcadSolidDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23F23BC3-887A-4ED5-BDB7-8BAF1D820228}
// *********************************************************************//
  IAcadSolidDisp = dispinterface
    ['{23F23BC3-887A-4ED5-BDB7-8BAF1D820228}']
    property Coordinates: OleVariant dispid 1;
    property Normal: OleVariant dispid 2;
    property Thickness: Double dispid 3;
    property Coordinate[Index: SYSINT]: OleVariant dispid 4;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSpline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7727775-104A-4DBA-9CCF-0FBDC5B80872}
// *********************************************************************//
  IAcadSpline = interface(IAcadEntity)
    ['{D7727775-104A-4DBA-9CCF-0FBDC5B80872}']
    function Get_NumberOfControlPoints: Integer; safecall;
    function Get_ControlPoints: OleVariant; safecall;
    procedure Set_ControlPoints(controlPoint: OleVariant); safecall;
    function Get_NumberOfFitPoints: Integer; safecall;
    function Get_FitPoints: OleVariant; safecall;
    procedure Set_FitPoints(fitPoint: OleVariant); safecall;
    function Get_Degree: Integer; safecall;
    function Get_Closed: WordBool; safecall;
    function Get_IsPlanar: WordBool; safecall;
    function Get_IsRational: WordBool; safecall;
    function Get_IsPeriodic: WordBool; safecall;
    function Get_StartTangent: OleVariant; safecall;
    procedure Set_StartTangent(StartTangent: OleVariant); safecall;
    function Get_EndTangent: OleVariant; safecall;
    procedure Set_EndTangent(EndTangent: OleVariant); safecall;
    function Get_FitTolerance: Double; safecall;
    procedure Set_FitTolerance(fitTol: Double); safecall;
    function Get_Area: Double; safecall;
    procedure SetControlPoint(Index: SYSINT; controlPoint: OleVariant); safecall;
    function GetControlPoint(Index: SYSINT): OleVariant; safecall;
    procedure SetFitPoint(Index: SYSINT; fitPoint: OleVariant); safecall;
    function GetFitPoint(Index: SYSINT): OleVariant; safecall;
    procedure SetWeight(Index: SYSINT; weight: Double); safecall;
    function GetWeight(Index: SYSINT): Double; safecall;
    procedure AddFitPoint(Index: SYSINT; fitPoint: OleVariant); safecall;
    procedure DeleteFitPoint(Index: SYSINT); safecall;
    procedure ElevateOrder(Order: SYSINT); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    procedure PurgeFitData; safecall;
    procedure Reverse; safecall;
    function Get_Knots: OleVariant; safecall;
    procedure Set_Knots(KnotValues: OleVariant); safecall;
    function Get_Weights: OleVariant; safecall;
    procedure Set_Weights(WeightValues: OleVariant); safecall;
    property NumberOfControlPoints: Integer read Get_NumberOfControlPoints;
    property ControlPoints: OleVariant read Get_ControlPoints write Set_ControlPoints;
    property NumberOfFitPoints: Integer read Get_NumberOfFitPoints;
    property FitPoints: OleVariant read Get_FitPoints write Set_FitPoints;
    property Degree: Integer read Get_Degree;
    property Closed: WordBool read Get_Closed;
    property IsPlanar: WordBool read Get_IsPlanar;
    property IsRational: WordBool read Get_IsRational;
    property IsPeriodic: WordBool read Get_IsPeriodic;
    property StartTangent: OleVariant read Get_StartTangent write Set_StartTangent;
    property EndTangent: OleVariant read Get_EndTangent write Set_EndTangent;
    property FitTolerance: Double read Get_FitTolerance write Set_FitTolerance;
    property Area: Double read Get_Area;
    property Knots: OleVariant read Get_Knots write Set_Knots;
    property Weights: OleVariant read Get_Weights write Set_Weights;
  end;

// *********************************************************************//
// DispIntf:  IAcadSplineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7727775-104A-4DBA-9CCF-0FBDC5B80872}
// *********************************************************************//
  IAcadSplineDisp = dispinterface
    ['{D7727775-104A-4DBA-9CCF-0FBDC5B80872}']
    property NumberOfControlPoints: Integer readonly dispid 1;
    property ControlPoints: OleVariant dispid 2;
    property NumberOfFitPoints: Integer readonly dispid 3;
    property FitPoints: OleVariant dispid 4;
    property Degree: Integer readonly dispid 5;
    property Closed: WordBool readonly dispid 6;
    property IsPlanar: WordBool readonly dispid 7;
    property IsRational: WordBool readonly dispid 8;
    property IsPeriodic: WordBool readonly dispid 9;
    property StartTangent: OleVariant dispid 10;
    property EndTangent: OleVariant dispid 11;
    property FitTolerance: Double dispid 12;
    property Area: Double readonly dispid 13;
    procedure SetControlPoint(Index: SYSINT; controlPoint: OleVariant); dispid 14;
    function GetControlPoint(Index: SYSINT): OleVariant; dispid 15;
    procedure SetFitPoint(Index: SYSINT; fitPoint: OleVariant); dispid 16;
    function GetFitPoint(Index: SYSINT): OleVariant; dispid 17;
    procedure SetWeight(Index: SYSINT; weight: Double); dispid 18;
    function GetWeight(Index: SYSINT): Double; dispid 19;
    procedure AddFitPoint(Index: SYSINT; fitPoint: OleVariant); dispid 20;
    procedure DeleteFitPoint(Index: SYSINT); dispid 21;
    procedure ElevateOrder(Order: SYSINT); dispid 22;
    function Offset(Distance: Double): OleVariant; dispid 23;
    procedure PurgeFitData; dispid 24;
    procedure Reverse; dispid 25;
    property Knots: OleVariant dispid 26;
    property Weights: OleVariant dispid 27;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadText
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA0222E2-D7FB-4BCB-BD71-714E7A598DAB}
// *********************************************************************//
  IAcadText = interface(IAcadEntity)
    ['{BA0222E2-D7FB-4BCB-BD71-714E7A598DAB}']
    function Get_TextString: WideString; safecall;
    procedure Set_TextString(const bstrText: WideString); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_Alignment: AcAlignment; safecall;
    procedure Set_Alignment(align: AcAlignment); safecall;
    function Get_HorizontalAlignment: AcHorizontalAlignment; safecall;
    procedure Set_HorizontalAlignment(horizAlign: AcHorizontalAlignment); safecall;
    function Get_VerticalAlignment: AcVerticalAlignment; safecall;
    procedure Set_VerticalAlignment(vertiAlign: AcVerticalAlignment); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(scalFactor: ACAD_NOUNITS); safecall;
    function Get_ObliqueAngle: ACAD_ANGLE; safecall;
    procedure Set_ObliqueAngle(obliAngle: ACAD_ANGLE); safecall;
    function Get_TextAlignmentPoint: OleVariant; safecall;
    procedure Set_TextAlignmentPoint(alignPoint: OleVariant); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_TextGenerationFlag: Integer; safecall;
    procedure Set_TextGenerationFlag(textGenFlag: Integer); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_UpsideDown: WordBool; safecall;
    procedure Set_UpsideDown(UpsideDown: WordBool); safecall;
    function Get_Backward: WordBool; safecall;
    procedure Set_Backward(Backward: WordBool); safecall;
    function FieldCode: WideString; safecall;
    property TextString: WideString read Get_TextString write Set_TextString;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property Alignment: AcAlignment read Get_Alignment write Set_Alignment;
    property HorizontalAlignment: AcHorizontalAlignment read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property VerticalAlignment: AcVerticalAlignment read Get_VerticalAlignment write Set_VerticalAlignment;
    property Height: Double read Get_Height write Set_Height;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property ObliqueAngle: ACAD_ANGLE read Get_ObliqueAngle write Set_ObliqueAngle;
    property TextAlignmentPoint: OleVariant read Get_TextAlignmentPoint write Set_TextAlignmentPoint;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property TextGenerationFlag: Integer read Get_TextGenerationFlag write Set_TextGenerationFlag;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property UpsideDown: WordBool read Get_UpsideDown write Set_UpsideDown;
    property Backward: WordBool read Get_Backward write Set_Backward;
  end;

// *********************************************************************//
// DispIntf:  IAcadTextDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA0222E2-D7FB-4BCB-BD71-714E7A598DAB}
// *********************************************************************//
  IAcadTextDisp = dispinterface
    ['{BA0222E2-D7FB-4BCB-BD71-714E7A598DAB}']
    property TextString: WideString dispid 1;
    property StyleName: WideString dispid 2;
    property Alignment: AcAlignment dispid 3;
    property HorizontalAlignment: AcHorizontalAlignment dispid 4;
    property VerticalAlignment: AcVerticalAlignment dispid 5;
    property Height: Double dispid 6;
    property Rotation: ACAD_ANGLE dispid 7;
    property ScaleFactor: ACAD_NOUNITS dispid 8;
    property ObliqueAngle: ACAD_ANGLE dispid 9;
    property TextAlignmentPoint: OleVariant dispid 10;
    property InsertionPoint: OleVariant dispid 11;
    property Normal: OleVariant dispid 12;
    property TextGenerationFlag: Integer dispid 13;
    property Thickness: Double dispid 14;
    property UpsideDown: WordBool dispid 15;
    property Backward: WordBool dispid 16;
    function FieldCode: WideString; dispid 17;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadTolerance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {692212C8-D4A3-436A-ADE4-16C94BDC8A4C}
// *********************************************************************//
  IAcadTolerance = interface(IAcadEntity)
    ['{692212C8-D4A3-436A-ADE4-16C94BDC8A4C}']
    function Get_DirectionVector: OleVariant; safecall;
    procedure Set_DirectionVector(dirVector: OleVariant); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_TextColor: ACAD_COLOR; safecall;
    procedure Set_TextColor(color: ACAD_COLOR); safecall;
    function Get_TextString: WideString; safecall;
    procedure Set_TextString(const bstrText: WideString); safecall;
    function Get_TextStyle: WideString; safecall;
    procedure Set_TextStyle(const style: WideString); safecall;
    function Get_TextHeight: Double; safecall;
    procedure Set_TextHeight(Height: Double); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(factor: ACAD_NOUNITS); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    property DirectionVector: OleVariant read Get_DirectionVector write Set_DirectionVector;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property TextColor: ACAD_COLOR read Get_TextColor write Set_TextColor;
    property TextString: WideString read Get_TextString write Set_TextString;
    property TextStyle: WideString read Get_TextStyle write Set_TextStyle;
    property TextHeight: Double read Get_TextHeight write Set_TextHeight;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
  end;

// *********************************************************************//
// DispIntf:  IAcadToleranceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {692212C8-D4A3-436A-ADE4-16C94BDC8A4C}
// *********************************************************************//
  IAcadToleranceDisp = dispinterface
    ['{692212C8-D4A3-436A-ADE4-16C94BDC8A4C}']
    property DirectionVector: OleVariant dispid 80;
    property InsertionPoint: OleVariant dispid 81;
    property Normal: OleVariant dispid 82;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property TextString: WideString dispid 1541;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadTrace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CB82E58-CC76-4C8C-B1ED-D85C69B6A456}
// *********************************************************************//
  IAcadTrace = interface(IAcadEntity)
    ['{1CB82E58-CC76-4C8C-B1ED-D85C69B6A456}']
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(corners: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
  end;

// *********************************************************************//
// DispIntf:  IAcadTraceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CB82E58-CC76-4C8C-B1ED-D85C69B6A456}
// *********************************************************************//
  IAcadTraceDisp = dispinterface
    ['{1CB82E58-CC76-4C8C-B1ED-D85C69B6A456}']
    property Coordinates: OleVariant dispid 1;
    property Normal: OleVariant dispid 2;
    property Thickness: Double dispid 3;
    property Coordinate[Index: SYSINT]: OleVariant dispid 4;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadXline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96FC51A1-B610-406F-990D-0652F53758A9}
// *********************************************************************//
  IAcadXline = interface(IAcadEntity)
    ['{96FC51A1-B610-406F-990D-0652F53758A9}']
    function Get_BasePoint: OleVariant; safecall;
    procedure Set_BasePoint(BasePoint: OleVariant); safecall;
    function Get_SecondPoint: OleVariant; safecall;
    procedure Set_SecondPoint(SecondPoint: OleVariant); safecall;
    function Get_DirectionVector: OleVariant; safecall;
    procedure Set_DirectionVector(dirVector: OleVariant); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    property BasePoint: OleVariant read Get_BasePoint write Set_BasePoint;
    property SecondPoint: OleVariant read Get_SecondPoint write Set_SecondPoint;
    property DirectionVector: OleVariant read Get_DirectionVector write Set_DirectionVector;
  end;

// *********************************************************************//
// DispIntf:  IAcadXlineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96FC51A1-B610-406F-990D-0652F53758A9}
// *********************************************************************//
  IAcadXlineDisp = dispinterface
    ['{96FC51A1-B610-406F-990D-0652F53758A9}']
    property BasePoint: OleVariant dispid 1;
    property SecondPoint: OleVariant dispid 2;
    property DirectionVector: OleVariant dispid 3;
    function Offset(Distance: Double): OleVariant; dispid 4;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadBlockReference
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17C1A78F-ECB3-4838-986C-FA92E17D41AB}
// *********************************************************************//
  IAcadBlockReference = interface(IAcadEntity)
    ['{17C1A78F-ECB3-4838-986C-FA92E17D41AB}']
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_XScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_XScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_YScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_YScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_ZScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ZScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Explode: OleVariant; safecall;
    function GetAttributes: OleVariant; safecall;
    function GetConstantAttributes: OleVariant; safecall;
    function Get_HasAttributes: WordBool; safecall;
    function Get_EffectiveName: WideString; safecall;
    function Get_IsDynamicBlock: WordBool; safecall;
    function GetDynamicBlockProperties: OleVariant; safecall;
    procedure ResetBlock; safecall;
    procedure ConvertToAnonymousBlock; safecall;
    procedure ConvertToStaticBlock(const newBlockName: WideString); safecall;
    function Get_XEffectiveScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_XEffectiveScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_YEffectiveScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_YEffectiveScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_ZEffectiveScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ZEffectiveScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_InsUnits: WideString; safecall;
    function Get_InsUnitsFactor: Double; safecall;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Name: WideString read Get_Name write Set_Name;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property XScaleFactor: ACAD_NOUNITS read Get_XScaleFactor write Set_XScaleFactor;
    property YScaleFactor: ACAD_NOUNITS read Get_YScaleFactor write Set_YScaleFactor;
    property ZScaleFactor: ACAD_NOUNITS read Get_ZScaleFactor write Set_ZScaleFactor;
    property HasAttributes: WordBool read Get_HasAttributes;
    property EffectiveName: WideString read Get_EffectiveName;
    property IsDynamicBlock: WordBool read Get_IsDynamicBlock;
    property XEffectiveScaleFactor: ACAD_NOUNITS read Get_XEffectiveScaleFactor write Set_XEffectiveScaleFactor;
    property YEffectiveScaleFactor: ACAD_NOUNITS read Get_YEffectiveScaleFactor write Set_YEffectiveScaleFactor;
    property ZEffectiveScaleFactor: ACAD_NOUNITS read Get_ZEffectiveScaleFactor write Set_ZEffectiveScaleFactor;
    property InsUnits: WideString read Get_InsUnits;
    property InsUnitsFactor: Double read Get_InsUnitsFactor;
  end;

// *********************************************************************//
// DispIntf:  IAcadBlockReferenceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17C1A78F-ECB3-4838-986C-FA92E17D41AB}
// *********************************************************************//
  IAcadBlockReferenceDisp = dispinterface
    ['{17C1A78F-ECB3-4838-986C-FA92E17D41AB}']
    property InsertionPoint: OleVariant dispid 1;
    property Name: WideString dispid 2;
    property Normal: OleVariant dispid 3;
    property Rotation: ACAD_ANGLE dispid 4;
    property XScaleFactor: ACAD_NOUNITS dispid 5;
    property YScaleFactor: ACAD_NOUNITS dispid 6;
    property ZScaleFactor: ACAD_NOUNITS dispid 7;
    function Explode: OleVariant; dispid 8;
    function GetAttributes: OleVariant; dispid 9;
    function GetConstantAttributes: OleVariant; dispid 10;
    property HasAttributes: WordBool readonly dispid 11;
    property EffectiveName: WideString readonly dispid 512;
    property IsDynamicBlock: WordBool readonly dispid 513;
    function GetDynamicBlockProperties: OleVariant; dispid 514;
    procedure ResetBlock; dispid 515;
    procedure ConvertToAnonymousBlock; dispid 516;
    procedure ConvertToStaticBlock(const newBlockName: WideString); dispid 517;
    property XEffectiveScaleFactor: ACAD_NOUNITS dispid 518;
    property YEffectiveScaleFactor: ACAD_NOUNITS dispid 519;
    property ZEffectiveScaleFactor: ACAD_NOUNITS dispid 520;
    property InsUnits: WideString readonly dispid 521;
    property InsUnitsFactor: Double readonly dispid 528;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadHatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10D4F2FB-BEE7-47EB-B956-D5F51BC16221}
// *********************************************************************//
  IAcadHatch = interface(IAcadEntity)
    ['{10D4F2FB-BEE7-47EB-B956-D5F51BC16221}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_NumberOfLoops: Integer; safecall;
    function Get_PatternType: AcPatternType; safecall;
    function Get_PatternName: WideString; safecall;
    function Get_PatternAngle: ACAD_ANGLE; safecall;
    procedure Set_PatternAngle(PatternAngle: ACAD_ANGLE); safecall;
    function Get_PatternScale: ACAD_NOUNITS; safecall;
    procedure Set_PatternScale(PatternScale: ACAD_NOUNITS); safecall;
    function Get_PatternSpace: Double; safecall;
    procedure Set_PatternSpace(PatternSpace: Double); safecall;
    function Get_ISOPenWidth: AcISOPenWidth; safecall;
    procedure Set_ISOPenWidth(penWidth: AcISOPenWidth); safecall;
    function Get_PatternDouble: WordBool; safecall;
    procedure Set_PatternDouble(bDouble: WordBool); safecall;
    function Get_Elevation: Double; safecall;
    procedure Set_Elevation(Elevation: Double); safecall;
    function Get_AssociativeHatch: WordBool; safecall;
    procedure Set_AssociativeHatch(fAssoc: WordBool); safecall;
    function Get_HatchStyle: AcHatchStyle; safecall;
    procedure Set_HatchStyle(HatchStyle: AcHatchStyle); safecall;
    procedure SetPattern(PatternType: SYSINT; const PatternName: WideString); safecall;
    procedure AppendOuterLoop(ObjectArray: OleVariant); safecall;
    procedure AppendInnerLoop(ObjectArray: OleVariant); safecall;
    procedure InsertLoopAt(Index: SYSINT; LoopType: AcLoopType; ObjectArray: OleVariant); safecall;
    procedure GetLoopAt(Index: SYSINT; out ObjectArray: OleVariant); safecall;
    procedure Evaluate; safecall;
    function Get_GradientColor1: IAcadAcCmColor; safecall;
    procedure Set_GradientColor1(const pColor: IAcadAcCmColor); safecall;
    function Get_GradientColor2: IAcadAcCmColor; safecall;
    procedure Set_GradientColor2(const pColor: IAcadAcCmColor); safecall;
    function Get_GradientAngle: ACAD_ANGLE; safecall;
    procedure Set_GradientAngle(GradientAngle: ACAD_ANGLE); safecall;
    function Get_GradientCentered: WordBool; safecall;
    procedure Set_GradientCentered(fCentered: WordBool); safecall;
    function Get_GradientName: WideString; safecall;
    procedure Set_GradientName(const bstrName: WideString); safecall;
    function Get_HatchObjectType: AcHatchObjectType; safecall;
    procedure Set_HatchObjectType(hatchType: AcHatchObjectType); safecall;
    function Get_Area: Double; safecall;
    function Get_Origin: OleVariant; safecall;
    procedure Set_Origin(Origin: OleVariant); safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property NumberOfLoops: Integer read Get_NumberOfLoops;
    property PatternType: AcPatternType read Get_PatternType;
    property PatternName: WideString read Get_PatternName;
    property PatternAngle: ACAD_ANGLE read Get_PatternAngle write Set_PatternAngle;
    property PatternScale: ACAD_NOUNITS read Get_PatternScale write Set_PatternScale;
    property PatternSpace: Double read Get_PatternSpace write Set_PatternSpace;
    property ISOPenWidth: AcISOPenWidth read Get_ISOPenWidth write Set_ISOPenWidth;
    property PatternDouble: WordBool read Get_PatternDouble write Set_PatternDouble;
    property Elevation: Double read Get_Elevation write Set_Elevation;
    property AssociativeHatch: WordBool read Get_AssociativeHatch write Set_AssociativeHatch;
    property HatchStyle: AcHatchStyle read Get_HatchStyle write Set_HatchStyle;
    property GradientColor1: IAcadAcCmColor read Get_GradientColor1 write Set_GradientColor1;
    property GradientColor2: IAcadAcCmColor read Get_GradientColor2 write Set_GradientColor2;
    property GradientAngle: ACAD_ANGLE read Get_GradientAngle write Set_GradientAngle;
    property GradientCentered: WordBool read Get_GradientCentered write Set_GradientCentered;
    property GradientName: WideString read Get_GradientName write Set_GradientName;
    property HatchObjectType: AcHatchObjectType read Get_HatchObjectType write Set_HatchObjectType;
    property Area: Double read Get_Area;
    property Origin: OleVariant read Get_Origin write Set_Origin;
  end;

// *********************************************************************//
// DispIntf:  IAcadHatchDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10D4F2FB-BEE7-47EB-B956-D5F51BC16221}
// *********************************************************************//
  IAcadHatchDisp = dispinterface
    ['{10D4F2FB-BEE7-47EB-B956-D5F51BC16221}']
    property Normal: OleVariant dispid 1;
    property NumberOfLoops: Integer readonly dispid 2;
    property PatternType: AcPatternType readonly dispid 3;
    property PatternName: WideString readonly dispid 4;
    property PatternAngle: ACAD_ANGLE dispid 5;
    property PatternScale: ACAD_NOUNITS dispid 6;
    property PatternSpace: Double dispid 7;
    property ISOPenWidth: AcISOPenWidth dispid 8;
    property PatternDouble: WordBool dispid 9;
    property Elevation: Double dispid 10;
    property AssociativeHatch: WordBool dispid 11;
    property HatchStyle: AcHatchStyle dispid 12;
    procedure SetPattern(PatternType: SYSINT; const PatternName: WideString); dispid 13;
    procedure AppendOuterLoop(ObjectArray: OleVariant); dispid 14;
    procedure AppendInnerLoop(ObjectArray: OleVariant); dispid 15;
    procedure InsertLoopAt(Index: SYSINT; LoopType: AcLoopType; ObjectArray: OleVariant); dispid 16;
    procedure GetLoopAt(Index: SYSINT; out ObjectArray: OleVariant); dispid 17;
    procedure Evaluate; dispid 18;
    property GradientColor1: IAcadAcCmColor dispid 19;
    property GradientColor2: IAcadAcCmColor dispid 20;
    property GradientAngle: ACAD_ANGLE dispid 21;
    property GradientCentered: WordBool dispid 22;
    property GradientName: WideString dispid 23;
    property HatchObjectType: AcHatchObjectType dispid 24;
    property Area: Double readonly dispid 25;
    property Origin: OleVariant dispid 26;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRasterImage
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE3833FA-927E-4272-A918-8B487E445600}
// *********************************************************************//
  IAcadRasterImage = interface(IAcadEntity)
    ['{EE3833FA-927E-4272-A918-8B487E445600}']
    function Get_Brightness: Integer; safecall;
    procedure Set_Brightness(Brightness: Integer); safecall;
    function Get_Contrast: Integer; safecall;
    procedure Set_Contrast(Contrast: Integer); safecall;
    function Get_Fade: Integer; safecall;
    procedure Set_Fade(Fade: Integer); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure Set_Origin(Origin: OleVariant); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_ImageWidth: Double; safecall;
    procedure Set_ImageWidth(Width: Double); safecall;
    function Get_ImageHeight: Double; safecall;
    procedure Set_ImageHeight(Height: Double); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    procedure Set_ImageFile(const imageFileName: WideString); safecall;
    function Get_ImageFile: WideString; safecall;
    function Get_ImageVisibility: WordBool; safecall;
    procedure Set_ImageVisibility(fVisible: WordBool); safecall;
    function Get_ClippingEnabled: WordBool; safecall;
    procedure Set_ClippingEnabled(kClip: WordBool); safecall;
    function Get_Transparency: WordBool; safecall;
    procedure Set_Transparency(bTransp: WordBool); safecall;
    procedure ClipBoundary(boundry: OleVariant); safecall;
    function Get_Height: Double; safecall;
    function Get_Width: Double; safecall;
    function Get_ShowRotation: WordBool; safecall;
    procedure Set_ShowRotation(bShow: WordBool); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    property Brightness: Integer read Get_Brightness write Set_Brightness;
    property Contrast: Integer read Get_Contrast write Set_Contrast;
    property Fade: Integer read Get_Fade write Set_Fade;
    property Origin: OleVariant read Get_Origin write Set_Origin;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property ImageWidth: Double read Get_ImageWidth write Set_ImageWidth;
    property ImageHeight: Double read Get_ImageHeight write Set_ImageHeight;
    property Name: WideString read Get_Name write Set_Name;
    property ImageFile: WideString read Get_ImageFile write Set_ImageFile;
    property ImageVisibility: WordBool read Get_ImageVisibility write Set_ImageVisibility;
    property ClippingEnabled: WordBool read Get_ClippingEnabled write Set_ClippingEnabled;
    property Transparency: WordBool read Get_Transparency write Set_Transparency;
    property Height: Double read Get_Height;
    property Width: Double read Get_Width;
    property ShowRotation: WordBool read Get_ShowRotation write Set_ShowRotation;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
  end;

// *********************************************************************//
// DispIntf:  IAcadRasterImageDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE3833FA-927E-4272-A918-8B487E445600}
// *********************************************************************//
  IAcadRasterImageDisp = dispinterface
    ['{EE3833FA-927E-4272-A918-8B487E445600}']
    property Brightness: Integer dispid 1;
    property Contrast: Integer dispid 2;
    property Fade: Integer dispid 3;
    property Origin: OleVariant dispid 4;
    property Rotation: ACAD_ANGLE dispid 5;
    property ImageWidth: Double dispid 6;
    property ImageHeight: Double dispid 7;
    property Name: WideString dispid 8;
    property ImageFile: WideString dispid 9;
    property ImageVisibility: WordBool dispid 10;
    property ClippingEnabled: WordBool dispid 11;
    property Transparency: WordBool dispid 12;
    procedure ClipBoundary(boundry: OleVariant); dispid 13;
    property Height: Double readonly dispid 14;
    property Width: Double readonly dispid 15;
    property ShowRotation: WordBool dispid 16;
    property ScaleFactor: ACAD_NOUNITS dispid 17;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLine
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB0A29C2-AA57-4A39-A771-DD9987890AF7}
// *********************************************************************//
  IAcadLine = interface(IAcadEntity)
    ['{BB0A29C2-AA57-4A39-A771-DD9987890AF7}']
    function Get_StartPoint: OleVariant; safecall;
    procedure Set_StartPoint(StartPoint: OleVariant); safecall;
    function Get_EndPoint: OleVariant; safecall;
    procedure Set_EndPoint(EndPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Offset(Distance: Double): OleVariant; safecall;
    function Get_Delta: OleVariant; safecall;
    function Get_Length: Double; safecall;
    function Get_Angle: ACAD_ANGLE; safecall;
    property StartPoint: OleVariant read Get_StartPoint write Set_StartPoint;
    property EndPoint: OleVariant read Get_EndPoint write Set_EndPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Delta: OleVariant read Get_Delta;
    property Length: Double read Get_Length;
    property Angle: ACAD_ANGLE read Get_Angle;
  end;

// *********************************************************************//
// DispIntf:  IAcadLineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB0A29C2-AA57-4A39-A771-DD9987890AF7}
// *********************************************************************//
  IAcadLineDisp = dispinterface
    ['{BB0A29C2-AA57-4A39-A771-DD9987890AF7}']
    property StartPoint: OleVariant dispid 1;
    property EndPoint: OleVariant dispid 2;
    property Normal: OleVariant dispid 3;
    property Thickness: Double dispid 4;
    function Offset(Distance: Double): OleVariant; dispid 5;
    property Delta: OleVariant readonly dispid 6;
    property Length: Double readonly dispid 7;
    property Angle: ACAD_ANGLE readonly dispid 8;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPlotConfiguration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B36D1E0-C5B2-4E3F-8304-877E5E0557C4}
// *********************************************************************//
  IAcadPlotConfiguration = interface(IAcadObject)
    ['{9B36D1E0-C5B2-4E3F-8304-877E5E0557C4}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pName: WideString); safecall;
    function Get_ConfigName: WideString; safecall;
    procedure Set_ConfigName(const pName: WideString); safecall;
    function Get_CanonicalMediaName: WideString; safecall;
    procedure Set_CanonicalMediaName(const pName: WideString); safecall;
    function Get_PaperUnits: AcPlotPaperUnits; safecall;
    procedure Set_PaperUnits(pPaperUnits: AcPlotPaperUnits); safecall;
    function Get_PlotViewportBorders: WordBool; safecall;
    procedure Set_PlotViewportBorders(pViewportBorders: WordBool); safecall;
    function Get_ShowPlotStyles: WordBool; safecall;
    procedure Set_ShowPlotStyles(pStyles: WordBool); safecall;
    function Get_PlotRotation: AcPlotRotation; safecall;
    procedure Set_PlotRotation(pRotation: AcPlotRotation); safecall;
    function Get_CenterPlot: WordBool; safecall;
    procedure Set_CenterPlot(pCentered: WordBool); safecall;
    function Get_PlotHidden: WordBool; safecall;
    procedure Set_PlotHidden(pHidden: WordBool); safecall;
    function Get_PlotType: AcPlotType; safecall;
    procedure Set_PlotType(pType: AcPlotType); safecall;
    function Get_ViewToPlot: WideString; safecall;
    procedure Set_ViewToPlot(const pName: WideString); safecall;
    function Get_UseStandardScale: WordBool; safecall;
    procedure Set_UseStandardScale(pUseStdScale: WordBool); safecall;
    function Get_StandardScale: AcPlotScale; safecall;
    procedure Set_StandardScale(pStdScale: AcPlotScale); safecall;
    procedure GetCustomScale(out Numerator: Double; out Denominator: Double); safecall;
    procedure SetCustomScale(Numerator: Double; Denominator: Double); safecall;
    function Get_ScaleLineweights: WordBool; safecall;
    procedure Set_ScaleLineweights(pScale: WordBool); safecall;
    function Get_PlotWithLineweights: WordBool; safecall;
    procedure Set_PlotWithLineweights(pPlot: WordBool); safecall;
    function Get_PlotViewportsFirst: WordBool; safecall;
    procedure Set_PlotViewportsFirst(pViewportsFirst: WordBool); safecall;
    function Get_StyleSheet: WideString; safecall;
    procedure Set_StyleSheet(const pName: WideString); safecall;
    procedure GetPaperMargins(out LowerLeft: OleVariant; out UpperRight: OleVariant); safecall;
    procedure GetPaperSize(out Width: Double; out Height: Double); safecall;
    function Get_PlotOrigin: OleVariant; safecall;
    procedure Set_PlotOrigin(pOrigin: OleVariant); safecall;
    procedure GetWindowToPlot(out LowerLeft: OleVariant; out UpperRight: OleVariant); safecall;
    procedure SetWindowToPlot(LowerLeft: OleVariant; UpperRight: OleVariant); safecall;
    function Get_PlotWithPlotStyles: WordBool; safecall;
    procedure Set_PlotWithPlotStyles(pStyles: WordBool); safecall;
    function Get_ModelType: WordBool; safecall;
    procedure CopyFrom(const pPlotConfig: IAcadPlotConfiguration); safecall;
    function GetCanonicalMediaNames: OleVariant; safecall;
    function GetPlotDeviceNames: OleVariant; safecall;
    function GetPlotStyleTableNames: OleVariant; safecall;
    procedure RefreshPlotDeviceInfo; safecall;
    function GetLocaleMediaName(const Name: WideString): WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property ConfigName: WideString read Get_ConfigName write Set_ConfigName;
    property CanonicalMediaName: WideString read Get_CanonicalMediaName write Set_CanonicalMediaName;
    property PaperUnits: AcPlotPaperUnits read Get_PaperUnits write Set_PaperUnits;
    property PlotViewportBorders: WordBool read Get_PlotViewportBorders write Set_PlotViewportBorders;
    property ShowPlotStyles: WordBool read Get_ShowPlotStyles write Set_ShowPlotStyles;
    property PlotRotation: AcPlotRotation read Get_PlotRotation write Set_PlotRotation;
    property CenterPlot: WordBool read Get_CenterPlot write Set_CenterPlot;
    property PlotHidden: WordBool read Get_PlotHidden write Set_PlotHidden;
    property PlotType: AcPlotType read Get_PlotType write Set_PlotType;
    property ViewToPlot: WideString read Get_ViewToPlot write Set_ViewToPlot;
    property UseStandardScale: WordBool read Get_UseStandardScale write Set_UseStandardScale;
    property StandardScale: AcPlotScale read Get_StandardScale write Set_StandardScale;
    property ScaleLineweights: WordBool read Get_ScaleLineweights write Set_ScaleLineweights;
    property PlotWithLineweights: WordBool read Get_PlotWithLineweights write Set_PlotWithLineweights;
    property PlotViewportsFirst: WordBool read Get_PlotViewportsFirst write Set_PlotViewportsFirst;
    property StyleSheet: WideString read Get_StyleSheet write Set_StyleSheet;
    property PlotOrigin: OleVariant read Get_PlotOrigin write Set_PlotOrigin;
    property PlotWithPlotStyles: WordBool read Get_PlotWithPlotStyles write Set_PlotWithPlotStyles;
    property ModelType: WordBool read Get_ModelType;
  end;

// *********************************************************************//
// DispIntf:  IAcadPlotConfigurationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B36D1E0-C5B2-4E3F-8304-877E5E0557C4}
// *********************************************************************//
  IAcadPlotConfigurationDisp = dispinterface
    ['{9B36D1E0-C5B2-4E3F-8304-877E5E0557C4}']
    property Name: WideString dispid 1;
    property ConfigName: WideString dispid 3;
    property CanonicalMediaName: WideString dispid 6;
    property PaperUnits: AcPlotPaperUnits dispid 7;
    property PlotViewportBorders: WordBool dispid 8;
    property ShowPlotStyles: WordBool dispid 9;
    property PlotRotation: AcPlotRotation dispid 10;
    property CenterPlot: WordBool dispid 11;
    property PlotHidden: WordBool dispid 12;
    property PlotType: AcPlotType dispid 13;
    property ViewToPlot: WideString dispid 14;
    property UseStandardScale: WordBool dispid 15;
    property StandardScale: AcPlotScale dispid 16;
    procedure GetCustomScale(out Numerator: Double; out Denominator: Double); dispid 17;
    procedure SetCustomScale(Numerator: Double; Denominator: Double); dispid 18;
    property ScaleLineweights: WordBool dispid 20;
    property PlotWithLineweights: WordBool dispid 21;
    property PlotViewportsFirst: WordBool dispid 24;
    property StyleSheet: WideString dispid 25;
    procedure GetPaperMargins(out LowerLeft: OleVariant; out UpperRight: OleVariant); dispid 26;
    procedure GetPaperSize(out Width: Double; out Height: Double); dispid 28;
    property PlotOrigin: OleVariant dispid 30;
    procedure GetWindowToPlot(out LowerLeft: OleVariant; out UpperRight: OleVariant); dispid 31;
    procedure SetWindowToPlot(LowerLeft: OleVariant; UpperRight: OleVariant); dispid 32;
    property PlotWithPlotStyles: WordBool dispid 33;
    property ModelType: WordBool readonly dispid 34;
    procedure CopyFrom(const pPlotConfig: IAcadPlotConfiguration); dispid 35;
    function GetCanonicalMediaNames: OleVariant; dispid 36;
    function GetPlotDeviceNames: OleVariant; dispid 37;
    function GetPlotStyleTableNames: OleVariant; dispid 38;
    procedure RefreshPlotDeviceInfo; dispid 39;
    function GetLocaleMediaName(const Name: WideString): WideString; dispid 40;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLayout
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B119218-2411-46DD-B7B9-17C8C009222C}
// *********************************************************************//
  IAcadLayout = interface(IAcadPlotConfiguration)
    ['{0B119218-2411-46DD-B7B9-17C8C009222C}']
    procedure GhostMethod_IAcadLayout_0_1; safecall;
    procedure GhostMethod_IAcadLayout_4_2; safecall;
    procedure GhostMethod_IAcadLayout_8_3; safecall;
    procedure GhostMethod_IAcadLayout_12_4; safecall;
    procedure GhostMethod_IAcadLayout_16_5; safecall;
    procedure GhostMethod_IAcadLayout_20_6; safecall;
    procedure GhostMethod_IAcadLayout_24_7; safecall;
    procedure GhostMethod_IAcadLayout_28_8; safecall;
    procedure GhostMethod_IAcadLayout_32_9; safecall;
    procedure GhostMethod_IAcadLayout_36_10; safecall;
    procedure GhostMethod_IAcadLayout_40_11; safecall;
    procedure GhostMethod_IAcadLayout_44_12; safecall;
    procedure GhostMethod_IAcadLayout_48_13; safecall;
    procedure GhostMethod_IAcadLayout_52_14; safecall;
    procedure GhostMethod_IAcadLayout_56_15; safecall;
    procedure GhostMethod_IAcadLayout_60_16; safecall;
    procedure GhostMethod_IAcadLayout_64_17; safecall;
    procedure GhostMethod_IAcadLayout_68_18; safecall;
    procedure GhostMethod_IAcadLayout_72_19; safecall;
    procedure GhostMethod_IAcadLayout_76_20; safecall;
    procedure GhostMethod_IAcadLayout_80_21; safecall;
    procedure GhostMethod_IAcadLayout_84_22; safecall;
    procedure GhostMethod_IAcadLayout_88_23; safecall;
    procedure GhostMethod_IAcadLayout_92_24; safecall;
    procedure GhostMethod_IAcadLayout_96_25; safecall;
    procedure GhostMethod_IAcadLayout_100_26; safecall;
    procedure GhostMethod_IAcadLayout_104_27; safecall;
    procedure GhostMethod_IAcadLayout_108_28; safecall;
    procedure GhostMethod_IAcadLayout_112_29; safecall;
    procedure GhostMethod_IAcadLayout_116_30; safecall;
    procedure GhostMethod_IAcadLayout_120_31; safecall;
    procedure GhostMethod_IAcadLayout_124_32; safecall;
    procedure GhostMethod_IAcadLayout_128_33; safecall;
    procedure GhostMethod_IAcadLayout_132_34; safecall;
    procedure GhostMethod_IAcadLayout_136_35; safecall;
    procedure GhostMethod_IAcadLayout_140_36; safecall;
    procedure GhostMethod_IAcadLayout_144_37; safecall;
    procedure GhostMethod_IAcadLayout_148_38; safecall;
    procedure GhostMethod_IAcadLayout_152_39; safecall;
    procedure GhostMethod_IAcadLayout_156_40; safecall;
    procedure GhostMethod_IAcadLayout_160_41; safecall;
    procedure GhostMethod_IAcadLayout_164_42; safecall;
    procedure GhostMethod_IAcadLayout_168_43; safecall;
    procedure GhostMethod_IAcadLayout_172_44; safecall;
    procedure GhostMethod_IAcadLayout_176_45; safecall;
    procedure GhostMethod_IAcadLayout_180_46; safecall;
    procedure GhostMethod_IAcadLayout_184_47; safecall;
    procedure GhostMethod_IAcadLayout_188_48; safecall;
    procedure GhostMethod_IAcadLayout_192_49; safecall;
    procedure GhostMethod_IAcadLayout_196_50; safecall;
    procedure GhostMethod_IAcadLayout_200_51; safecall;
    procedure GhostMethod_IAcadLayout_204_52; safecall;
    procedure GhostMethod_IAcadLayout_208_53; safecall;
    procedure GhostMethod_IAcadLayout_212_54; safecall;
    procedure GhostMethod_IAcadLayout_216_55; safecall;
    procedure GhostMethod_IAcadLayout_220_56; safecall;
    procedure GhostMethod_IAcadLayout_224_57; safecall;
    procedure GhostMethod_IAcadLayout_228_58; safecall;
    procedure GhostMethod_IAcadLayout_232_59; safecall;
    procedure GhostMethod_IAcadLayout_236_60; safecall;
    procedure GhostMethod_IAcadLayout_240_61; safecall;
    procedure GhostMethod_IAcadLayout_244_62; safecall;
    procedure GhostMethod_IAcadLayout_248_63; safecall;
    procedure GhostMethod_IAcadLayout_252_64; safecall;
    procedure GhostMethod_IAcadLayout_256_65; safecall;
    procedure GhostMethod_IAcadLayout_260_66; safecall;
    procedure GhostMethod_IAcadLayout_264_67; safecall;
    procedure GhostMethod_IAcadLayout_268_68; safecall;
    procedure GhostMethod_IAcadLayout_272_69; safecall;
    procedure GhostMethod_IAcadLayout_276_70; safecall;
    procedure GhostMethod_IAcadLayout_280_71; safecall;
    function Get_Block: IAcadBlock; safecall;
    function Get_TabOrder: Integer; safecall;
    procedure Set_TabOrder(pOrder: Integer); safecall;
    property Block: IAcadBlock read Get_Block;
    property TabOrder: Integer read Get_TabOrder write Set_TabOrder;
  end;

// *********************************************************************//
// DispIntf:  IAcadLayoutDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B119218-2411-46DD-B7B9-17C8C009222C}
// *********************************************************************//
  IAcadLayoutDisp = dispinterface
    ['{0B119218-2411-46DD-B7B9-17C8C009222C}']
    procedure GhostMethod_IAcadLayout_0_1; dispid 1610678272;
    procedure GhostMethod_IAcadLayout_4_2; dispid 1610678273;
    procedure GhostMethod_IAcadLayout_8_3; dispid 1610678274;
    procedure GhostMethod_IAcadLayout_12_4; dispid 1610678275;
    procedure GhostMethod_IAcadLayout_16_5; dispid 1610678276;
    procedure GhostMethod_IAcadLayout_20_6; dispid 1610678277;
    procedure GhostMethod_IAcadLayout_24_7; dispid 1610678278;
    procedure GhostMethod_IAcadLayout_28_8; dispid 1610678279;
    procedure GhostMethod_IAcadLayout_32_9; dispid 1610678280;
    procedure GhostMethod_IAcadLayout_36_10; dispid 1610678281;
    procedure GhostMethod_IAcadLayout_40_11; dispid 1610678282;
    procedure GhostMethod_IAcadLayout_44_12; dispid 1610678283;
    procedure GhostMethod_IAcadLayout_48_13; dispid 1610678284;
    procedure GhostMethod_IAcadLayout_52_14; dispid 1610678285;
    procedure GhostMethod_IAcadLayout_56_15; dispid 1610678286;
    procedure GhostMethod_IAcadLayout_60_16; dispid 1610678287;
    procedure GhostMethod_IAcadLayout_64_17; dispid 1610678288;
    procedure GhostMethod_IAcadLayout_68_18; dispid 1610678289;
    procedure GhostMethod_IAcadLayout_72_19; dispid 1610678290;
    procedure GhostMethod_IAcadLayout_76_20; dispid 1610678291;
    procedure GhostMethod_IAcadLayout_80_21; dispid 1610678292;
    procedure GhostMethod_IAcadLayout_84_22; dispid 1610678293;
    procedure GhostMethod_IAcadLayout_88_23; dispid 1610678294;
    procedure GhostMethod_IAcadLayout_92_24; dispid 1610678295;
    procedure GhostMethod_IAcadLayout_96_25; dispid 1610678296;
    procedure GhostMethod_IAcadLayout_100_26; dispid 1610678297;
    procedure GhostMethod_IAcadLayout_104_27; dispid 1610678298;
    procedure GhostMethod_IAcadLayout_108_28; dispid 1610678299;
    procedure GhostMethod_IAcadLayout_112_29; dispid 1610678300;
    procedure GhostMethod_IAcadLayout_116_30; dispid 1610678301;
    procedure GhostMethod_IAcadLayout_120_31; dispid 1610678302;
    procedure GhostMethod_IAcadLayout_124_32; dispid 1610678303;
    procedure GhostMethod_IAcadLayout_128_33; dispid 1610678304;
    procedure GhostMethod_IAcadLayout_132_34; dispid 1610678305;
    procedure GhostMethod_IAcadLayout_136_35; dispid 1610678306;
    procedure GhostMethod_IAcadLayout_140_36; dispid 1610678307;
    procedure GhostMethod_IAcadLayout_144_37; dispid 1610678308;
    procedure GhostMethod_IAcadLayout_148_38; dispid 1610678309;
    procedure GhostMethod_IAcadLayout_152_39; dispid 1610678310;
    procedure GhostMethod_IAcadLayout_156_40; dispid 1610678311;
    procedure GhostMethod_IAcadLayout_160_41; dispid 1610678312;
    procedure GhostMethod_IAcadLayout_164_42; dispid 1610678313;
    procedure GhostMethod_IAcadLayout_168_43; dispid 1610678314;
    procedure GhostMethod_IAcadLayout_172_44; dispid 1610678315;
    procedure GhostMethod_IAcadLayout_176_45; dispid 1610678316;
    procedure GhostMethod_IAcadLayout_180_46; dispid 1610678317;
    procedure GhostMethod_IAcadLayout_184_47; dispid 1610678318;
    procedure GhostMethod_IAcadLayout_188_48; dispid 1610678319;
    procedure GhostMethod_IAcadLayout_192_49; dispid 1610678320;
    procedure GhostMethod_IAcadLayout_196_50; dispid 1610678321;
    procedure GhostMethod_IAcadLayout_200_51; dispid 1610678322;
    procedure GhostMethod_IAcadLayout_204_52; dispid 1610678323;
    procedure GhostMethod_IAcadLayout_208_53; dispid 1610678324;
    procedure GhostMethod_IAcadLayout_212_54; dispid 1610678325;
    procedure GhostMethod_IAcadLayout_216_55; dispid 1610678326;
    procedure GhostMethod_IAcadLayout_220_56; dispid 1610678327;
    procedure GhostMethod_IAcadLayout_224_57; dispid 1610678328;
    procedure GhostMethod_IAcadLayout_228_58; dispid 1610678329;
    procedure GhostMethod_IAcadLayout_232_59; dispid 1610678330;
    procedure GhostMethod_IAcadLayout_236_60; dispid 1610678331;
    procedure GhostMethod_IAcadLayout_240_61; dispid 1610678332;
    procedure GhostMethod_IAcadLayout_244_62; dispid 1610678333;
    procedure GhostMethod_IAcadLayout_248_63; dispid 1610678334;
    procedure GhostMethod_IAcadLayout_252_64; dispid 1610678335;
    procedure GhostMethod_IAcadLayout_256_65; dispid 1610678336;
    procedure GhostMethod_IAcadLayout_260_66; dispid 1610678337;
    procedure GhostMethod_IAcadLayout_264_67; dispid 1610678338;
    procedure GhostMethod_IAcadLayout_268_68; dispid 1610678339;
    procedure GhostMethod_IAcadLayout_272_69; dispid 1610678340;
    procedure GhostMethod_IAcadLayout_276_70; dispid 1610678341;
    procedure GhostMethod_IAcadLayout_280_71; dispid 1610678342;
    property Block: IAcadBlock readonly dispid 48;
    property TabOrder: Integer dispid 49;
    property Name: WideString dispid 1;
    property ConfigName: WideString dispid 3;
    property CanonicalMediaName: WideString dispid 6;
    property PaperUnits: AcPlotPaperUnits dispid 7;
    property PlotViewportBorders: WordBool dispid 8;
    property ShowPlotStyles: WordBool dispid 9;
    property PlotRotation: AcPlotRotation dispid 10;
    property CenterPlot: WordBool dispid 11;
    property PlotHidden: WordBool dispid 12;
    property PlotType: AcPlotType dispid 13;
    property ViewToPlot: WideString dispid 14;
    property UseStandardScale: WordBool dispid 15;
    property StandardScale: AcPlotScale dispid 16;
    procedure GetCustomScale(out Numerator: Double; out Denominator: Double); dispid 17;
    procedure SetCustomScale(Numerator: Double; Denominator: Double); dispid 18;
    property ScaleLineweights: WordBool dispid 20;
    property PlotWithLineweights: WordBool dispid 21;
    property PlotViewportsFirst: WordBool dispid 24;
    property StyleSheet: WideString dispid 25;
    procedure GetPaperMargins(out LowerLeft: OleVariant; out UpperRight: OleVariant); dispid 26;
    procedure GetPaperSize(out Width: Double; out Height: Double); dispid 28;
    property PlotOrigin: OleVariant dispid 30;
    procedure GetWindowToPlot(out LowerLeft: OleVariant; out UpperRight: OleVariant); dispid 31;
    procedure SetWindowToPlot(LowerLeft: OleVariant; UpperRight: OleVariant); dispid 32;
    property PlotWithPlotStyles: WordBool dispid 33;
    property ModelType: WordBool readonly dispid 34;
    procedure CopyFrom(const pPlotConfig: IAcadPlotConfiguration); dispid 35;
    function GetCanonicalMediaNames: OleVariant; dispid 36;
    function GetPlotDeviceNames: OleVariant; dispid 37;
    function GetPlotStyleTableNames: OleVariant; dispid 38;
    procedure RefreshPlotDeviceInfo; dispid 39;
    function GetLocaleMediaName(const Name: WideString): WideString; dispid 40;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadMInsertBlock
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B56D093D-6BEA-4B50-A15B-34A3D5DFFFA0}
// *********************************************************************//
  IAcadMInsertBlock = interface(IAcadBlockReference)
    ['{B56D093D-6BEA-4B50-A15B-34A3D5DFFFA0}']
    procedure Set_Columns(NumColumns: Integer); safecall;
    function Get_Columns: Integer; safecall;
    procedure Set_ColumnSpacing(Spacing: Double); safecall;
    function Get_ColumnSpacing: Double; safecall;
    procedure Set_Rows(NumRows: Integer); safecall;
    function Get_Rows: Integer; safecall;
    procedure Set_RowSpacing(Spacing: Double); safecall;
    function Get_RowSpacing: Double; safecall;
    property Columns: Integer read Get_Columns write Set_Columns;
    property ColumnSpacing: Double read Get_ColumnSpacing write Set_ColumnSpacing;
    property Rows: Integer read Get_Rows write Set_Rows;
    property RowSpacing: Double read Get_RowSpacing write Set_RowSpacing;
  end;

// *********************************************************************//
// DispIntf:  IAcadMInsertBlockDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B56D093D-6BEA-4B50-A15B-34A3D5DFFFA0}
// *********************************************************************//
  IAcadMInsertBlockDisp = dispinterface
    ['{B56D093D-6BEA-4B50-A15B-34A3D5DFFFA0}']
    property Columns: Integer dispid 256;
    property ColumnSpacing: Double dispid 257;
    property Rows: Integer dispid 258;
    property RowSpacing: Double dispid 259;
    property InsertionPoint: OleVariant dispid 1;
    property Name: WideString dispid 2;
    property Normal: OleVariant dispid 3;
    property Rotation: ACAD_ANGLE dispid 4;
    property XScaleFactor: ACAD_NOUNITS dispid 5;
    property YScaleFactor: ACAD_NOUNITS dispid 6;
    property ZScaleFactor: ACAD_NOUNITS dispid 7;
    function Explode: OleVariant; dispid 8;
    function GetAttributes: OleVariant; dispid 9;
    function GetConstantAttributes: OleVariant; dispid 10;
    property HasAttributes: WordBool readonly dispid 11;
    property EffectiveName: WideString readonly dispid 512;
    property IsDynamicBlock: WordBool readonly dispid 513;
    function GetDynamicBlockProperties: OleVariant; dispid 514;
    procedure ResetBlock; dispid 515;
    procedure ConvertToAnonymousBlock; dispid 516;
    procedure ConvertToStaticBlock(const newBlockName: WideString); dispid 517;
    property XEffectiveScaleFactor: ACAD_NOUNITS dispid 518;
    property YEffectiveScaleFactor: ACAD_NOUNITS dispid 519;
    property ZEffectiveScaleFactor: ACAD_NOUNITS dispid 520;
    property InsUnits: WideString readonly dispid 521;
    property InsUnitsFactor: Double readonly dispid 528;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPolyfaceMesh
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {60A35C35-64B5-4751-99E7-259879896519}
// *********************************************************************//
  IAcadPolyfaceMesh = interface(IAcadEntity)
    ['{60A35C35-64B5-4751-99E7-259879896519}']
    procedure Set_Coordinates(Vertices: OleVariant); safecall;
    function Get_Coordinates: OleVariant; safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    function Get_NumberOfVertices: Integer; safecall;
    function Get_NumberOfFaces: Integer; safecall;
    procedure Set_Faces(Param1: OleVariant); safecall;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property NumberOfVertices: Integer read Get_NumberOfVertices;
    property NumberOfFaces: Integer read Get_NumberOfFaces;
    property Faces: OleVariant write Set_Faces;
  end;

// *********************************************************************//
// DispIntf:  IAcadPolyfaceMeshDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {60A35C35-64B5-4751-99E7-259879896519}
// *********************************************************************//
  IAcadPolyfaceMeshDisp = dispinterface
    ['{60A35C35-64B5-4751-99E7-259879896519}']
    property Coordinates: OleVariant dispid 1;
    property Coordinate[Index: SYSINT]: OleVariant dispid 2;
    property NumberOfVertices: Integer readonly dispid 3;
    property NumberOfFaces: Integer readonly dispid 4;
    property Faces: OleVariant writeonly dispid 80;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadMLine
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61C46C50-B9BB-4B8E-9B10-E7AAABA3012B}
// *********************************************************************//
  IAcadMLine = interface(IAcadEntity)
    ['{61C46C50-B9BB-4B8E-9B10-E7AAABA3012B}']
    function Get_StyleName: WideString; safecall;
    function Get_Coordinates: OleVariant; safecall;
    procedure Set_Coordinates(Vertices: OleVariant); safecall;
    function Get_Justification: AcMLineJustification; safecall;
    procedure Set_Justification(Justification: AcMLineJustification); safecall;
    function Get_MLineScale: Double; safecall;
    procedure Set_MLineScale(scale: Double); safecall;
    property StyleName: WideString read Get_StyleName;
    property Coordinates: OleVariant read Get_Coordinates write Set_Coordinates;
    property Justification: AcMLineJustification read Get_Justification write Set_Justification;
    property MLineScale: Double read Get_MLineScale write Set_MLineScale;
  end;

// *********************************************************************//
// DispIntf:  IAcadMLineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61C46C50-B9BB-4B8E-9B10-E7AAABA3012B}
// *********************************************************************//
  IAcadMLineDisp = dispinterface
    ['{61C46C50-B9BB-4B8E-9B10-E7AAABA3012B}']
    property StyleName: WideString readonly dispid 1;
    property Coordinates: OleVariant dispid 2;
    property Justification: AcMLineJustification dispid 3;
    property MLineScale: Double dispid 4;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDim3PointAngular
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA16BE7C-0789-43DE-B371-8082AE3FA99A}
// *********************************************************************//
  IAcadDim3PointAngular = interface(IAcadDimension)
    ['{BA16BE7C-0789-43DE-B371-8082AE3FA99A}']
    function Get_ExtLine1EndPoint: OleVariant; safecall;
    procedure Set_ExtLine1EndPoint(xLine1Point: OleVariant); safecall;
    function Get_ExtLine2EndPoint: OleVariant; safecall;
    procedure Set_ExtLine2EndPoint(xLine2Point: OleVariant); safecall;
    function Get_AngleVertex: OleVariant; safecall;
    procedure Set_AngleVertex(AngleVertex: OleVariant); safecall;
    function Get_TextPrecision: AcDimPrecision; safecall;
    procedure Set_TextPrecision(AngleVertex: AcDimPrecision); safecall;
    function Get_AngleFormat: AcAngleUnits; safecall;
    procedure Set_AngleFormat(format: AcAngleUnits); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineExtend: Double; safecall;
    procedure Set_ExtensionLineExtend(extend: Double); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_HorizontalTextPosition: AcDimHorizontalJustification; safecall;
    procedure Set_HorizontalTextPosition(Type_: AcDimHorizontalJustification); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine1Suppress: WordBool; safecall;
    procedure Set_ExtLine1Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine2Suppress: WordBool; safecall;
    procedure Set_ExtLine2Suppress(bSuppress: WordBool); safecall;
    function Get_DimLineInside: WordBool; safecall;
    procedure Set_DimLineInside(bInside: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: ACAD_ANGLE; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    function Get_ExtLine1Linetype: WideString; safecall;
    procedure Set_ExtLine1Linetype(const Linetype: WideString); safecall;
    function Get_ExtLine2Linetype: WideString; safecall;
    procedure Set_ExtLine2Linetype(const Linetype: WideString); safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property ExtLine1EndPoint: OleVariant read Get_ExtLine1EndPoint write Set_ExtLine1EndPoint;
    property ExtLine2EndPoint: OleVariant read Get_ExtLine2EndPoint write Set_ExtLine2EndPoint;
    property AngleVertex: OleVariant read Get_AngleVertex write Set_AngleVertex;
    property TextPrecision: AcDimPrecision read Get_TextPrecision write Set_TextPrecision;
    property AngleFormat: AcAngleUnits read Get_AngleFormat write Set_AngleFormat;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property ExtensionLineExtend: Double read Get_ExtensionLineExtend write Set_ExtensionLineExtend;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property HorizontalTextPosition: AcDimHorizontalJustification read Get_HorizontalTextPosition write Set_HorizontalTextPosition;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property ExtLine1Suppress: WordBool read Get_ExtLine1Suppress write Set_ExtLine1Suppress;
    property ExtLine2Suppress: WordBool read Get_ExtLine2Suppress write Set_ExtLine2Suppress;
    property DimLineInside: WordBool read Get_DimLineInside write Set_DimLineInside;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: ACAD_ANGLE read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
    property ExtLine1Linetype: WideString read Get_ExtLine1Linetype write Set_ExtLine1Linetype;
    property ExtLine2Linetype: WideString read Get_ExtLine2Linetype write Set_ExtLine2Linetype;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDim3PointAngularDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA16BE7C-0789-43DE-B371-8082AE3FA99A}
// *********************************************************************//
  IAcadDim3PointAngularDisp = dispinterface
    ['{BA16BE7C-0789-43DE-B371-8082AE3FA99A}']
    property ExtLine1EndPoint: OleVariant dispid 38;
    property ExtLine2EndPoint: OleVariant dispid 40;
    property AngleVertex: OleVariant dispid 45;
    property TextPrecision: AcDimPrecision dispid 36;
    property AngleFormat: AcAngleUnits dispid 41;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property ExtensionLineExtend: Double dispid 17;
    property Fit: AcDimFit dispid 18;
    property HorizontalTextPosition: AcDimHorizontalJustification dispid 20;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property ExtLine1Suppress: WordBool dispid 27;
    property ExtLine2Suppress: WordBool dispid 28;
    property DimLineInside: WordBool dispid 29;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property ExtensionLineOffset: Double dispid 35;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: ACAD_ANGLE readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property DimensionLinetype: WideString dispid 80;
    property ExtLine1Linetype: WideString dispid 81;
    property ExtLine2Linetype: WideString dispid 82;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadExternalReference
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {170C3BB6-7A0C-41DE-9872-7BDD7DD1174D}
// *********************************************************************//
  IAcadExternalReference = interface(IAcadBlockReference)
    ['{170C3BB6-7A0C-41DE-9872-7BDD7DD1174D}']
    function Get_Path: WideString; safecall;
    procedure Set_Path(const bstrName: WideString); safecall;
    property Path: WideString read Get_Path write Set_Path;
  end;

// *********************************************************************//
// DispIntf:  IAcadExternalReferenceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {170C3BB6-7A0C-41DE-9872-7BDD7DD1174D}
// *********************************************************************//
  IAcadExternalReferenceDisp = dispinterface
    ['{170C3BB6-7A0C-41DE-9872-7BDD7DD1174D}']
    property Path: WideString dispid 256;
    property InsertionPoint: OleVariant dispid 1;
    property Name: WideString dispid 2;
    property Normal: OleVariant dispid 3;
    property Rotation: ACAD_ANGLE dispid 4;
    property XScaleFactor: ACAD_NOUNITS dispid 5;
    property YScaleFactor: ACAD_NOUNITS dispid 6;
    property ZScaleFactor: ACAD_NOUNITS dispid 7;
    function Explode: OleVariant; dispid 8;
    function GetAttributes: OleVariant; dispid 9;
    function GetConstantAttributes: OleVariant; dispid 10;
    property HasAttributes: WordBool readonly dispid 11;
    property EffectiveName: WideString readonly dispid 512;
    property IsDynamicBlock: WordBool readonly dispid 513;
    function GetDynamicBlockProperties: OleVariant; dispid 514;
    procedure ResetBlock; dispid 515;
    procedure ConvertToAnonymousBlock; dispid 516;
    procedure ConvertToStaticBlock(const newBlockName: WideString); dispid 517;
    property XEffectiveScaleFactor: ACAD_NOUNITS dispid 518;
    property YEffectiveScaleFactor: ACAD_NOUNITS dispid 519;
    property ZEffectiveScaleFactor: ACAD_NOUNITS dispid 520;
    property InsUnits: WideString readonly dispid 521;
    property InsUnitsFactor: Double readonly dispid 528;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadTable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {187D4409-BABE-43D8-8379-2AF11136DA16}
// *********************************************************************//
  IAcadTable = interface(IAcadEntity)
    ['{187D4409-BABE-43D8-8379-2AF11136DA16}']
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const bstrName: WideString); safecall;
    function Get_Rows: SYSINT; safecall;
    procedure Set_Rows(pRows: SYSINT); safecall;
    function Get_Columns: SYSINT; safecall;
    procedure Set_Columns(pColumns: SYSINT); safecall;
    function Get_FlowDirection: AcTableDirection; safecall;
    procedure Set_FlowDirection(pFlow: AcTableDirection); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(pWidth: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(pHeight: Double); safecall;
    function Get_VertCellMargin: Double; safecall;
    procedure Set_VertCellMargin(pGap: Double); safecall;
    function Get_HorzCellMargin: Double; safecall;
    procedure Set_HorzCellMargin(pGap: Double); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function GetColumnWidth(col: SYSINT): Double; safecall;
    procedure SetColumnWidth(col: SYSINT; Width: Double); safecall;
    procedure Set_ColumnWidth(Param1: Double); safecall;
    function GetRowHeight(row: SYSINT): Double; safecall;
    procedure SetRowHeight(row: SYSINT; Height: Double); safecall;
    procedure Set_RowHeight(Param1: Double); safecall;
    function GetMinimumColumnWidth(col: SYSINT): Double; safecall;
    function GetMinimumRowHeight(row: SYSINT): Double; safecall;
    function Get_MinimumTableWidth: Double; safecall;
    function Get_MinimumTableHeight: Double; safecall;
    function Get_Direction: OleVariant; safecall;
    procedure Set_Direction(DirectionVector: OleVariant); safecall;
    function Get_TitleSuppressed: WordBool; safecall;
    procedure Set_TitleSuppressed(bValue: WordBool); safecall;
    function Get_HeaderSuppressed: WordBool; safecall;
    procedure Set_HeaderSuppressed(bValue: WordBool); safecall;
    function GetAlignment(rowType: AcRowType): AcCellAlignment; safecall;
    procedure SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment); safecall;
    function GetBackgroundColorNone(rowType: AcRowType): WordBool; safecall;
    procedure SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool); safecall;
    function GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetContentColor(rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetContentColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetTextStyle(rowType: AcRowType): WideString; safecall;
    procedure SetTextStyle(rowTypes: SYSINT; const bstrName: WideString); safecall;
    function GetTextHeight(rowType: AcRowType): Double; safecall;
    procedure SetTextHeight(rowTypes: SYSINT; TextHeight: Double); safecall;
    function GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT; safecall;
    procedure SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; Lineweight: ACAD_LWEIGHT); safecall;
    function GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool; safecall;
    procedure SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; bValue: WordBool); safecall;
    function Get_TableStyleOverrides: OleVariant; safecall;
    procedure ClearTableStyleOverrides(flag: SYSINT); safecall;
    function GetCellType(row: SYSINT; col: SYSINT): AcCellType; safecall;
    procedure SetCellType(row: SYSINT; col: SYSINT; CellType: AcCellType); safecall;
    function GetCellExtents(row: SYSINT; col: SYSINT; bOuterCell: WordBool): OleVariant; safecall;
    function GetAttachmentPoint(row: SYSINT; col: SYSINT): OleVariant; safecall;
    function GetCellAlignment(row: SYSINT; col: SYSINT): AcCellAlignment; safecall;
    procedure SetCellAlignment(row: SYSINT; col: SYSINT; cellAlignment: AcCellAlignment); safecall;
    function GetCellBackgroundColorNone(row: SYSINT; col: SYSINT): WordBool; safecall;
    procedure SetCellBackgroundColorNone(row: SYSINT; col: SYSINT; var bValue: WordBool); safecall;
    function GetCellBackgroundColor(row: SYSINT; col: SYSINT): IAcadAcCmColor; safecall;
    procedure SetCellBackgroundColor(row: SYSINT; col: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetCellContentColor(row: SYSINT; col: SYSINT): IAcadAcCmColor; safecall;
    procedure SetCellContentColor(row: SYSINT; col: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetCellStyleOverrides(row: SYSINT; col: SYSINT): OleVariant; safecall;
    procedure DeleteCellContent(row: SYSINT; col: SYSINT); safecall;
    function GetRowType(row: SYSINT): AcRowType; safecall;
    function GetText(row: SYSINT; col: SYSINT): WideString; safecall;
    procedure SetText(row: SYSINT; col: SYSINT; const pStr: WideString); safecall;
    function GetCellTextStyle(row: SYSINT; col: SYSINT): WideString; safecall;
    procedure SetCellTextStyle(row: SYSINT; col: SYSINT; const bstrName: WideString); safecall;
    function GetCellTextHeight(row: SYSINT; col: SYSINT): Double; safecall;
    procedure SetCellTextHeight(row: SYSINT; col: SYSINT; TextHeight: Double); safecall;
    function GetTextRotation(row: SYSINT; col: SYSINT): AcRotationAngle; safecall;
    procedure SetTextRotation(row: SYSINT; col: SYSINT; TextRotation: AcRotationAngle); safecall;
    function GetAutoScale(row: SYSINT; col: SYSINT): WordBool; safecall;
    procedure SetAutoScale(row: SYSINT; col: SYSINT; var bValue: WordBool); safecall;
    function GetBlockTableRecordId(row: SYSINT; col: SYSINT): Integer; safecall;
    procedure SetBlockTableRecordId(row: SYSINT; col: SYSINT; blkId: Integer; bAutoFit: WordBool); safecall;
    function GetBlockScale(row: SYSINT; col: SYSINT): Double; safecall;
    procedure SetBlockScale(row: SYSINT; col: SYSINT; blkScale: Double); safecall;
    function GetBlockRotation(row: SYSINT; col: SYSINT): Double; safecall;
    procedure SetBlockRotation(row: SYSINT; col: SYSINT; blkRotation: Double); safecall;
    function GetBlockAttributeValue(row: SYSINT; col: SYSINT; attdefId: Integer): WideString; safecall;
    procedure SetBlockAttributeValue(row: SYSINT; col: SYSINT; attdefId: Integer; 
                                     const bstrValue: WideString); safecall;
    function GetCellGridLineWeight(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): ACAD_LWEIGHT; safecall;
    procedure SetCellGridLineWeight(row: SYSINT; col: SYSINT; edges: SYSINT; 
                                    Lineweight: ACAD_LWEIGHT); safecall;
    function GetCellGridColor(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): IAcadAcCmColor; safecall;
    procedure SetCellGridColor(row: SYSINT; col: SYSINT; edges: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetCellGridVisibility(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): WordBool; safecall;
    procedure SetCellGridVisibility(row: SYSINT; col: SYSINT; edges: SYSINT; bValue: WordBool); safecall;
    procedure InsertColumns(col: SYSINT; Width: Double; cols: SYSINT); safecall;
    procedure DeleteColumns(col: SYSINT; cols: SYSINT); safecall;
    procedure InsertRows(row: SYSINT; Height: Double; Rows: SYSINT); safecall;
    procedure DeleteRows(row: SYSINT; Rows: SYSINT); safecall;
    procedure MergeCells(minRow: SYSINT; maxRow: SYSINT; minCol: SYSINT; maxCol: SYSINT); safecall;
    procedure UnmergeCells(minRow: SYSINT; maxRow: SYSINT; minCol: SYSINT; maxCol: SYSINT); safecall;
    function IsMergedCell(row: SYSINT; col: SYSINT; out minRow: SYSINT; out maxRow: SYSINT; 
                          out minCol: SYSINT; out maxCol: SYSINT): WordBool; safecall;
    function GetFieldId(row: SYSINT; col: SYSINT): Integer; safecall;
    procedure SetFieldId(row: SYSINT; col: SYSINT; fieldId: Integer); safecall;
    procedure GenerateLayout; safecall;
    procedure RecomputeTableBlock(bForceUpdate: WordBool); safecall;
    function HitTest(wpt: OleVariant; wviewVec: OleVariant; out resultRowIndex: SYSINT; 
                     out resultColumnIndex: SYSINT): WordBool; safecall;
    procedure Select(wpt: OleVariant; wvwVec: OleVariant; wvwxVec: OleVariant; wxaper: Double; 
                     wyaper: Double; allowOutside: WordBool; out resultRowIndex: SYSINT; 
                     out resultColumnIndex: SYSINT); safecall;
    procedure SelectSubRegion(wpt1: OleVariant; wpt2: OleVariant; wvwVec: OleVariant; 
                              wvwxVec: OleVariant; seltype: AcSelectType; 
                              bIncludeCurrentSelection: WordBool; out rowMin: SYSINT; 
                              out rowMax: SYSINT; out colMin: SYSINT; out colMax: SYSINT); safecall;
    procedure ReselectSubRegion; safecall;
    procedure GetSubSelection(out rowMin: SYSINT; out rowMax: SYSINT; out colMin: SYSINT; 
                              out colMax: SYSINT); safecall;
    procedure SetSubSelection(rowMin: SYSINT; rowMax: SYSINT; colMin: SYSINT; colMax: SYSINT); safecall;
    procedure ClearSubSelection; safecall;
    function Get_HasSubSelection: WordBool; safecall;
    function Get_RegenerateTableSuppressed: WordBool; safecall;
    procedure Set_RegenerateTableSuppressed(bValue: WordBool); safecall;
    procedure GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                          out pUnitType: AcValueUnitType); safecall;
    procedure SetDataType(rowTypes: SYSINT; dataType: AcValueDataType; unitType: AcValueUnitType); safecall;
    function GetFormat(rowType: AcRowType): WideString; safecall;
    procedure SetFormat(rowTypes: SYSINT; const pFormat: WideString); safecall;
    procedure FormatValue(row: SYSINT; col: SYSINT; nOption: AcFormatOption; var pVal: WideString); safecall;
    procedure GetCellDataType(row: SYSINT; col: SYSINT; out pDataType: AcValueDataType; 
                              out pUnitType: AcValueUnitType); safecall;
    procedure SetCellDataType(row: SYSINT; col: SYSINT; dataType: AcValueDataType; 
                              unitType: AcValueUnitType); safecall;
    function GetCellFormat(row: SYSINT; col: SYSINT): WideString; safecall;
    procedure SetCellFormat(row: SYSINT; col: SYSINT; const pFormat: WideString); safecall;
    function GetCellValue(row: SYSINT; col: SYSINT): OleVariant; safecall;
    procedure SetCellValue(row: SYSINT; col: SYSINT; val: OleVariant); safecall;
    procedure SetCellValueFromText(row: SYSINT; col: SYSINT; const val: WideString; 
                                   nOption: AcParseOption); safecall;
    procedure ResetCellValue(row: SYSINT; col: SYSINT); safecall;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property Rows: SYSINT read Get_Rows write Set_Rows;
    property Columns: SYSINT read Get_Columns write Set_Columns;
    property FlowDirection: AcTableDirection read Get_FlowDirection write Set_FlowDirection;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property VertCellMargin: Double read Get_VertCellMargin write Set_VertCellMargin;
    property HorzCellMargin: Double read Get_HorzCellMargin write Set_HorzCellMargin;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property ColumnWidth: Double write Set_ColumnWidth;
    property RowHeight: Double write Set_RowHeight;
    property MinimumTableWidth: Double read Get_MinimumTableWidth;
    property MinimumTableHeight: Double read Get_MinimumTableHeight;
    property Direction: OleVariant read Get_Direction write Set_Direction;
    property TitleSuppressed: WordBool read Get_TitleSuppressed write Set_TitleSuppressed;
    property HeaderSuppressed: WordBool read Get_HeaderSuppressed write Set_HeaderSuppressed;
    property TableStyleOverrides: OleVariant read Get_TableStyleOverrides;
    property HasSubSelection: WordBool read Get_HasSubSelection;
    property RegenerateTableSuppressed: WordBool read Get_RegenerateTableSuppressed write Set_RegenerateTableSuppressed;
  end;

// *********************************************************************//
// DispIntf:  IAcadTableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {187D4409-BABE-43D8-8379-2AF11136DA16}
// *********************************************************************//
  IAcadTableDisp = dispinterface
    ['{187D4409-BABE-43D8-8379-2AF11136DA16}']
    property StyleName: WideString dispid 1;
    property Rows: SYSINT dispid 2;
    property Columns: SYSINT dispid 3;
    property FlowDirection: AcTableDirection dispid 4;
    property Width: Double dispid 5;
    property Height: Double dispid 6;
    property VertCellMargin: Double dispid 7;
    property HorzCellMargin: Double dispid 8;
    property InsertionPoint: OleVariant dispid 9;
    function GetColumnWidth(col: SYSINT): Double; dispid 10;
    procedure SetColumnWidth(col: SYSINT; Width: Double); dispid 11;
    property ColumnWidth: Double writeonly dispid 12;
    function GetRowHeight(row: SYSINT): Double; dispid 13;
    procedure SetRowHeight(row: SYSINT; Height: Double); dispid 14;
    property RowHeight: Double writeonly dispid 15;
    function GetMinimumColumnWidth(col: SYSINT): Double; dispid 26;
    function GetMinimumRowHeight(row: SYSINT): Double; dispid 27;
    property MinimumTableWidth: Double readonly dispid 28;
    property MinimumTableHeight: Double readonly dispid 29;
    property Direction: OleVariant dispid 30;
    property TitleSuppressed: WordBool dispid 31;
    property HeaderSuppressed: WordBool dispid 32;
    function GetAlignment(rowType: AcRowType): AcCellAlignment; dispid 33;
    procedure SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment); dispid 34;
    function GetBackgroundColorNone(rowType: AcRowType): WordBool; dispid 35;
    procedure SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool); dispid 36;
    function GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor; dispid 37;
    procedure SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 38;
    function GetContentColor(rowType: AcRowType): IAcadAcCmColor; dispid 39;
    procedure SetContentColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 40;
    function GetTextStyle(rowType: AcRowType): WideString; dispid 41;
    procedure SetTextStyle(rowTypes: SYSINT; const bstrName: WideString); dispid 42;
    function GetTextHeight(rowType: AcRowType): Double; dispid 43;
    procedure SetTextHeight(rowTypes: SYSINT; TextHeight: Double); dispid 44;
    function GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT; dispid 45;
    procedure SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; Lineweight: ACAD_LWEIGHT); dispid 46;
    function GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor; dispid 47;
    procedure SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 48;
    function GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool; dispid 49;
    procedure SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; bValue: WordBool); dispid 50;
    property TableStyleOverrides: OleVariant readonly dispid 51;
    procedure ClearTableStyleOverrides(flag: SYSINT); dispid 52;
    function GetCellType(row: SYSINT; col: SYSINT): AcCellType; dispid 53;
    procedure SetCellType(row: SYSINT; col: SYSINT; CellType: AcCellType); dispid 54;
    function GetCellExtents(row: SYSINT; col: SYSINT; bOuterCell: WordBool): OleVariant; dispid 55;
    function GetAttachmentPoint(row: SYSINT; col: SYSINT): OleVariant; dispid 56;
    function GetCellAlignment(row: SYSINT; col: SYSINT): AcCellAlignment; dispid 58;
    procedure SetCellAlignment(row: SYSINT; col: SYSINT; cellAlignment: AcCellAlignment); dispid 59;
    function GetCellBackgroundColorNone(row: SYSINT; col: SYSINT): WordBool; dispid 60;
    procedure SetCellBackgroundColorNone(row: SYSINT; col: SYSINT; var bValue: WordBool); dispid 61;
    function GetCellBackgroundColor(row: SYSINT; col: SYSINT): IAcadAcCmColor; dispid 62;
    procedure SetCellBackgroundColor(row: SYSINT; col: SYSINT; const pColor: IAcadAcCmColor); dispid 63;
    function GetCellContentColor(row: SYSINT; col: SYSINT): IAcadAcCmColor; dispid 64;
    procedure SetCellContentColor(row: SYSINT; col: SYSINT; const pColor: IAcadAcCmColor); dispid 65;
    function GetCellStyleOverrides(row: SYSINT; col: SYSINT): OleVariant; dispid 66;
    procedure DeleteCellContent(row: SYSINT; col: SYSINT); dispid 67;
    function GetRowType(row: SYSINT): AcRowType; dispid 68;
    function GetText(row: SYSINT; col: SYSINT): WideString; dispid 69;
    procedure SetText(row: SYSINT; col: SYSINT; const pStr: WideString); dispid 70;
    function GetCellTextStyle(row: SYSINT; col: SYSINT): WideString; dispid 71;
    procedure SetCellTextStyle(row: SYSINT; col: SYSINT; const bstrName: WideString); dispid 72;
    function GetCellTextHeight(row: SYSINT; col: SYSINT): Double; dispid 73;
    procedure SetCellTextHeight(row: SYSINT; col: SYSINT; TextHeight: Double); dispid 74;
    function GetTextRotation(row: SYSINT; col: SYSINT): AcRotationAngle; dispid 75;
    procedure SetTextRotation(row: SYSINT; col: SYSINT; TextRotation: AcRotationAngle); dispid 76;
    function GetAutoScale(row: SYSINT; col: SYSINT): WordBool; dispid 77;
    procedure SetAutoScale(row: SYSINT; col: SYSINT; var bValue: WordBool); dispid 78;
    function GetBlockTableRecordId(row: SYSINT; col: SYSINT): Integer; dispid 79;
    procedure SetBlockTableRecordId(row: SYSINT; col: SYSINT; blkId: Integer; bAutoFit: WordBool); dispid 80;
    function GetBlockScale(row: SYSINT; col: SYSINT): Double; dispid 81;
    procedure SetBlockScale(row: SYSINT; col: SYSINT; blkScale: Double); dispid 82;
    function GetBlockRotation(row: SYSINT; col: SYSINT): Double; dispid 83;
    procedure SetBlockRotation(row: SYSINT; col: SYSINT; blkRotation: Double); dispid 84;
    function GetBlockAttributeValue(row: SYSINT; col: SYSINT; attdefId: Integer): WideString; dispid 112;
    procedure SetBlockAttributeValue(row: SYSINT; col: SYSINT; attdefId: Integer; 
                                     const bstrValue: WideString); dispid 113;
    function GetCellGridLineWeight(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): ACAD_LWEIGHT; dispid 85;
    procedure SetCellGridLineWeight(row: SYSINT; col: SYSINT; edges: SYSINT; 
                                    Lineweight: ACAD_LWEIGHT); dispid 86;
    function GetCellGridColor(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): IAcadAcCmColor; dispid 87;
    procedure SetCellGridColor(row: SYSINT; col: SYSINT; edges: SYSINT; const pColor: IAcadAcCmColor); dispid 88;
    function GetCellGridVisibility(row: SYSINT; col: SYSINT; edge: AcCellEdgeMask): WordBool; dispid 89;
    procedure SetCellGridVisibility(row: SYSINT; col: SYSINT; edges: SYSINT; bValue: WordBool); dispid 90;
    procedure InsertColumns(col: SYSINT; Width: Double; cols: SYSINT); dispid 95;
    procedure DeleteColumns(col: SYSINT; cols: SYSINT); dispid 96;
    procedure InsertRows(row: SYSINT; Height: Double; Rows: SYSINT); dispid 97;
    procedure DeleteRows(row: SYSINT; Rows: SYSINT); dispid 98;
    procedure MergeCells(minRow: SYSINT; maxRow: SYSINT; minCol: SYSINT; maxCol: SYSINT); dispid 99;
    procedure UnmergeCells(minRow: SYSINT; maxRow: SYSINT; minCol: SYSINT; maxCol: SYSINT); dispid 100;
    function IsMergedCell(row: SYSINT; col: SYSINT; out minRow: SYSINT; out maxRow: SYSINT; 
                          out minCol: SYSINT; out maxCol: SYSINT): WordBool; dispid 101;
    function GetFieldId(row: SYSINT; col: SYSINT): Integer; dispid 114;
    procedure SetFieldId(row: SYSINT; col: SYSINT; fieldId: Integer); dispid 115;
    procedure GenerateLayout; dispid 102;
    procedure RecomputeTableBlock(bForceUpdate: WordBool); dispid 103;
    function HitTest(wpt: OleVariant; wviewVec: OleVariant; out resultRowIndex: SYSINT; 
                     out resultColumnIndex: SYSINT): WordBool; dispid 104;
    procedure Select(wpt: OleVariant; wvwVec: OleVariant; wvwxVec: OleVariant; wxaper: Double; 
                     wyaper: Double; allowOutside: WordBool; out resultRowIndex: SYSINT; 
                     out resultColumnIndex: SYSINT); dispid 105;
    procedure SelectSubRegion(wpt1: OleVariant; wpt2: OleVariant; wvwVec: OleVariant; 
                              wvwxVec: OleVariant; seltype: AcSelectType; 
                              bIncludeCurrentSelection: WordBool; out rowMin: SYSINT; 
                              out rowMax: SYSINT; out colMin: SYSINT; out colMax: SYSINT); dispid 106;
    procedure ReselectSubRegion; dispid 107;
    procedure GetSubSelection(out rowMin: SYSINT; out rowMax: SYSINT; out colMin: SYSINT; 
                              out colMax: SYSINT); dispid 108;
    procedure SetSubSelection(rowMin: SYSINT; rowMax: SYSINT; colMin: SYSINT; colMax: SYSINT); dispid 109;
    procedure ClearSubSelection; dispid 110;
    property HasSubSelection: WordBool readonly dispid 111;
    property RegenerateTableSuppressed: WordBool dispid 116;
    procedure GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                          out pUnitType: AcValueUnitType); dispid 117;
    procedure SetDataType(rowTypes: SYSINT; dataType: AcValueDataType; unitType: AcValueUnitType); dispid 118;
    function GetFormat(rowType: AcRowType): WideString; dispid 119;
    procedure SetFormat(rowTypes: SYSINT; const pFormat: WideString); dispid 120;
    procedure FormatValue(row: SYSINT; col: SYSINT; nOption: AcFormatOption; var pVal: WideString); dispid 121;
    procedure GetCellDataType(row: SYSINT; col: SYSINT; out pDataType: AcValueDataType; 
                              out pUnitType: AcValueUnitType); dispid 1946;
    procedure SetCellDataType(row: SYSINT; col: SYSINT; dataType: AcValueDataType; 
                              unitType: AcValueUnitType); dispid 1947;
    function GetCellFormat(row: SYSINT; col: SYSINT): WideString; dispid 1948;
    procedure SetCellFormat(row: SYSINT; col: SYSINT; const pFormat: WideString); dispid 1949;
    function GetCellValue(row: SYSINT; col: SYSINT): OleVariant; dispid 1950;
    procedure SetCellValue(row: SYSINT; col: SYSINT; val: OleVariant); dispid 1951;
    procedure SetCellValueFromText(row: SYSINT; col: SYSINT; const val: WideString; 
                                   nOption: AcParseOption); dispid 2208;
    procedure ResetCellValue(row: SYSINT; col: SYSINT); dispid 2209;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimArcLength
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FFCEA1F0-1C70-4342-9C14-929923139F4C}
// *********************************************************************//
  IAcadDimArcLength = interface(IAcadDimension)
    ['{FFCEA1F0-1C70-4342-9C14-929923139F4C}']
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_ExtensionLineColor: ACAD_COLOR; safecall;
    procedure Set_ExtensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_DimensionLineExtend: Double; safecall;
    procedure Set_DimensionLineExtend(extend: Double); safecall;
    function Get_ExtensionLineExtend: Double; safecall;
    procedure Set_ExtensionLineExtend(extend: Double); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_HorizontalTextPosition: AcDimHorizontalJustification; safecall;
    procedure Set_HorizontalTextPosition(Type_: AcDimHorizontalJustification); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_ExtensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_ExtensionLineWeight(lweight: ACAD_LWEIGHT); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLine1Suppress: WordBool; safecall;
    procedure Set_DimLine1Suppress(bSuppress: WordBool); safecall;
    function Get_DimLine2Suppress: WordBool; safecall;
    procedure Set_DimLine2Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine1Suppress: WordBool; safecall;
    procedure Set_ExtLine1Suppress(bSuppress: WordBool); safecall;
    function Get_ExtLine2Suppress: WordBool; safecall;
    procedure Set_ExtLine2Suppress(bSuppress: WordBool); safecall;
    function Get_DimLineInside: WordBool; safecall;
    procedure Set_DimLineInside(bInside: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_ExtensionLineOffset: Double; safecall;
    procedure Set_ExtensionLineOffset(Offset: Double); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_Arrowhead1Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead1Type(Type_: AcDimArrowheadType); safecall;
    function Get_Arrowhead2Type: AcDimArrowheadType; safecall;
    procedure Set_Arrowhead2Type(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_Arrowhead1Block: WideString; safecall;
    procedure Set_Arrowhead1Block(const BlockName: WideString); safecall;
    function Get_Arrowhead2Block: WideString; safecall;
    procedure Set_Arrowhead2Block(const BlockName: WideString); safecall;
    function Get_ArcPoint: OleVariant; safecall;
    procedure Set_ArcPoint(pVal: OleVariant); safecall;
    function Get_ExtLine1Point: OleVariant; safecall;
    procedure Set_ExtLine1Point(pVal: OleVariant); safecall;
    function Get_ExtLine2Point: OleVariant; safecall;
    procedure Set_ExtLine2Point(pVal: OleVariant); safecall;
    function Get_CenterPoint: OleVariant; safecall;
    procedure Set_CenterPoint(pVal: OleVariant); safecall;
    function Get_Leader1Point: OleVariant; safecall;
    procedure Set_Leader1Point(pVal: OleVariant); safecall;
    function Get_Leader2Point: OleVariant; safecall;
    procedure Set_Leader2Point(pVal: OleVariant); safecall;
    function Get_IsPartial: WordBool; safecall;
    procedure Set_IsPartial(pVal: WordBool); safecall;
    function Get_ArcStartParam: Double; safecall;
    procedure Set_ArcStartParam(pVal: Double); safecall;
    function Get_ArcEndParam: Double; safecall;
    procedure Set_ArcEndParam(pVal: Double); safecall;
    function Get_HasLeader: WordBool; safecall;
    procedure Set_HasLeader(pVal: WordBool); safecall;
    function Get_SymbolPosition: AcDimArcLengthSymbol; safecall;
    procedure Set_SymbolPosition(Position: AcDimArcLengthSymbol); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    function Get_ExtLine1Linetype: WideString; safecall;
    procedure Set_ExtLine1Linetype(const Linetype: WideString); safecall;
    function Get_ExtLine2Linetype: WideString; safecall;
    procedure Set_ExtLine2Linetype(const Linetype: WideString); safecall;
    function Get_ExtLineFixedLenSuppress: WordBool; safecall;
    procedure Set_ExtLineFixedLenSuppress(bFixedLen: WordBool); safecall;
    function Get_ExtLineFixedLen: Double; safecall;
    procedure Set_ExtLineFixedLen(FixedLen: Double); safecall;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property ExtensionLineColor: ACAD_COLOR read Get_ExtensionLineColor write Set_ExtensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property DimensionLineExtend: Double read Get_DimensionLineExtend write Set_DimensionLineExtend;
    property ExtensionLineExtend: Double read Get_ExtensionLineExtend write Set_ExtensionLineExtend;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property HorizontalTextPosition: AcDimHorizontalJustification read Get_HorizontalTextPosition write Set_HorizontalTextPosition;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property ExtensionLineWeight: ACAD_LWEIGHT read Get_ExtensionLineWeight write Set_ExtensionLineWeight;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLine1Suppress: WordBool read Get_DimLine1Suppress write Set_DimLine1Suppress;
    property DimLine2Suppress: WordBool read Get_DimLine2Suppress write Set_DimLine2Suppress;
    property ExtLine1Suppress: WordBool read Get_ExtLine1Suppress write Set_ExtLine1Suppress;
    property ExtLine2Suppress: WordBool read Get_ExtLine2Suppress write Set_ExtLine2Suppress;
    property DimLineInside: WordBool read Get_DimLineInside write Set_DimLineInside;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property ExtensionLineOffset: Double read Get_ExtensionLineOffset write Set_ExtensionLineOffset;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property Arrowhead1Type: AcDimArrowheadType read Get_Arrowhead1Type write Set_Arrowhead1Type;
    property Arrowhead2Type: AcDimArrowheadType read Get_Arrowhead2Type write Set_Arrowhead2Type;
    property Measurement: Double read Get_Measurement;
    property Arrowhead1Block: WideString read Get_Arrowhead1Block write Set_Arrowhead1Block;
    property Arrowhead2Block: WideString read Get_Arrowhead2Block write Set_Arrowhead2Block;
    property ArcPoint: OleVariant read Get_ArcPoint write Set_ArcPoint;
    property ExtLine1Point: OleVariant read Get_ExtLine1Point write Set_ExtLine1Point;
    property ExtLine2Point: OleVariant read Get_ExtLine2Point write Set_ExtLine2Point;
    property CenterPoint: OleVariant read Get_CenterPoint write Set_CenterPoint;
    property Leader1Point: OleVariant read Get_Leader1Point write Set_Leader1Point;
    property Leader2Point: OleVariant read Get_Leader2Point write Set_Leader2Point;
    property IsPartial: WordBool read Get_IsPartial write Set_IsPartial;
    property ArcStartParam: Double read Get_ArcStartParam write Set_ArcStartParam;
    property ArcEndParam: Double read Get_ArcEndParam write Set_ArcEndParam;
    property HasLeader: WordBool read Get_HasLeader write Set_HasLeader;
    property SymbolPosition: AcDimArcLengthSymbol read Get_SymbolPosition write Set_SymbolPosition;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
    property ExtLine1Linetype: WideString read Get_ExtLine1Linetype write Set_ExtLine1Linetype;
    property ExtLine2Linetype: WideString read Get_ExtLine2Linetype write Set_ExtLine2Linetype;
    property ExtLineFixedLenSuppress: WordBool read Get_ExtLineFixedLenSuppress write Set_ExtLineFixedLenSuppress;
    property ExtLineFixedLen: Double read Get_ExtLineFixedLen write Set_ExtLineFixedLen;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimArcLengthDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FFCEA1F0-1C70-4342-9C14-929923139F4C}
// *********************************************************************//
  IAcadDimArcLengthDisp = dispinterface
    ['{FFCEA1F0-1C70-4342-9C14-929923139F4C}']
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property ExtensionLineColor: ACAD_COLOR dispid 14;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property DimensionLineExtend: Double dispid 16;
    property ExtensionLineExtend: Double dispid 17;
    property Fit: AcDimFit dispid 18;
    property FractionFormat: AcDimFractionType dispid 19;
    property HorizontalTextPosition: AcDimHorizontalJustification dispid 20;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property ExtensionLineWeight: ACAD_LWEIGHT dispid 23;
    property RoundDistance: Double dispid 24;
    property DimLine1Suppress: WordBool dispid 25;
    property DimLine2Suppress: WordBool dispid 26;
    property ExtLine1Suppress: WordBool dispid 27;
    property ExtLine2Suppress: WordBool dispid 28;
    property DimLineInside: WordBool dispid 29;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property ExtensionLineOffset: Double dispid 35;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property Arrowhead1Type: AcDimArrowheadType dispid 62;
    property Arrowhead2Type: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property Arrowhead1Block: WideString dispid 65;
    property Arrowhead2Block: WideString dispid 66;
    property ArcPoint: OleVariant dispid 68;
    property ExtLine1Point: OleVariant dispid 69;
    property ExtLine2Point: OleVariant dispid 70;
    property CenterPoint: OleVariant dispid 71;
    property Leader1Point: OleVariant dispid 72;
    property Leader2Point: OleVariant dispid 73;
    property IsPartial: WordBool dispid 74;
    property ArcStartParam: Double dispid 75;
    property ArcEndParam: Double dispid 76;
    property HasLeader: WordBool dispid 77;
    property SymbolPosition: AcDimArcLengthSymbol dispid 67;
    property DimensionLinetype: WideString dispid 80;
    property ExtLine1Linetype: WideString dispid 81;
    property ExtLine2Linetype: WideString dispid 82;
    property ExtLineFixedLenSuppress: WordBool dispid 83;
    property ExtLineFixedLen: Double dispid 84;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimRadialLarge
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0828C6C-9FF0-4DFF-A115-158FF79B241E}
// *********************************************************************//
  IAcadDimRadialLarge = interface(IAcadDimension)
    ['{F0828C6C-9FF0-4DFF-A115-158FF79B241E}']
    function Get_AltUnits: WordBool; safecall;
    procedure Set_AltUnits(bAlternate: WordBool); safecall;
    function Get_AltUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_AltUnitsPrecision(precision: AcDimPrecision); safecall;
    function Get_AltUnitsScale: ACAD_NOUNITS; safecall;
    procedure Set_AltUnitsScale(scale: ACAD_NOUNITS); safecall;
    function Get_AltRoundDistance: Double; safecall;
    procedure Set_AltRoundDistance(Distance: Double); safecall;
    function Get_AltTolerancePrecision: AcDimPrecision; safecall;
    procedure Set_AltTolerancePrecision(Distance: AcDimPrecision); safecall;
    function Get_AltUnitsFormat: AcDimUnits; safecall;
    procedure Set_AltUnitsFormat(Units: AcDimUnits); safecall;
    function Get_AltTextPrefix: WideString; safecall;
    procedure Set_AltTextPrefix(const prefix: WideString); safecall;
    function Get_AltTextSuffix: WideString; safecall;
    procedure Set_AltTextSuffix(const prefix: WideString); safecall;
    function Get_CenterType: AcDimCenterType; safecall;
    procedure Set_CenterType(Type_: AcDimCenterType); safecall;
    function Get_CenterMarkSize: Double; safecall;
    procedure Set_CenterMarkSize(Type_: Double); safecall;
    function Get_DimensionLineColor: ACAD_COLOR; safecall;
    procedure Set_DimensionLineColor(Type_: ACAD_COLOR); safecall;
    function Get_PrimaryUnitsPrecision: AcDimPrecision; safecall;
    procedure Set_PrimaryUnitsPrecision(Prec: AcDimPrecision); safecall;
    function Get_FractionFormat: AcDimFractionType; safecall;
    procedure Set_FractionFormat(Type_: AcDimFractionType); safecall;
    function Get_Fit: AcDimFit; safecall;
    procedure Set_Fit(fittype: AcDimFit); safecall;
    function Get_LinearScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_LinearScaleFactor(Type_: ACAD_NOUNITS); safecall;
    function Get_UnitsFormat: AcDimLUnits; safecall;
    procedure Set_UnitsFormat(format: AcDimLUnits); safecall;
    function Get_RoundDistance: Double; safecall;
    procedure Set_RoundDistance(Distance: Double); safecall;
    function Get_DimLineSuppress: WordBool; safecall;
    procedure Set_DimLineSuppress(bSuppress: WordBool); safecall;
    function Get_TextInsideAlign: WordBool; safecall;
    procedure Set_TextInsideAlign(bInside: WordBool); safecall;
    function Get_TextInside: WordBool; safecall;
    procedure Set_TextInside(bInside: WordBool); safecall;
    function Get_ForceLineInside: WordBool; safecall;
    procedure Set_ForceLineInside(bInside: WordBool); safecall;
    function Get_TextOutsideAlign: WordBool; safecall;
    procedure Set_TextOutsideAlign(bInside: WordBool); safecall;
    function Get_AltSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltSuppressZeroInches: WordBool; safecall;
    procedure Set_AltSuppressZeroInches(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressLeadingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressLeadingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressTrailingZeros: WordBool; safecall;
    procedure Set_AltToleranceSuppressTrailingZeros(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_AltToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_AltToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_SuppressZeroFeet: WordBool; safecall;
    procedure Set_SuppressZeroFeet(bVal: WordBool); safecall;
    function Get_SuppressZeroInches: WordBool; safecall;
    procedure Set_SuppressZeroInches(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroFeet: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroFeet(bVal: WordBool); safecall;
    function Get_ToleranceSuppressZeroInches: WordBool; safecall;
    procedure Set_ToleranceSuppressZeroInches(bVal: WordBool); safecall;
    function Get_DimensionLineWeight: ACAD_LWEIGHT; safecall;
    procedure Set_DimensionLineWeight(weight: ACAD_LWEIGHT); safecall;
    function Get_ArrowheadSize: Double; safecall;
    procedure Set_ArrowheadSize(size: Double); safecall;
    function Get_ArrowheadType: AcDimArrowheadType; safecall;
    procedure Set_ArrowheadType(Type_: AcDimArrowheadType); safecall;
    function Get_Measurement: Double; safecall;
    function Get_ArrowheadBlock: WideString; safecall;
    procedure Set_ArrowheadBlock(const BlockName: WideString); safecall;
    function Get_OverrideCenter: OleVariant; safecall;
    procedure Set_OverrideCenter(overrideCenterPos: OleVariant); safecall;
    function Get_JogLocation: OleVariant; safecall;
    procedure Set_JogLocation(jogPos: OleVariant); safecall;
    function Get_JogAngle: ACAD_ANGLE; safecall;
    procedure Set_JogAngle(JogAngle: ACAD_ANGLE); safecall;
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(pVar: OleVariant); safecall;
    function Get_ChordPoint: OleVariant; safecall;
    procedure Set_ChordPoint(pVal: OleVariant); safecall;
    function Get_DimensionLinetype: WideString; safecall;
    procedure Set_DimensionLinetype(const Linetype: WideString); safecall;
    property AltUnits: WordBool read Get_AltUnits write Set_AltUnits;
    property AltUnitsPrecision: AcDimPrecision read Get_AltUnitsPrecision write Set_AltUnitsPrecision;
    property AltUnitsScale: ACAD_NOUNITS read Get_AltUnitsScale write Set_AltUnitsScale;
    property AltRoundDistance: Double read Get_AltRoundDistance write Set_AltRoundDistance;
    property AltTolerancePrecision: AcDimPrecision read Get_AltTolerancePrecision write Set_AltTolerancePrecision;
    property AltUnitsFormat: AcDimUnits read Get_AltUnitsFormat write Set_AltUnitsFormat;
    property AltTextPrefix: WideString read Get_AltTextPrefix write Set_AltTextPrefix;
    property AltTextSuffix: WideString read Get_AltTextSuffix write Set_AltTextSuffix;
    property CenterType: AcDimCenterType read Get_CenterType write Set_CenterType;
    property CenterMarkSize: Double read Get_CenterMarkSize write Set_CenterMarkSize;
    property DimensionLineColor: ACAD_COLOR read Get_DimensionLineColor write Set_DimensionLineColor;
    property PrimaryUnitsPrecision: AcDimPrecision read Get_PrimaryUnitsPrecision write Set_PrimaryUnitsPrecision;
    property FractionFormat: AcDimFractionType read Get_FractionFormat write Set_FractionFormat;
    property Fit: AcDimFit read Get_Fit write Set_Fit;
    property LinearScaleFactor: ACAD_NOUNITS read Get_LinearScaleFactor write Set_LinearScaleFactor;
    property UnitsFormat: AcDimLUnits read Get_UnitsFormat write Set_UnitsFormat;
    property RoundDistance: Double read Get_RoundDistance write Set_RoundDistance;
    property DimLineSuppress: WordBool read Get_DimLineSuppress write Set_DimLineSuppress;
    property TextInsideAlign: WordBool read Get_TextInsideAlign write Set_TextInsideAlign;
    property TextInside: WordBool read Get_TextInside write Set_TextInside;
    property ForceLineInside: WordBool read Get_ForceLineInside write Set_ForceLineInside;
    property TextOutsideAlign: WordBool read Get_TextOutsideAlign write Set_TextOutsideAlign;
    property AltSuppressLeadingZeros: WordBool read Get_AltSuppressLeadingZeros write Set_AltSuppressLeadingZeros;
    property AltSuppressTrailingZeros: WordBool read Get_AltSuppressTrailingZeros write Set_AltSuppressTrailingZeros;
    property AltSuppressZeroFeet: WordBool read Get_AltSuppressZeroFeet write Set_AltSuppressZeroFeet;
    property AltSuppressZeroInches: WordBool read Get_AltSuppressZeroInches write Set_AltSuppressZeroInches;
    property AltToleranceSuppressLeadingZeros: WordBool read Get_AltToleranceSuppressLeadingZeros write Set_AltToleranceSuppressLeadingZeros;
    property AltToleranceSuppressTrailingZeros: WordBool read Get_AltToleranceSuppressTrailingZeros write Set_AltToleranceSuppressTrailingZeros;
    property AltToleranceSuppressZeroFeet: WordBool read Get_AltToleranceSuppressZeroFeet write Set_AltToleranceSuppressZeroFeet;
    property AltToleranceSuppressZeroInches: WordBool read Get_AltToleranceSuppressZeroInches write Set_AltToleranceSuppressZeroInches;
    property SuppressZeroFeet: WordBool read Get_SuppressZeroFeet write Set_SuppressZeroFeet;
    property SuppressZeroInches: WordBool read Get_SuppressZeroInches write Set_SuppressZeroInches;
    property ToleranceSuppressZeroFeet: WordBool read Get_ToleranceSuppressZeroFeet write Set_ToleranceSuppressZeroFeet;
    property ToleranceSuppressZeroInches: WordBool read Get_ToleranceSuppressZeroInches write Set_ToleranceSuppressZeroInches;
    property DimensionLineWeight: ACAD_LWEIGHT read Get_DimensionLineWeight write Set_DimensionLineWeight;
    property ArrowheadSize: Double read Get_ArrowheadSize write Set_ArrowheadSize;
    property ArrowheadType: AcDimArrowheadType read Get_ArrowheadType write Set_ArrowheadType;
    property Measurement: Double read Get_Measurement;
    property ArrowheadBlock: WideString read Get_ArrowheadBlock write Set_ArrowheadBlock;
    property OverrideCenter: OleVariant read Get_OverrideCenter write Set_OverrideCenter;
    property JogLocation: OleVariant read Get_JogLocation write Set_JogLocation;
    property JogAngle: ACAD_ANGLE read Get_JogAngle write Set_JogAngle;
    property Center: OleVariant read Get_Center write Set_Center;
    property ChordPoint: OleVariant read Get_ChordPoint write Set_ChordPoint;
    property DimensionLinetype: WideString read Get_DimensionLinetype write Set_DimensionLinetype;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimRadialLargeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0828C6C-9FF0-4DFF-A115-158FF79B241E}
// *********************************************************************//
  IAcadDimRadialLargeDisp = dispinterface
    ['{F0828C6C-9FF0-4DFF-A115-158FF79B241E}']
    property AltUnits: WordBool dispid 3;
    property AltUnitsPrecision: AcDimPrecision dispid 4;
    property AltUnitsScale: ACAD_NOUNITS dispid 5;
    property AltRoundDistance: Double dispid 6;
    property AltTolerancePrecision: AcDimPrecision dispid 7;
    property AltUnitsFormat: AcDimUnits dispid 9;
    property AltTextPrefix: WideString dispid 11;
    property AltTextSuffix: WideString dispid 12;
    property CenterType: AcDimCenterType dispid 43;
    property CenterMarkSize: Double dispid 44;
    property DimensionLineColor: ACAD_COLOR dispid 13;
    property PrimaryUnitsPrecision: AcDimPrecision dispid 15;
    property FractionFormat: AcDimFractionType dispid 19;
    property Fit: AcDimFit dispid 18;
    property LinearScaleFactor: ACAD_NOUNITS dispid 21;
    property UnitsFormat: AcDimLUnits dispid 22;
    property RoundDistance: Double dispid 24;
    property DimLineSuppress: WordBool dispid 26;
    property TextInsideAlign: WordBool dispid 30;
    property TextInside: WordBool dispid 31;
    property ForceLineInside: WordBool dispid 32;
    property TextOutsideAlign: WordBool dispid 33;
    property AltSuppressLeadingZeros: WordBool dispid 48;
    property AltSuppressTrailingZeros: WordBool dispid 49;
    property AltSuppressZeroFeet: WordBool dispid 50;
    property AltSuppressZeroInches: WordBool dispid 51;
    property AltToleranceSuppressLeadingZeros: WordBool dispid 52;
    property AltToleranceSuppressTrailingZeros: WordBool dispid 53;
    property AltToleranceSuppressZeroFeet: WordBool dispid 54;
    property AltToleranceSuppressZeroInches: WordBool dispid 55;
    property SuppressZeroFeet: WordBool dispid 56;
    property SuppressZeroInches: WordBool dispid 57;
    property ToleranceSuppressZeroFeet: WordBool dispid 58;
    property ToleranceSuppressZeroInches: WordBool dispid 59;
    property DimensionLineWeight: ACAD_LWEIGHT dispid 60;
    property ArrowheadSize: Double dispid 61;
    property ArrowheadType: AcDimArrowheadType dispid 63;
    property Measurement: Double readonly dispid 64;
    property ArrowheadBlock: WideString dispid 66;
    property OverrideCenter: OleVariant dispid 68;
    property JogLocation: OleVariant dispid 69;
    property JogAngle: ACAD_ANGLE dispid 70;
    property Center: OleVariant dispid 71;
    property ChordPoint: OleVariant dispid 72;
    property DimensionLinetype: WideString dispid 80;
    property Normal: OleVariant dispid 1537;
    property Rotation: ACAD_ANGLE dispid 1538;
    property TextPosition: OleVariant dispid 1539;
    property TextRotation: ACAD_ANGLE dispid 1540;
    property TextOverride: WideString dispid 1541;
    property StyleName: WideString dispid 1542;
    property TextColor: ACAD_COLOR dispid 1546;
    property DecimalSeparator: WideString dispid 1548;
    property TextGap: Double dispid 1549;
    property TextPrefix: WideString dispid 1551;
    property TextSuffix: WideString dispid 1552;
    property ScaleFactor: ACAD_NOUNITS dispid 1553;
    property VerticalTextPosition: AcDimVerticalJustification dispid 1554;
    property TolerancePrecision: AcDimPrecision dispid 1555;
    property ToleranceHeightScale: ACAD_NOUNITS dispid 1556;
    property ToleranceLowerLimit: Double dispid 1557;
    property TextMovement: AcDimTextMovement dispid 1558;
    property ToleranceDisplay: AcDimToleranceMethod dispid 1559;
    property ToleranceJustification: AcDimToleranceJustify dispid 1560;
    property ToleranceUpperLimit: Double dispid 1561;
    property TextStyle: WideString dispid 1562;
    property TextHeight: Double dispid 1563;
    property SuppressLeadingZeros: WordBool dispid 1565;
    property SuppressTrailingZeros: WordBool dispid 1566;
    property ToleranceSuppressLeadingZeros: WordBool dispid 1569;
    property ToleranceSuppressTrailingZeros: WordBool dispid 1570;
    property TextFill: WordBool dispid 1571;
    property TextFillColor: ACAD_COLOR dispid 1572;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EE05AF2-D6B9-4D79-9734-C175AC445099}
// *********************************************************************//
  IAcadSection = interface(IAcadEntity)
    ['{4EE05AF2-D6B9-4D79-9734-C175AC445099}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_State: AcSectionState; safecall;
    procedure Set_State(pVal: AcSectionState); safecall;
    function Get_ViewingDirection: OleVariant; safecall;
    procedure Set_ViewingDirection(pVal: OleVariant); safecall;
    function Get_VerticalDirection: OleVariant; safecall;
    procedure Set_VerticalDirection(pVal: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    function Get_LiveSectionEnabled: WordBool; safecall;
    procedure Set_LiveSectionEnabled(pVal: WordBool); safecall;
    function Get_IndicatorTransparency: SYSINT; safecall;
    procedure Set_IndicatorTransparency(pVal: SYSINT); safecall;
    function Get_IndicatorFillColor: IAcadAcCmColor; safecall;
    procedure Set_IndicatorFillColor(const pColor: IAcadAcCmColor); safecall;
    function Get_Elevation: Double; safecall;
    procedure Set_Elevation(pVal: Double); safecall;
    function Get_TopHeight: Double; safecall;
    procedure Set_TopHeight(pVal: Double); safecall;
    function Get_BottomHeight: Double; safecall;
    procedure Set_BottomHeight(pVal: Double); safecall;
    function Get_NumVertices: SYSINT; safecall;
    function Get_Vertices: OleVariant; safecall;
    procedure Set_Vertices(pVal: OleVariant); safecall;
    function Get_Coordinate(Index: SYSINT): OleVariant; safecall;
    procedure Set_Coordinate(Index: SYSINT; pVal: OleVariant); safecall;
    procedure AddVertex(nIndex: SYSINT; val: OleVariant); safecall;
    procedure RemoveVertex(nIndex: SYSINT); safecall;
    procedure HitTest(varPtHit: OleVariant; out pHit: WordBool; out pSegmentIndex: SYSINT; 
                      out pPtOnSegment: OleVariant; out pSubItem: AcSectionSubItem); safecall;
    procedure CreateJog(varPt: OleVariant); safecall;
    function Get_Settings: IAcadSectionSettings; safecall;
    procedure GenerateSectionGeometry(const pEntity: IAcadEntity; 
                                      out pIntersectionBoundaryObjs: OleVariant; 
                                      out pIntersectionFillObjs: OleVariant; 
                                      out pBackgroudnObjs: OleVariant; 
                                      out pForegroudObjs: OleVariant; 
                                      out pCurveTangencyObjs: OleVariant); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property State: AcSectionState read Get_State write Set_State;
    property ViewingDirection: OleVariant read Get_ViewingDirection write Set_ViewingDirection;
    property VerticalDirection: OleVariant read Get_VerticalDirection write Set_VerticalDirection;
    property Normal: OleVariant read Get_Normal;
    property LiveSectionEnabled: WordBool read Get_LiveSectionEnabled write Set_LiveSectionEnabled;
    property IndicatorTransparency: SYSINT read Get_IndicatorTransparency write Set_IndicatorTransparency;
    property IndicatorFillColor: IAcadAcCmColor read Get_IndicatorFillColor write Set_IndicatorFillColor;
    property Elevation: Double read Get_Elevation write Set_Elevation;
    property TopHeight: Double read Get_TopHeight write Set_TopHeight;
    property BottomHeight: Double read Get_BottomHeight write Set_BottomHeight;
    property NumVertices: SYSINT read Get_NumVertices;
    property Vertices: OleVariant read Get_Vertices write Set_Vertices;
    property Coordinate[Index: SYSINT]: OleVariant read Get_Coordinate write Set_Coordinate;
    property Settings: IAcadSectionSettings read Get_Settings;
  end;

// *********************************************************************//
// DispIntf:  IAcadSectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EE05AF2-D6B9-4D79-9734-C175AC445099}
// *********************************************************************//
  IAcadSectionDisp = dispinterface
    ['{4EE05AF2-D6B9-4D79-9734-C175AC445099}']
    property Name: WideString dispid 1;
    property State: AcSectionState dispid 2;
    property ViewingDirection: OleVariant dispid 3;
    property VerticalDirection: OleVariant dispid 4;
    property Normal: OleVariant readonly dispid 5;
    property LiveSectionEnabled: WordBool dispid 6;
    property IndicatorTransparency: SYSINT dispid 7;
    property IndicatorFillColor: IAcadAcCmColor dispid 8;
    property Elevation: Double dispid 9;
    property TopHeight: Double dispid 10;
    property BottomHeight: Double dispid 11;
    property NumVertices: SYSINT readonly dispid 12;
    property Vertices: OleVariant dispid 13;
    property Coordinate[Index: SYSINT]: OleVariant dispid 14;
    procedure AddVertex(nIndex: SYSINT; val: OleVariant); dispid 15;
    procedure RemoveVertex(nIndex: SYSINT); dispid 16;
    procedure HitTest(varPtHit: OleVariant; out pHit: WordBool; out pSegmentIndex: SYSINT; 
                      out pPtOnSegment: OleVariant; out pSubItem: AcSectionSubItem); dispid 17;
    procedure CreateJog(varPt: OleVariant); dispid 18;
    property Settings: IAcadSectionSettings readonly dispid 19;
    procedure GenerateSectionGeometry(const pEntity: IAcadEntity; 
                                      out pIntersectionBoundaryObjs: OleVariant; 
                                      out pIntersectionFillObjs: OleVariant; 
                                      out pBackgroudnObjs: OleVariant; 
                                      out pForegroudObjs: OleVariant; 
                                      out pCurveTangencyObjs: OleVariant); dispid 20;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSectionSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB124B3C-3174-4CB8-8157-E5EFD03347AD}
// *********************************************************************//
  IAcadSectionSettings = interface(IAcadObject)
    ['{BB124B3C-3174-4CB8-8157-E5EFD03347AD}']
    function Get_CurrentSectionType: AcSectionType; safecall;
    procedure Set_CurrentSectionType(pVal: AcSectionType); safecall;
    function GetSectionTypeSettings(secType: AcSectionType): IAcadSectionTypeSettings; safecall;
    property CurrentSectionType: AcSectionType read Get_CurrentSectionType write Set_CurrentSectionType;
  end;

// *********************************************************************//
// DispIntf:  IAcadSectionSettingsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB124B3C-3174-4CB8-8157-E5EFD03347AD}
// *********************************************************************//
  IAcadSectionSettingsDisp = dispinterface
    ['{BB124B3C-3174-4CB8-8157-E5EFD03347AD}']
    property CurrentSectionType: AcSectionType dispid 1;
    function GetSectionTypeSettings(secType: AcSectionType): IAcadSectionTypeSettings; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSectionTypeSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62E19FBE-3C3D-4377-9E2F-02F84B11980D}
// *********************************************************************//
  IAcadSectionTypeSettings = interface(IDispatch)
    ['{62E19FBE-3C3D-4377-9E2F-02F84B11980D}']
    function Get_GenerationOptions: AcSectionGeneration; safecall;
    procedure Set_GenerationOptions(pVal: AcSectionGeneration); safecall;
    function Get_SourceObjects: OleVariant; safecall;
    procedure Set_SourceObjects(pVal: OleVariant); safecall;
    function Get_DestinationBlock: OleVariant; safecall;
    procedure Set_DestinationBlock(pVal: OleVariant); safecall;
    function Get_DestinationFile: WideString; safecall;
    procedure Set_DestinationFile(const pVal: WideString); safecall;
    function Get_IntersectionBoundaryColor: IAcadAcCmColor; safecall;
    procedure Set_IntersectionBoundaryColor(const pColor: IAcadAcCmColor); safecall;
    function Get_IntersectionBoundaryLayer: WideString; safecall;
    procedure Set_IntersectionBoundaryLayer(const Layer: WideString); safecall;
    function Get_IntersectionBoundaryLinetype: WideString; safecall;
    procedure Set_IntersectionBoundaryLinetype(const Linetype: WideString); safecall;
    function Get_IntersectionBoundaryLinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_IntersectionBoundaryLinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_IntersectionBoundaryPlotStyleName: WideString; safecall;
    procedure Set_IntersectionBoundaryPlotStyleName(const plotStyle: WideString); safecall;
    function Get_IntersectionBoundaryLineweight: ACAD_LWEIGHT; safecall;
    procedure Set_IntersectionBoundaryLineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_IntersectionBoundaryDivisionLines: WordBool; safecall;
    procedure Set_IntersectionBoundaryDivisionLines(pVal: WordBool); safecall;
    function Get_IntersectionFillVisible: WordBool; safecall;
    procedure Set_IntersectionFillVisible(pVal: WordBool); safecall;
    function Get_IntersectionFillHatchPatternType: AcPatternType; safecall;
    procedure Set_IntersectionFillHatchPatternType(pVal: AcPatternType); safecall;
    function Get_IntersectionFillHatchPatternName: WideString; safecall;
    procedure Set_IntersectionFillHatchPatternName(const pVal: WideString); safecall;
    function Get_IntersectionFillHatchAngle: ACAD_ANGLE; safecall;
    procedure Set_IntersectionFillHatchAngle(pVal: ACAD_ANGLE); safecall;
    function Get_IntersectionFillHatchScale: ACAD_NOUNITS; safecall;
    procedure Set_IntersectionFillHatchScale(pVal: ACAD_NOUNITS); safecall;
    function Get_IntersectionFillHatchSpacing: Double; safecall;
    procedure Set_IntersectionFillHatchSpacing(pVal: Double); safecall;
    function Get_IntersectionFillColor: IAcadAcCmColor; safecall;
    procedure Set_IntersectionFillColor(const pColor: IAcadAcCmColor); safecall;
    function Get_IntersectionFillLayer: WideString; safecall;
    procedure Set_IntersectionFillLayer(const Layer: WideString); safecall;
    function Get_IntersectionFillLinetype: WideString; safecall;
    procedure Set_IntersectionFillLinetype(const Linetype: WideString); safecall;
    function Get_IntersectionFillLinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_IntersectionFillLinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_IntersectionFillPlotStyleName: WideString; safecall;
    procedure Set_IntersectionFillPlotStyleName(const plotStyle: WideString); safecall;
    function Get_IntersectionFillLineweight: ACAD_LWEIGHT; safecall;
    procedure Set_IntersectionFillLineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_IntersectionFillFaceTransparency: Integer; safecall;
    procedure Set_IntersectionFillFaceTransparency(pVal: Integer); safecall;
    function Get_BackgroundLinesVisible: WordBool; safecall;
    procedure Set_BackgroundLinesVisible(pVal: WordBool); safecall;
    function Get_BackgroundLinesHiddenLine: WordBool; safecall;
    procedure Set_BackgroundLinesHiddenLine(pVal: WordBool); safecall;
    function Get_BackgroundLinesColor: IAcadAcCmColor; safecall;
    procedure Set_BackgroundLinesColor(const pColor: IAcadAcCmColor); safecall;
    function Get_BackgroundLinesLayer: WideString; safecall;
    procedure Set_BackgroundLinesLayer(const Layer: WideString); safecall;
    function Get_BackgroundLinesLinetype: WideString; safecall;
    procedure Set_BackgroundLinesLinetype(const Linetype: WideString); safecall;
    function Get_BackgroundLinesLinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_BackgroundLinesLinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_BackgroundLinesPlotStyleName: WideString; safecall;
    procedure Set_BackgroundLinesPlotStyleName(const plotStyle: WideString); safecall;
    function Get_BackgroundLinesLineweight: ACAD_LWEIGHT; safecall;
    procedure Set_BackgroundLinesLineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_ForegroundLinesVisible: WordBool; safecall;
    procedure Set_ForegroundLinesVisible(pVal: WordBool); safecall;
    function Get_ForegroundLinesHiddenLine: WordBool; safecall;
    procedure Set_ForegroundLinesHiddenLine(pVal: WordBool); safecall;
    function Get_ForegroundLinesColor: IAcadAcCmColor; safecall;
    procedure Set_ForegroundLinesColor(const pColor: IAcadAcCmColor); safecall;
    function Get_ForegroundLinesLayer: WideString; safecall;
    procedure Set_ForegroundLinesLayer(const Layer: WideString); safecall;
    function Get_ForegroundLinesLinetype: WideString; safecall;
    procedure Set_ForegroundLinesLinetype(const Linetype: WideString); safecall;
    function Get_ForegroundLinesLinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_ForegroundLinesLinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_ForegroundLinesPlotStyleName: WideString; safecall;
    procedure Set_ForegroundLinesPlotStyleName(const plotStyle: WideString); safecall;
    function Get_ForegroundLinesLineweight: ACAD_LWEIGHT; safecall;
    procedure Set_ForegroundLinesLineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_ForegroundLinesFaceTransparency: Integer; safecall;
    procedure Set_ForegroundLinesFaceTransparency(pVal: Integer); safecall;
    function Get_ForegroundLinesEdgeTransparency: Integer; safecall;
    procedure Set_ForegroundLinesEdgeTransparency(pVal: Integer); safecall;
    function Get_CurveTangencyLinesVisible: WordBool; safecall;
    procedure Set_CurveTangencyLinesVisible(pVal: WordBool); safecall;
    function Get_CurveTangencyLinesColor: IAcadAcCmColor; safecall;
    procedure Set_CurveTangencyLinesColor(const pColor: IAcadAcCmColor); safecall;
    function Get_CurveTangencyLinesLayer: WideString; safecall;
    procedure Set_CurveTangencyLinesLayer(const Layer: WideString); safecall;
    function Get_CurveTangencyLinesLinetype: WideString; safecall;
    procedure Set_CurveTangencyLinesLinetype(const Linetype: WideString); safecall;
    function Get_CurveTangencyLinesLinetypeScale: ACAD_NOUNITS; safecall;
    procedure Set_CurveTangencyLinesLinetypeScale(ltScale: ACAD_NOUNITS); safecall;
    function Get_CurveTangencyLinesPlotStyleName: WideString; safecall;
    procedure Set_CurveTangencyLinesPlotStyleName(const plotStyle: WideString); safecall;
    function Get_CurveTangencyLinesLineweight: ACAD_LWEIGHT; safecall;
    procedure Set_CurveTangencyLinesLineweight(Lineweight: ACAD_LWEIGHT); safecall;
    property GenerationOptions: AcSectionGeneration read Get_GenerationOptions write Set_GenerationOptions;
    property SourceObjects: OleVariant read Get_SourceObjects write Set_SourceObjects;
    property DestinationBlock: OleVariant read Get_DestinationBlock write Set_DestinationBlock;
    property DestinationFile: WideString read Get_DestinationFile write Set_DestinationFile;
    property IntersectionBoundaryColor: IAcadAcCmColor read Get_IntersectionBoundaryColor write Set_IntersectionBoundaryColor;
    property IntersectionBoundaryLayer: WideString read Get_IntersectionBoundaryLayer write Set_IntersectionBoundaryLayer;
    property IntersectionBoundaryLinetype: WideString read Get_IntersectionBoundaryLinetype write Set_IntersectionBoundaryLinetype;
    property IntersectionBoundaryLinetypeScale: ACAD_NOUNITS read Get_IntersectionBoundaryLinetypeScale write Set_IntersectionBoundaryLinetypeScale;
    property IntersectionBoundaryPlotStyleName: WideString read Get_IntersectionBoundaryPlotStyleName write Set_IntersectionBoundaryPlotStyleName;
    property IntersectionBoundaryLineweight: ACAD_LWEIGHT read Get_IntersectionBoundaryLineweight write Set_IntersectionBoundaryLineweight;
    property IntersectionBoundaryDivisionLines: WordBool read Get_IntersectionBoundaryDivisionLines write Set_IntersectionBoundaryDivisionLines;
    property IntersectionFillVisible: WordBool read Get_IntersectionFillVisible write Set_IntersectionFillVisible;
    property IntersectionFillHatchPatternType: AcPatternType read Get_IntersectionFillHatchPatternType write Set_IntersectionFillHatchPatternType;
    property IntersectionFillHatchPatternName: WideString read Get_IntersectionFillHatchPatternName write Set_IntersectionFillHatchPatternName;
    property IntersectionFillHatchAngle: ACAD_ANGLE read Get_IntersectionFillHatchAngle write Set_IntersectionFillHatchAngle;
    property IntersectionFillHatchScale: ACAD_NOUNITS read Get_IntersectionFillHatchScale write Set_IntersectionFillHatchScale;
    property IntersectionFillHatchSpacing: Double read Get_IntersectionFillHatchSpacing write Set_IntersectionFillHatchSpacing;
    property IntersectionFillColor: IAcadAcCmColor read Get_IntersectionFillColor write Set_IntersectionFillColor;
    property IntersectionFillLayer: WideString read Get_IntersectionFillLayer write Set_IntersectionFillLayer;
    property IntersectionFillLinetype: WideString read Get_IntersectionFillLinetype write Set_IntersectionFillLinetype;
    property IntersectionFillLinetypeScale: ACAD_NOUNITS read Get_IntersectionFillLinetypeScale write Set_IntersectionFillLinetypeScale;
    property IntersectionFillPlotStyleName: WideString read Get_IntersectionFillPlotStyleName write Set_IntersectionFillPlotStyleName;
    property IntersectionFillLineweight: ACAD_LWEIGHT read Get_IntersectionFillLineweight write Set_IntersectionFillLineweight;
    property IntersectionFillFaceTransparency: Integer read Get_IntersectionFillFaceTransparency write Set_IntersectionFillFaceTransparency;
    property BackgroundLinesVisible: WordBool read Get_BackgroundLinesVisible write Set_BackgroundLinesVisible;
    property BackgroundLinesHiddenLine: WordBool read Get_BackgroundLinesHiddenLine write Set_BackgroundLinesHiddenLine;
    property BackgroundLinesColor: IAcadAcCmColor read Get_BackgroundLinesColor write Set_BackgroundLinesColor;
    property BackgroundLinesLayer: WideString read Get_BackgroundLinesLayer write Set_BackgroundLinesLayer;
    property BackgroundLinesLinetype: WideString read Get_BackgroundLinesLinetype write Set_BackgroundLinesLinetype;
    property BackgroundLinesLinetypeScale: ACAD_NOUNITS read Get_BackgroundLinesLinetypeScale write Set_BackgroundLinesLinetypeScale;
    property BackgroundLinesPlotStyleName: WideString read Get_BackgroundLinesPlotStyleName write Set_BackgroundLinesPlotStyleName;
    property BackgroundLinesLineweight: ACAD_LWEIGHT read Get_BackgroundLinesLineweight write Set_BackgroundLinesLineweight;
    property ForegroundLinesVisible: WordBool read Get_ForegroundLinesVisible write Set_ForegroundLinesVisible;
    property ForegroundLinesHiddenLine: WordBool read Get_ForegroundLinesHiddenLine write Set_ForegroundLinesHiddenLine;
    property ForegroundLinesColor: IAcadAcCmColor read Get_ForegroundLinesColor write Set_ForegroundLinesColor;
    property ForegroundLinesLayer: WideString read Get_ForegroundLinesLayer write Set_ForegroundLinesLayer;
    property ForegroundLinesLinetype: WideString read Get_ForegroundLinesLinetype write Set_ForegroundLinesLinetype;
    property ForegroundLinesLinetypeScale: ACAD_NOUNITS read Get_ForegroundLinesLinetypeScale write Set_ForegroundLinesLinetypeScale;
    property ForegroundLinesPlotStyleName: WideString read Get_ForegroundLinesPlotStyleName write Set_ForegroundLinesPlotStyleName;
    property ForegroundLinesLineweight: ACAD_LWEIGHT read Get_ForegroundLinesLineweight write Set_ForegroundLinesLineweight;
    property ForegroundLinesFaceTransparency: Integer read Get_ForegroundLinesFaceTransparency write Set_ForegroundLinesFaceTransparency;
    property ForegroundLinesEdgeTransparency: Integer read Get_ForegroundLinesEdgeTransparency write Set_ForegroundLinesEdgeTransparency;
    property CurveTangencyLinesVisible: WordBool read Get_CurveTangencyLinesVisible write Set_CurveTangencyLinesVisible;
    property CurveTangencyLinesColor: IAcadAcCmColor read Get_CurveTangencyLinesColor write Set_CurveTangencyLinesColor;
    property CurveTangencyLinesLayer: WideString read Get_CurveTangencyLinesLayer write Set_CurveTangencyLinesLayer;
    property CurveTangencyLinesLinetype: WideString read Get_CurveTangencyLinesLinetype write Set_CurveTangencyLinesLinetype;
    property CurveTangencyLinesLinetypeScale: ACAD_NOUNITS read Get_CurveTangencyLinesLinetypeScale write Set_CurveTangencyLinesLinetypeScale;
    property CurveTangencyLinesPlotStyleName: WideString read Get_CurveTangencyLinesPlotStyleName write Set_CurveTangencyLinesPlotStyleName;
    property CurveTangencyLinesLineweight: ACAD_LWEIGHT read Get_CurveTangencyLinesLineweight write Set_CurveTangencyLinesLineweight;
  end;

// *********************************************************************//
// DispIntf:  IAcadSectionTypeSettingsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62E19FBE-3C3D-4377-9E2F-02F84B11980D}
// *********************************************************************//
  IAcadSectionTypeSettingsDisp = dispinterface
    ['{62E19FBE-3C3D-4377-9E2F-02F84B11980D}']
    property GenerationOptions: AcSectionGeneration dispid 1;
    property SourceObjects: OleVariant dispid 2;
    property DestinationBlock: OleVariant dispid 3;
    property DestinationFile: WideString dispid 4;
    property IntersectionBoundaryColor: IAcadAcCmColor dispid 51;
    property IntersectionBoundaryLayer: WideString dispid 52;
    property IntersectionBoundaryLinetype: WideString dispid 53;
    property IntersectionBoundaryLinetypeScale: ACAD_NOUNITS dispid 54;
    property IntersectionBoundaryPlotStyleName: WideString dispid 55;
    property IntersectionBoundaryLineweight: ACAD_LWEIGHT dispid 56;
    property IntersectionBoundaryDivisionLines: WordBool dispid 57;
    property IntersectionFillVisible: WordBool dispid 71;
    property IntersectionFillHatchPatternType: AcPatternType dispid 72;
    property IntersectionFillHatchPatternName: WideString dispid 73;
    property IntersectionFillHatchAngle: ACAD_ANGLE dispid 74;
    property IntersectionFillHatchScale: ACAD_NOUNITS dispid 75;
    property IntersectionFillHatchSpacing: Double dispid 76;
    property IntersectionFillColor: IAcadAcCmColor dispid 77;
    property IntersectionFillLayer: WideString dispid 78;
    property IntersectionFillLinetype: WideString dispid 79;
    property IntersectionFillLinetypeScale: ACAD_NOUNITS dispid 80;
    property IntersectionFillPlotStyleName: WideString dispid 81;
    property IntersectionFillLineweight: ACAD_LWEIGHT dispid 82;
    property IntersectionFillFaceTransparency: Integer dispid 83;
    property BackgroundLinesVisible: WordBool dispid 91;
    property BackgroundLinesHiddenLine: WordBool dispid 92;
    property BackgroundLinesColor: IAcadAcCmColor dispid 93;
    property BackgroundLinesLayer: WideString dispid 94;
    property BackgroundLinesLinetype: WideString dispid 95;
    property BackgroundLinesLinetypeScale: ACAD_NOUNITS dispid 96;
    property BackgroundLinesPlotStyleName: WideString dispid 97;
    property BackgroundLinesLineweight: ACAD_LWEIGHT dispid 98;
    property ForegroundLinesVisible: WordBool dispid 111;
    property ForegroundLinesHiddenLine: WordBool dispid 112;
    property ForegroundLinesColor: IAcadAcCmColor dispid 113;
    property ForegroundLinesLayer: WideString dispid 114;
    property ForegroundLinesLinetype: WideString dispid 115;
    property ForegroundLinesLinetypeScale: ACAD_NOUNITS dispid 116;
    property ForegroundLinesPlotStyleName: WideString dispid 117;
    property ForegroundLinesLineweight: ACAD_LWEIGHT dispid 118;
    property ForegroundLinesFaceTransparency: Integer dispid 119;
    property ForegroundLinesEdgeTransparency: Integer dispid 120;
    property CurveTangencyLinesVisible: WordBool dispid 131;
    property CurveTangencyLinesColor: IAcadAcCmColor dispid 132;
    property CurveTangencyLinesLayer: WideString dispid 133;
    property CurveTangencyLinesLinetype: WideString dispid 134;
    property CurveTangencyLinesLinetypeScale: ACAD_NOUNITS dispid 135;
    property CurveTangencyLinesPlotStyleName: WideString dispid 136;
    property CurveTangencyLinesLineweight: ACAD_LWEIGHT dispid 137;
  end;

// *********************************************************************//
// Interface: IAcadPaperSpace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9029681-BBAA-4436-B0F4-1EE43BF85BF9}
// *********************************************************************//
  IAcadPaperSpace = interface(IAcadBlock)
    ['{D9029681-BBAA-4436-B0F4-1EE43BF85BF9}']
    function AddPViewport(Center: OleVariant; Width: Double; Height: Double): IAcadPViewport; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAcadPaperSpaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9029681-BBAA-4436-B0F4-1EE43BF85BF9}
// *********************************************************************//
  IAcadPaperSpaceDisp = dispinterface
    ['{D9029681-BBAA-4436-B0F4-1EE43BF85BF9}']
    function AddPViewport(Center: OleVariant; Width: Double; Height: Double): IAcadPViewport; dispid 1;
    function Item(Index: OleVariant): IAcadEntity; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1536;
    property Name: WideString dispid 1537;
    property Origin: OleVariant dispid 1538;
    function AddCustomObject(const ClassName: WideString): IDispatch; dispid 1539;
    function Add3DFace(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; 
                       Point4: OleVariant): IAcad3DFace; dispid 1540;
    function Add3DMesh(M: SYSINT; N: SYSINT; PointsMatrix: OleVariant): IAcadPolygonMesh; dispid 1541;
    function Add3DPoly(PointsArray: OleVariant): IAcad3DPolyline; dispid 1542;
    function AddArc(Center: OleVariant; Radius: Double; StartAngle: Double; EndAngle: Double): IAcadArc; dispid 1543;
    function AddAttribute(Height: Double; Mode: AcAttributeMode; const Prompt: WideString; 
                          InsertionPoint: OleVariant; const Tag: WideString; const Value: WideString): IAcadAttribute; dispid 1544;
    function AddBox(Origin: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1545;
    function AddCircle(Center: OleVariant; Radius: Double): IAcadCircle; dispid 1546;
    function AddCone(Center: OleVariant; BaseRadius: Double; Height: Double): IAcad3DSolid; dispid 1547;
    function AddCylinder(Center: OleVariant; Radius: Double; Height: Double): IAcad3DSolid; dispid 1548;
    function AddDimAligned(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           TextPosition: OleVariant): IAcadDimAligned; dispid 1549;
    function AddDimAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                           SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDimAngular; dispid 1550;
    function AddDimDiametric(ChordPoint: OleVariant; FarChordPoint: OleVariant; LeaderLength: Double): IAcadDimDiametric; dispid 1551;
    function AddDimRotated(ExtLine1Point: OleVariant; ExtLine2Point: OleVariant; 
                           DimLineLocation: OleVariant; RotationAngle: Double): IAcadDimRotated; dispid 1552;
    function AddDimOrdinate(DefinitionPoint: OleVariant; LeaderEndPoint: OleVariant; 
                            UseXAxis: SYSINT): IAcadDimOrdinate; dispid 1553;
    function AddDimRadial(Center: OleVariant; ChordPoint: OleVariant; LeaderLength: Double): IAcadDimRadial; dispid 1554;
    function AddEllipse(Center: OleVariant; MajorAxis: OleVariant; RadiusRatio: Double): IAcadEllipse; dispid 1555;
    function AddEllipticalCone(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                               Height: Double): IAcad3DSolid; dispid 1556;
    function AddEllipticalCylinder(Center: OleVariant; MajorRadius: Double; MinorRadius: Double; 
                                   Height: Double): IAcad3DSolid; dispid 1557;
    function AddExtrudedSolid(const Profile: IAcadRegion; Height: Double; TaperAngle: Double): IAcad3DSolid; dispid 1558;
    function AddExtrudedSolidAlongPath(const Profile: IAcadRegion; const Path: IDispatch): IAcad3DSolid; dispid 1559;
    function AddLeader(PointsArray: OleVariant; const Annotation: IAcadEntity; Type_: AcLeaderType): IAcadLeader; dispid 1560;
    function AddMText(InsertionPoint: OleVariant; Width: Double; const Text: WideString): IAcadMText; dispid 1561;
    function AddPoint(Point: OleVariant): IAcadPoint; dispid 1562;
    function AddLightWeightPolyline(VerticesList: OleVariant): IAcadLWPolyline; dispid 1563;
    function AddPolyline(VerticesList: OleVariant): IAcadPolyline; dispid 1564;
    function AddRay(Point1: OleVariant; Point2: OleVariant): IAcadRay; dispid 1565;
    function AddRegion(ObjectList: OleVariant): OleVariant; dispid 1566;
    function AddRevolvedSolid(const Profile: IAcadRegion; AxisPoint: OleVariant; 
                              AxisDir: OleVariant; Angle: Double): IAcad3DSolid; dispid 1567;
    function AddShape(const Name: WideString; InsertionPoint: OleVariant; ScaleFactor: Double; 
                      RotationAngle: Double): IAcadShape; dispid 1568;
    function AddSolid(Point1: OleVariant; Point2: OleVariant; point3: OleVariant; Point4: OleVariant): IAcadSolid; dispid 1569;
    function AddSphere(Center: OleVariant; Radius: Double): IAcad3DSolid; dispid 1570;
    function AddSpline(PointsArray: OleVariant; StartTangent: OleVariant; EndTangent: OleVariant): IAcadSpline; dispid 1571;
    function AddText(const TextString: WideString; InsertionPoint: OleVariant; Height: Double): IAcadText; dispid 1572;
    function AddTolerance(const Text: WideString; InsertionPoint: OleVariant; Direction: OleVariant): IAcadTolerance; dispid 1573;
    function AddTorus(Center: OleVariant; TorusRadius: Double; TubeRadius: Double): IAcad3DSolid; dispid 1574;
    function AddTrace(PointsArray: OleVariant): IAcadTrace; dispid 1575;
    function AddWedge(Center: OleVariant; Length: Double; Width: Double; Height: Double): IAcad3DSolid; dispid 1576;
    function AddXline(Point1: OleVariant; Point2: OleVariant): IAcadXline; dispid 1577;
    function InsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                         Yscale: Double; Zscale: Double; Rotation: Double; Password: OleVariant): IAcadBlockReference; dispid 1578;
    function AddHatch(PatternType: SYSINT; const PatternName: WideString; Associativity: WordBool; 
                      HatchObjectType: OleVariant): IAcadHatch; dispid 1579;
    function AddRaster(const imageFileName: WideString; InsertionPoint: OleVariant; 
                       ScaleFactor: Double; RotationAngle: Double): IAcadRasterImage; dispid 1580;
    function AddLine(StartPoint: OleVariant; EndPoint: OleVariant): IAcadLine; dispid 1581;
    property IsLayout: WordBool readonly dispid 1582;
    property Layout: IAcadLayout readonly dispid 1583;
    property IsXRef: WordBool readonly dispid 1584;
    function AddMInsertBlock(InsertionPoint: OleVariant; const Name: WideString; Xscale: Double; 
                             Yscale: Double; Zscale: Double; Rotation: Double; NumRows: Integer; 
                             NumColumns: Integer; RowSpacing: Integer; ColumnSpacing: Integer; 
                             Password: OleVariant): IAcadMInsertBlock; dispid 1585;
    function AddPolyfaceMesh(VertexList: OleVariant; FaceList: OleVariant): IAcadPolyfaceMesh; dispid 1586;
    function AddMLine(VertexList: OleVariant): IAcadMLine; dispid 1587;
    function AddDim3PointAngular(AngleVertex: OleVariant; FirstEndPoint: OleVariant; 
                                 SecondEndPoint: OleVariant; TextPoint: OleVariant): IAcadDim3PointAngular; dispid 1588;
    property XRefDatabase: IAcadDatabase readonly dispid 1589;
    function AttachExternalReference(const PathName: WideString; const Name: WideString; 
                                     InsertionPoint: OleVariant; Xscale: Double; Yscale: Double; 
                                     Zscale: Double; Rotation: Double; bOverlay: WordBool; 
                                     Password: OleVariant): IAcadExternalReference; dispid 1590;
    procedure Unload; dispid 1591;
    procedure Reload; dispid 1592;
    procedure Bind(bPrefixName: WordBool); dispid 1593;
    procedure Detach; dispid 1594;
    function AddTable(InsertionPoint: OleVariant; NumRows: SYSINT; NumColumns: SYSINT; 
                      RowHeight: Double; ColWidth: Double): IAcadTable; dispid 1595;
    property Path: WideString dispid 1596;
    property Comments: WideString dispid 1597;
    property Units: AcInsertUnits dispid 1598;
    property Explodable: WordBool dispid 1599;
    property BlockScaling: AcBlockScaling dispid 1600;
    property IsDynamicBlock: WordBool readonly dispid 1601;
    function AddDimArc(ArcCenter: OleVariant; FirstEndPoint: OleVariant; 
                       SecondEndPoint: OleVariant; ArcPoint: OleVariant): IAcadDimArcLength; dispid 1602;
    function AddDimRadialLarge(Center: OleVariant; ChordPoint: OleVariant; 
                               OverrideCenter: OleVariant; JogPoint: OleVariant; JogAngle: Double): IAcadDimRadialLarge; dispid 1603;
    function AddSection(FromPoint: OleVariant; ToPoint: OleVariant; planeVector: OleVariant): IAcadSection; dispid 1604;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPViewport
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A504EFDA-0C54-45F6-93B8-E127A92C3EA6}
// *********************************************************************//
  IAcadPViewport = interface(IAcadEntity)
    ['{A504EFDA-0C54-45F6-93B8-E127A92C3EA6}']
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(CenterPoint: OleVariant); safecall;
    function Get_Direction: OleVariant; safecall;
    procedure Set_Direction(dirVector: OleVariant); safecall;
    function Get_GridOn: WordBool; safecall;
    procedure Set_GridOn(bGridOn: WordBool); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_ViewportOn: WordBool; safecall;
    procedure Set_ViewportOn(bOn: WordBool); safecall;
    function Get_Clipped: WordBool; safecall;
    function Get_DisplayLocked: WordBool; safecall;
    procedure Set_DisplayLocked(bLocked: WordBool); safecall;
    function Get_StandardScale: AcViewportScale; safecall;
    procedure Set_StandardScale(scale: AcViewportScale); safecall;
    function Get_CustomScale: Double; safecall;
    procedure Set_CustomScale(scale: Double); safecall;
    function Get_StyleSheet: WideString; safecall;
    procedure Set_StyleSheet(const pName: WideString); safecall;
    function Get_UCSPerViewport: WordBool; safecall;
    procedure Set_UCSPerViewport(UCSSaved: WordBool); safecall;
    function Get_SnapBasePoint: OleVariant; safecall;
    procedure Set_SnapBasePoint(lowLeft: OleVariant); safecall;
    function Get_SnapOn: WordBool; safecall;
    procedure Set_SnapOn(bSnapOn: WordBool); safecall;
    function Get_SnapRotationAngle: Double; safecall;
    procedure Set_SnapRotationAngle(Angle: Double); safecall;
    function Get_UCSIconOn: WordBool; safecall;
    procedure Set_UCSIconOn(bIconOn: WordBool); safecall;
    function Get_UCSIconAtOrigin: WordBool; safecall;
    procedure Set_UCSIconAtOrigin(bIconAtOrigin: WordBool); safecall;
    procedure GetGridSpacing(out XSpacing: Double; out YSpacing: Double); safecall;
    procedure SetGridSpacing(XSpacing: Double; YSpacing: Double); safecall;
    procedure GetSnapSpacing(out XSpacing: Double; out YSpacing: Double); safecall;
    procedure SetSnapSpacing(XSpacing: Double; YSpacing: Double); safecall;
    procedure Display(bStatus: WordBool); safecall;
    function Get_TwistAngle: ACAD_ANGLE; safecall;
    procedure Set_TwistAngle(Angle: ACAD_ANGLE); safecall;
    function Get_LensLength: Double; safecall;
    procedure Set_LensLength(Length: Double); safecall;
    function Get_RemoveHiddenLines: WordBool; safecall;
    procedure Set_RemoveHiddenLines(bRemoval: WordBool); safecall;
    function Get_Target: OleVariant; safecall;
    procedure Set_Target(targetPoint: OleVariant); safecall;
    function Get_ArcSmoothness: Integer; safecall;
    procedure Set_ArcSmoothness(arcSmooth: Integer); safecall;
    function Get_VisualStyle: SYSINT; safecall;
    procedure Set_VisualStyle(pVisualStyleIndex: SYSINT); safecall;
    function Get_ShadePlot: SYSINT; safecall;
    procedure Set_ShadePlot(pShadePlotIndex: SYSINT); safecall;
    function Get_ModelView: IAcadView; safecall;
    procedure Set_ModelView(const View: IAcadView); safecall;
    function Get_SheetView: IAcadView; safecall;
    procedure Set_SheetView(const View: IAcadView); safecall;
    function Get_LabelBlockId: Integer; safecall;
    procedure Set_LabelBlockId(var ObjectID: Integer); safecall;
    function Get_HasSheetView: WordBool; safecall;
    procedure SyncModelView; safecall;
    property Center: OleVariant read Get_Center write Set_Center;
    property Direction: OleVariant read Get_Direction write Set_Direction;
    property GridOn: WordBool read Get_GridOn write Set_GridOn;
    property Height: Double read Get_Height write Set_Height;
    property Width: Double read Get_Width write Set_Width;
    property ViewportOn: WordBool read Get_ViewportOn write Set_ViewportOn;
    property Clipped: WordBool read Get_Clipped;
    property DisplayLocked: WordBool read Get_DisplayLocked write Set_DisplayLocked;
    property StandardScale: AcViewportScale read Get_StandardScale write Set_StandardScale;
    property CustomScale: Double read Get_CustomScale write Set_CustomScale;
    property StyleSheet: WideString read Get_StyleSheet write Set_StyleSheet;
    property UCSPerViewport: WordBool read Get_UCSPerViewport write Set_UCSPerViewport;
    property SnapBasePoint: OleVariant read Get_SnapBasePoint write Set_SnapBasePoint;
    property SnapOn: WordBool read Get_SnapOn write Set_SnapOn;
    property SnapRotationAngle: Double read Get_SnapRotationAngle write Set_SnapRotationAngle;
    property UCSIconOn: WordBool read Get_UCSIconOn write Set_UCSIconOn;
    property UCSIconAtOrigin: WordBool read Get_UCSIconAtOrigin write Set_UCSIconAtOrigin;
    property TwistAngle: ACAD_ANGLE read Get_TwistAngle write Set_TwistAngle;
    property LensLength: Double read Get_LensLength write Set_LensLength;
    property RemoveHiddenLines: WordBool read Get_RemoveHiddenLines write Set_RemoveHiddenLines;
    property Target: OleVariant read Get_Target write Set_Target;
    property ArcSmoothness: Integer read Get_ArcSmoothness write Set_ArcSmoothness;
    property VisualStyle: SYSINT read Get_VisualStyle write Set_VisualStyle;
    property ShadePlot: SYSINT read Get_ShadePlot write Set_ShadePlot;
    property ModelView: IAcadView read Get_ModelView write Set_ModelView;
    property SheetView: IAcadView read Get_SheetView write Set_SheetView;
    property HasSheetView: WordBool read Get_HasSheetView;
  end;

// *********************************************************************//
// DispIntf:  IAcadPViewportDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A504EFDA-0C54-45F6-93B8-E127A92C3EA6}
// *********************************************************************//
  IAcadPViewportDisp = dispinterface
    ['{A504EFDA-0C54-45F6-93B8-E127A92C3EA6}']
    property Center: OleVariant dispid 1;
    property Direction: OleVariant dispid 2;
    property GridOn: WordBool dispid 3;
    property Height: Double dispid 4;
    property Width: Double dispid 5;
    property ViewportOn: WordBool dispid 6;
    property Clipped: WordBool readonly dispid 7;
    property DisplayLocked: WordBool dispid 8;
    property StandardScale: AcViewportScale dispid 9;
    property CustomScale: Double dispid 10;
    property StyleSheet: WideString dispid 11;
    property UCSPerViewport: WordBool dispid 12;
    property SnapBasePoint: OleVariant dispid 13;
    property SnapOn: WordBool dispid 14;
    property SnapRotationAngle: Double dispid 15;
    property UCSIconOn: WordBool dispid 16;
    property UCSIconAtOrigin: WordBool dispid 17;
    procedure GetGridSpacing(out XSpacing: Double; out YSpacing: Double); dispid 18;
    procedure SetGridSpacing(XSpacing: Double; YSpacing: Double); dispid 19;
    procedure GetSnapSpacing(out XSpacing: Double; out YSpacing: Double); dispid 20;
    procedure SetSnapSpacing(XSpacing: Double; YSpacing: Double); dispid 21;
    procedure Display(bStatus: WordBool); dispid 22;
    property TwistAngle: ACAD_ANGLE dispid 23;
    property LensLength: Double dispid 24;
    property RemoveHiddenLines: WordBool dispid 25;
    property Target: OleVariant dispid 26;
    property ArcSmoothness: Integer dispid 27;
    property VisualStyle: SYSINT dispid 28;
    property ShadePlot: SYSINT dispid 29;
    property ModelView: IAcadView dispid 32;
    property SheetView: IAcadView dispid 33;
    function LabelBlockId: Integer; dispid 34;
    property HasSheetView: WordBool readonly dispid 35;
    procedure SyncModelView; dispid 36;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B189A3C4-324E-4130-8516-381635BE10EF}
// *********************************************************************//
  IAcadView = interface(IAcadObject)
    ['{B189A3C4-324E-4130-8516-381635BE10EF}']
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(Center: OleVariant); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Target: OleVariant; safecall;
    procedure Set_Target(targetPoint: OleVariant); safecall;
    function Get_Direction: OleVariant; safecall;
    procedure Set_Direction(dirVec: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_CategoryName: WideString; safecall;
    procedure Set_CategoryName(const category: WideString); safecall;
    function Get_LayoutId: Integer; safecall;
    procedure Set_LayoutId(ObjectID: Integer); safecall;
    function Get_LayerState: WideString; safecall;
    procedure Set_LayerState(const LayerState: WideString); safecall;
    function Get_HasVpAssociation: WordBool; safecall;
    procedure Set_HasVpAssociation(bVpAssoc: WordBool); safecall;
    property Center: OleVariant read Get_Center write Set_Center;
    property Height: Double read Get_Height write Set_Height;
    property Width: Double read Get_Width write Set_Width;
    property Target: OleVariant read Get_Target write Set_Target;
    property Direction: OleVariant read Get_Direction write Set_Direction;
    property Name: WideString read Get_Name write Set_Name;
    property CategoryName: WideString read Get_CategoryName write Set_CategoryName;
    property LayoutId: Integer read Get_LayoutId write Set_LayoutId;
    property LayerState: WideString read Get_LayerState write Set_LayerState;
    property HasVpAssociation: WordBool read Get_HasVpAssociation write Set_HasVpAssociation;
  end;

// *********************************************************************//
// DispIntf:  IAcadViewDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B189A3C4-324E-4130-8516-381635BE10EF}
// *********************************************************************//
  IAcadViewDisp = dispinterface
    ['{B189A3C4-324E-4130-8516-381635BE10EF}']
    property Center: OleVariant dispid 1;
    property Height: Double dispid 2;
    property Width: Double dispid 3;
    property Target: OleVariant dispid 4;
    property Direction: OleVariant dispid 5;
    property Name: WideString dispid 6;
    property CategoryName: WideString dispid 7;
    property LayoutId: Integer dispid 8;
    property LayerState: WideString dispid 9;
    property HasVpAssociation: WordBool dispid 10;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadBlocks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D81C2652-A0CE-4302-BD1F-F8C4A4ADEABD}
// *********************************************************************//
  IAcadBlocks = interface(IAcadObject)
    ['{D81C2652-A0CE-4302-BD1F-F8C4A4ADEABD}']
    function Item(Index: OleVariant): IAcadBlock; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(InsertionPoint: OleVariant; const Name: WideString): IAcadBlock; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadBlocksDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D81C2652-A0CE-4302-BD1F-F8C4A4ADEABD}
// *********************************************************************//
  IAcadBlocksDisp = dispinterface
    ['{D81C2652-A0CE-4302-BD1F-F8C4A4ADEABD}']
    function Item(Index: OleVariant): IAcadBlock; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(InsertionPoint: OleVariant; const Name: WideString): IAcadBlock; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadGroups
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10AA12FA-99E8-41B5-B4C3-BC7B54BC316D}
// *********************************************************************//
  IAcadGroups = interface(IAcadObject)
    ['{10AA12FA-99E8-41B5-B4C3-BC7B54BC316D}']
    function Item(Index: OleVariant): IAcadGroup; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadGroup; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadGroupsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10AA12FA-99E8-41B5-B4C3-BC7B54BC316D}
// *********************************************************************//
  IAcadGroupsDisp = dispinterface
    ['{10AA12FA-99E8-41B5-B4C3-BC7B54BC316D}']
    function Item(Index: OleVariant): IAcadGroup; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadGroup; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadGroup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C09D413-9CA2-462A-9D29-03CE60738E36}
// *********************************************************************//
  IAcadGroup = interface(IAcadObject)
    ['{9C09D413-9CA2-462A-9D29-03CE60738E36}']
    function Item(Index: OleVariant): IAcadEntity; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Set_TrueColor(const Param1: IAcadAcCmColor); safecall;
    procedure Set_Layer(const Param1: WideString); safecall;
    procedure Set_Linetype(const Param1: WideString); safecall;
    procedure Set_LinetypeScale(Param1: ACAD_NOUNITS); safecall;
    procedure Set_Visible(Param1: WordBool); safecall;
    procedure Highlight(HighlightFlag: WordBool); safecall;
    procedure Set_PlotStyleName(const Param1: WideString); safecall;
    procedure Set_Lineweight(Param1: ACAD_LWEIGHT); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    procedure AppendItems(Objects: OleVariant); safecall;
    procedure RemoveItems(Objects: OleVariant); safecall;
    procedure Update; safecall;
    procedure Set_Material(const Param1: WideString); safecall;
    procedure Set_color(Param1: AcColor); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property TrueColor: IAcadAcCmColor write Set_TrueColor;
    property Layer: WideString write Set_Layer;
    property Linetype: WideString write Set_Linetype;
    property LinetypeScale: ACAD_NOUNITS write Set_LinetypeScale;
    property Visible: WordBool write Set_Visible;
    property PlotStyleName: WideString write Set_PlotStyleName;
    property Lineweight: ACAD_LWEIGHT write Set_Lineweight;
    property Name: WideString read Get_Name write Set_Name;
    property Material: WideString write Set_Material;
    property color: AcColor write Set_color;
  end;

// *********************************************************************//
// DispIntf:  IAcadGroupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C09D413-9CA2-462A-9D29-03CE60738E36}
// *********************************************************************//
  IAcadGroupDisp = dispinterface
    ['{9C09D413-9CA2-462A-9D29-03CE60738E36}']
    function Item(Index: OleVariant): IAcadEntity; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1;
    property TrueColor: IAcadAcCmColor writeonly dispid 15;
    property Layer: WideString writeonly dispid 3;
    property Linetype: WideString writeonly dispid 4;
    property LinetypeScale: ACAD_NOUNITS writeonly dispid 5;
    property Visible: WordBool writeonly dispid 6;
    procedure Highlight(HighlightFlag: WordBool); dispid 7;
    property PlotStyleName: WideString writeonly dispid 8;
    property Lineweight: ACAD_LWEIGHT writeonly dispid 9;
    property Name: WideString dispid 10;
    procedure AppendItems(Objects: OleVariant); dispid 11;
    procedure RemoveItems(Objects: OleVariant); dispid 12;
    procedure Update; dispid 14;
    property Material: WideString writeonly dispid 16;
    property color: AcColor writeonly dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimStyles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C62F448E-753C-4DDF-B30D-873D0DAF9735}
// *********************************************************************//
  IAcadDimStyles = interface(IAcadObject)
    ['{C62F448E-753C-4DDF-B30D-873D0DAF9735}']
    function Item(Index: OleVariant): IAcadDimStyle; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadDimStyle; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimStylesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C62F448E-753C-4DDF-B30D-873D0DAF9735}
// *********************************************************************//
  IAcadDimStylesDisp = dispinterface
    ['{C62F448E-753C-4DDF-B30D-873D0DAF9735}']
    function Item(Index: OleVariant): IAcadDimStyle; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadDimStyle; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDimStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D568053-C3EF-41AD-9BE7-278F5DCDFF6D}
// *********************************************************************//
  IAcadDimStyle = interface(IAcadObject)
    ['{9D568053-C3EF-41AD-9BE7-278F5DCDFF6D}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    procedure CopyFrom(const StyleSource: IDispatch); safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IAcadDimStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D568053-C3EF-41AD-9BE7-278F5DCDFF6D}
// *********************************************************************//
  IAcadDimStyleDisp = dispinterface
    ['{9D568053-C3EF-41AD-9BE7-278F5DCDFF6D}']
    property Name: WideString dispid 1;
    procedure CopyFrom(const StyleSource: IDispatch); dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLayers
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38ED835A-D1DE-42D6-A0FD-0A83A55885E7}
// *********************************************************************//
  IAcadLayers = interface(IAcadObject)
    ['{38ED835A-D1DE-42D6-A0FD-0A83A55885E7}']
    function Item(Index: OleVariant): IAcadLayer; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadLayer; safecall;
    procedure GenerateUsageData; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadLayersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38ED835A-D1DE-42D6-A0FD-0A83A55885E7}
// *********************************************************************//
  IAcadLayersDisp = dispinterface
    ['{38ED835A-D1DE-42D6-A0FD-0A83A55885E7}']
    function Item(Index: OleVariant): IAcadLayer; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadLayer; dispid 2;
    procedure GenerateUsageData; dispid 3;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F3A8989F-5CAE-4E98-A185-E161FCF43127}
// *********************************************************************//
  IAcadLayer = interface(IAcadObject)
    ['{F3A8989F-5CAE-4E98-A185-E161FCF43127}']
    function Get_color: AcColor; safecall;
    procedure Set_color(color: AcColor); safecall;
    function Get_TrueColor: IAcadAcCmColor; safecall;
    procedure Set_TrueColor(const pColor: IAcadAcCmColor); safecall;
    function Get_Freeze: WordBool; safecall;
    procedure Set_Freeze(bFreeze: WordBool); safecall;
    function Get_LayerOn: WordBool; safecall;
    procedure Set_LayerOn(bOn: WordBool); safecall;
    function Get_Linetype: WideString; safecall;
    procedure Set_Linetype(const Linetype: WideString); safecall;
    function Get_Lock: WordBool; safecall;
    procedure Set_Lock(Block: WordBool); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Plottable: WordBool; safecall;
    procedure Set_Plottable(bPlottable: WordBool); safecall;
    function Get_ViewportDefault: WordBool; safecall;
    procedure Set_ViewportDefault(bDefault: WordBool); safecall;
    function Get_PlotStyleName: WideString; safecall;
    procedure Set_PlotStyleName(const plotStyle: WideString); safecall;
    function Get_Lineweight: ACAD_LWEIGHT; safecall;
    procedure Set_Lineweight(Lineweight: ACAD_LWEIGHT); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Description: WideString); safecall;
    function Get_Used: WordBool; safecall;
    function Get_Material: WideString; safecall;
    procedure Set_Material(const Material: WideString); safecall;
    property color: AcColor read Get_color write Set_color;
    property TrueColor: IAcadAcCmColor read Get_TrueColor write Set_TrueColor;
    property Freeze: WordBool read Get_Freeze write Set_Freeze;
    property LayerOn: WordBool read Get_LayerOn write Set_LayerOn;
    property Linetype: WideString read Get_Linetype write Set_Linetype;
    property Lock: WordBool read Get_Lock write Set_Lock;
    property Name: WideString read Get_Name write Set_Name;
    property Plottable: WordBool read Get_Plottable write Set_Plottable;
    property ViewportDefault: WordBool read Get_ViewportDefault write Set_ViewportDefault;
    property PlotStyleName: WideString read Get_PlotStyleName write Set_PlotStyleName;
    property Lineweight: ACAD_LWEIGHT read Get_Lineweight write Set_Lineweight;
    property Description: WideString read Get_Description write Set_Description;
    property Used: WordBool read Get_Used;
    property Material: WideString read Get_Material write Set_Material;
  end;

// *********************************************************************//
// DispIntf:  IAcadLayerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F3A8989F-5CAE-4E98-A185-E161FCF43127}
// *********************************************************************//
  IAcadLayerDisp = dispinterface
    ['{F3A8989F-5CAE-4E98-A185-E161FCF43127}']
    property color: AcColor dispid 1;
    property TrueColor: IAcadAcCmColor dispid 11;
    property Freeze: WordBool dispid 2;
    property LayerOn: WordBool dispid 3;
    property Linetype: WideString dispid 4;
    property Lock: WordBool dispid 5;
    property Name: WideString dispid 6;
    property Plottable: WordBool dispid 7;
    property ViewportDefault: WordBool dispid 8;
    property PlotStyleName: WideString dispid 9;
    property Lineweight: ACAD_LWEIGHT dispid 10;
    property Description: WideString dispid 12;
    property Used: WordBool readonly dispid 13;
    property Material: WideString dispid 14;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLineTypes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {943058F5-B25A-470F-84E6-C6364FEC2635}
// *********************************************************************//
  IAcadLineTypes = interface(IAcadObject)
    ['{943058F5-B25A-470F-84E6-C6364FEC2635}']
    function Item(Index: OleVariant): IAcadLineType; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadLineType; safecall;
    procedure Load(const Name: WideString; const FileName: WideString); safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadLineTypesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {943058F5-B25A-470F-84E6-C6364FEC2635}
// *********************************************************************//
  IAcadLineTypesDisp = dispinterface
    ['{943058F5-B25A-470F-84E6-C6364FEC2635}']
    function Item(Index: OleVariant): IAcadLineType; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadLineType; dispid 2;
    procedure Load(const Name: WideString; const FileName: WideString); dispid 3;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLineType
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16DE7011-EE2C-4092-97C5-20A2CA6CDB25}
// *********************************************************************//
  IAcadLineType = interface(IAcadObject)
    ['{16DE7011-EE2C-4092-97C5-20A2CA6CDB25}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const bstrDes: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    property Description: WideString read Get_Description write Set_Description;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IAcadLineTypeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16DE7011-EE2C-4092-97C5-20A2CA6CDB25}
// *********************************************************************//
  IAcadLineTypeDisp = dispinterface
    ['{16DE7011-EE2C-4092-97C5-20A2CA6CDB25}']
    property Description: WideString dispid 1;
    property Name: WideString dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDictionaries
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {803BC722-4C89-4866-98B1-E4453C5F6287}
// *********************************************************************//
  IAcadDictionaries = interface(IAcadObject)
    ['{803BC722-4C89-4866-98B1-E4453C5F6287}']
    function Item(Index: OleVariant): IAcadObject; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadDictionary; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadDictionariesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {803BC722-4C89-4866-98B1-E4453C5F6287}
// *********************************************************************//
  IAcadDictionariesDisp = dispinterface
    ['{803BC722-4C89-4866-98B1-E4453C5F6287}']
    function Item(Index: OleVariant): IAcadObject; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadDictionary; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C19C7CF6-CC9A-4C21-9B3D-C3ED22D5CF25}
// *********************************************************************//
  IAcadDictionary = interface(IAcadObject)
    ['{C19C7CF6-CC9A-4C21-9B3D-C3ED22D5CF25}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function AddObject(const Keyword: WideString; const ObjectName: WideString): IAcadObject; safecall;
    function GetName(const Object_: IAcadObject): WideString; safecall;
    function GetObject(const Name: WideString): IAcadObject; safecall;
    function Remove(const Name: WideString): IAcadObject; safecall;
    procedure Rename(const OldName: WideString; const NewName: WideString); safecall;
    procedure Replace(const OldName: WideString; const pObj: IAcadObject); safecall;
    function Item(Index: OleVariant): IAcadObject; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function AddXRecord(const Keyword: WideString): IAcadXRecord; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IAcadDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C19C7CF6-CC9A-4C21-9B3D-C3ED22D5CF25}
// *********************************************************************//
  IAcadDictionaryDisp = dispinterface
    ['{C19C7CF6-CC9A-4C21-9B3D-C3ED22D5CF25}']
    property Name: WideString dispid 2;
    function AddObject(const Keyword: WideString; const ObjectName: WideString): IAcadObject; dispid 3;
    function GetName(const Object_: IAcadObject): WideString; dispid 4;
    function GetObject(const Name: WideString): IAcadObject; dispid 5;
    function Remove(const Name: WideString): IAcadObject; dispid 6;
    procedure Rename(const OldName: WideString; const NewName: WideString); dispid 7;
    procedure Replace(const OldName: WideString; const pObj: IAcadObject); dispid 8;
    function Item(Index: OleVariant): IAcadObject; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1;
    function AddXRecord(const Keyword: WideString): IAcadXRecord; dispid 9;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadXRecord
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD45EE03-5243-4466-813C-95E33F562665}
// *********************************************************************//
  IAcadXRecord = interface(IAcadObject)
    ['{BD45EE03-5243-4466-813C-95E33F562665}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    procedure GetXRecordData(out XRecordDataType: OleVariant; out XRecordDataValue: OleVariant); safecall;
    procedure SetXRecordData(XRecordDataType: OleVariant; XRecordDataValue: OleVariant); safecall;
    function Get_TranslateIDs: WordBool; safecall;
    procedure Set_TranslateIDs(xlateIds: WordBool); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property TranslateIDs: WordBool read Get_TranslateIDs write Set_TranslateIDs;
  end;

// *********************************************************************//
// DispIntf:  IAcadXRecordDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD45EE03-5243-4466-813C-95E33F562665}
// *********************************************************************//
  IAcadXRecordDisp = dispinterface
    ['{BD45EE03-5243-4466-813C-95E33F562665}']
    property Name: WideString dispid 1;
    procedure GetXRecordData(out XRecordDataType: OleVariant; out XRecordDataValue: OleVariant); dispid 2;
    procedure SetXRecordData(XRecordDataType: OleVariant; XRecordDataValue: OleVariant); dispid 3;
    property TranslateIDs: WordBool dispid 4;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRegisteredApplications
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A832756-01AF-4D2F-89A6-50E0121AFD1A}
// *********************************************************************//
  IAcadRegisteredApplications = interface(IAcadObject)
    ['{5A832756-01AF-4D2F-89A6-50E0121AFD1A}']
    function Item(Index: OleVariant): IAcadRegisteredApplication; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadRegisteredApplication; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadRegisteredApplicationsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A832756-01AF-4D2F-89A6-50E0121AFD1A}
// *********************************************************************//
  IAcadRegisteredApplicationsDisp = dispinterface
    ['{5A832756-01AF-4D2F-89A6-50E0121AFD1A}']
    function Item(Index: OleVariant): IAcadRegisteredApplication; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadRegisteredApplication; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRegisteredApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A1A95A8-60FB-4C44-8208-4E8ADCA32628}
// *********************************************************************//
  IAcadRegisteredApplication = interface(IAcadObject)
    ['{0A1A95A8-60FB-4C44-8208-4E8ADCA32628}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IAcadRegisteredApplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A1A95A8-60FB-4C44-8208-4E8ADCA32628}
// *********************************************************************//
  IAcadRegisteredApplicationDisp = dispinterface
    ['{0A1A95A8-60FB-4C44-8208-4E8ADCA32628}']
    property Name: WideString dispid 1;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadTextStyles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {617040CF-4E9D-4CC3-9814-AD69E0AB9751}
// *********************************************************************//
  IAcadTextStyles = interface(IAcadObject)
    ['{617040CF-4E9D-4CC3-9814-AD69E0AB9751}']
    function Item(Index: OleVariant): IAcadTextStyle; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadTextStyle; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadTextStylesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {617040CF-4E9D-4CC3-9814-AD69E0AB9751}
// *********************************************************************//
  IAcadTextStylesDisp = dispinterface
    ['{617040CF-4E9D-4CC3-9814-AD69E0AB9751}']
    function Item(Index: OleVariant): IAcadTextStyle; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadTextStyle; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadTextStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDF006CF-A063-40B0-912C-AF478B1CE15B}
// *********************************************************************//
  IAcadTextStyle = interface(IAcadObject)
    ['{BDF006CF-A063-40B0-912C-AF478B1CE15B}']
    function Get_BigFontFile: WideString; safecall;
    procedure Set_BigFontFile(const fontFile: WideString); safecall;
    function Get_fontFile: WideString; safecall;
    procedure Set_fontFile(const fontFile: WideString); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_LastHeight: Double; safecall;
    procedure Set_LastHeight(Height: Double); safecall;
    function Get_Name: WideString; safecall;
    function Get_ObliqueAngle: ACAD_ANGLE; safecall;
    procedure Set_ObliqueAngle(obliAngle: ACAD_ANGLE); safecall;
    function Get_TextGenerationFlag: Integer; safecall;
    procedure Set_TextGenerationFlag(textGenFlag: Integer); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    procedure GetFont(out TypeFace: WideString; out Bold: WordBool; out Italic: WordBool; 
                      out Charset: Integer; out PitchAndFamily: Integer); safecall;
    procedure SetFont(const TypeFace: WideString; Bold: WordBool; Italic: WordBool; 
                      Charset: Integer; PitchAndFamily: Integer); safecall;
    property BigFontFile: WideString read Get_BigFontFile write Set_BigFontFile;
    property fontFile: WideString read Get_fontFile write Set_fontFile;
    property Height: Double read Get_Height write Set_Height;
    property LastHeight: Double read Get_LastHeight write Set_LastHeight;
    property Name: WideString read Get_Name;
    property ObliqueAngle: ACAD_ANGLE read Get_ObliqueAngle write Set_ObliqueAngle;
    property TextGenerationFlag: Integer read Get_TextGenerationFlag write Set_TextGenerationFlag;
    property Width: Double read Get_Width write Set_Width;
  end;

// *********************************************************************//
// DispIntf:  IAcadTextStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDF006CF-A063-40B0-912C-AF478B1CE15B}
// *********************************************************************//
  IAcadTextStyleDisp = dispinterface
    ['{BDF006CF-A063-40B0-912C-AF478B1CE15B}']
    property BigFontFile: WideString dispid 1;
    property fontFile: WideString dispid 2;
    property Height: Double dispid 3;
    property LastHeight: Double dispid 4;
    property Name: WideString readonly dispid 5;
    property ObliqueAngle: ACAD_ANGLE dispid 6;
    property TextGenerationFlag: Integer dispid 7;
    property Width: Double dispid 8;
    procedure GetFont(out TypeFace: WideString; out Bold: WordBool; out Italic: WordBool; 
                      out Charset: Integer; out PitchAndFamily: Integer); dispid 9;
    procedure SetFont(const TypeFace: WideString; Bold: WordBool; Italic: WordBool; 
                      Charset: Integer; PitchAndFamily: Integer); dispid 16;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadUCSs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF4812B8-408D-4E07-B595-ACB8336B6A93}
// *********************************************************************//
  IAcadUCSs = interface(IAcadObject)
    ['{BF4812B8-408D-4E07-B595-ACB8336B6A93}']
    function Item(Index: OleVariant): IAcadUCS; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(Origin: OleVariant; XAxisPoint: OleVariant; YAxisPoint: OleVariant; 
                 const Name: WideString): IAcadUCS; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadUCSsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF4812B8-408D-4E07-B595-ACB8336B6A93}
// *********************************************************************//
  IAcadUCSsDisp = dispinterface
    ['{BF4812B8-408D-4E07-B595-ACB8336B6A93}']
    function Item(Index: OleVariant): IAcadUCS; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(Origin: OleVariant; XAxisPoint: OleVariant; YAxisPoint: OleVariant; 
                 const Name: WideString): IAcadUCS; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadUCS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {78C244EF-F4CC-43C7-AA5D-91A496215310}
// *********************************************************************//
  IAcadUCS = interface(IAcadObject)
    ['{78C244EF-F4CC-43C7-AA5D-91A496215310}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure Set_Origin(Origin: OleVariant); safecall;
    function Get_XVector: OleVariant; safecall;
    procedure Set_XVector(XVector: OleVariant); safecall;
    function Get_YVector: OleVariant; safecall;
    procedure Set_YVector(YVector: OleVariant); safecall;
    function GetUCSMatrix: OleVariant; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Origin: OleVariant read Get_Origin write Set_Origin;
    property XVector: OleVariant read Get_XVector write Set_XVector;
    property YVector: OleVariant read Get_YVector write Set_YVector;
  end;

// *********************************************************************//
// DispIntf:  IAcadUCSDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {78C244EF-F4CC-43C7-AA5D-91A496215310}
// *********************************************************************//
  IAcadUCSDisp = dispinterface
    ['{78C244EF-F4CC-43C7-AA5D-91A496215310}']
    property Name: WideString dispid 1;
    property Origin: OleVariant dispid 2;
    property XVector: OleVariant dispid 3;
    property YVector: OleVariant dispid 4;
    function GetUCSMatrix: OleVariant; dispid 5;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadViews
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65CD017C-09BF-4B8F-A7B3-0F797AF0E9BC}
// *********************************************************************//
  IAcadViews = interface(IAcadObject)
    ['{65CD017C-09BF-4B8F-A7B3-0F797AF0E9BC}']
    function Item(Index: OleVariant): IAcadView; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadView; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadViewsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65CD017C-09BF-4B8F-A7B3-0F797AF0E9BC}
// *********************************************************************//
  IAcadViewsDisp = dispinterface
    ['{65CD017C-09BF-4B8F-A7B3-0F797AF0E9BC}']
    function Item(Index: OleVariant): IAcadView; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadView; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadViewports
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98558EDE-E8B4-4870-9D78-15BE6370E1C1}
// *********************************************************************//
  IAcadViewports = interface(IAcadObject)
    ['{98558EDE-E8B4-4870-9D78-15BE6370E1C1}']
    function Item(Index: OleVariant): IAcadViewport; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadViewport; safecall;
    procedure DeleteConfiguration(const Name: WideString); safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadViewportsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98558EDE-E8B4-4870-9D78-15BE6370E1C1}
// *********************************************************************//
  IAcadViewportsDisp = dispinterface
    ['{98558EDE-E8B4-4870-9D78-15BE6370E1C1}']
    function Item(Index: OleVariant): IAcadViewport; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadViewport; dispid 2;
    procedure DeleteConfiguration(const Name: WideString); dispid 3;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadViewport
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A62E3750-0A58-47D6-B84B-E3E337E5A2D2}
// *********************************************************************//
  IAcadViewport = interface(IAcadObject)
    ['{A62E3750-0A58-47D6-B84B-E3E337E5A2D2}']
    function Get_Center: OleVariant; safecall;
    procedure Set_Center(Center: OleVariant); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Target: OleVariant; safecall;
    procedure Set_Target(targetPoint: OleVariant); safecall;
    function Get_Direction: OleVariant; safecall;
    procedure Set_Direction(dirVec: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_GridOn: WordBool; safecall;
    procedure Set_GridOn(bGridOn: WordBool); safecall;
    function Get_OrthoOn: WordBool; safecall;
    procedure Set_OrthoOn(bOrthoOn: WordBool); safecall;
    function Get_SnapBasePoint: OleVariant; safecall;
    procedure Set_SnapBasePoint(lowLeft: OleVariant); safecall;
    function Get_SnapOn: WordBool; safecall;
    procedure Set_SnapOn(bSnapOn: WordBool); safecall;
    function Get_SnapRotationAngle: ACAD_ANGLE; safecall;
    procedure Set_SnapRotationAngle(Angle: ACAD_ANGLE); safecall;
    function Get_UCSIconOn: WordBool; safecall;
    procedure Set_UCSIconOn(bIconOn: WordBool); safecall;
    function Get_UCSIconAtOrigin: WordBool; safecall;
    procedure Set_UCSIconAtOrigin(bIconAtOrigin: WordBool); safecall;
    function Get_LowerLeftCorner: OleVariant; safecall;
    function Get_UpperRightCorner: OleVariant; safecall;
    procedure Split(NumWins: AcViewportSplitType); safecall;
    procedure GetGridSpacing(out XSpacing: Double; out YSpacing: Double); safecall;
    procedure SetGridSpacing(XSpacing: Double; YSpacing: Double); safecall;
    procedure GetSnapSpacing(out XSpacing: Double; out YSpacing: Double); safecall;
    procedure SetSnapSpacing(XSpacing: Double; YSpacing: Double); safecall;
    procedure SetView(const View: IAcadView); safecall;
    function Get_ArcSmoothness: Integer; safecall;
    procedure Set_ArcSmoothness(arcSmooth: Integer); safecall;
    property Center: OleVariant read Get_Center write Set_Center;
    property Height: Double read Get_Height write Set_Height;
    property Width: Double read Get_Width write Set_Width;
    property Target: OleVariant read Get_Target write Set_Target;
    property Direction: OleVariant read Get_Direction write Set_Direction;
    property Name: WideString read Get_Name write Set_Name;
    property GridOn: WordBool read Get_GridOn write Set_GridOn;
    property OrthoOn: WordBool read Get_OrthoOn write Set_OrthoOn;
    property SnapBasePoint: OleVariant read Get_SnapBasePoint write Set_SnapBasePoint;
    property SnapOn: WordBool read Get_SnapOn write Set_SnapOn;
    property SnapRotationAngle: ACAD_ANGLE read Get_SnapRotationAngle write Set_SnapRotationAngle;
    property UCSIconOn: WordBool read Get_UCSIconOn write Set_UCSIconOn;
    property UCSIconAtOrigin: WordBool read Get_UCSIconAtOrigin write Set_UCSIconAtOrigin;
    property LowerLeftCorner: OleVariant read Get_LowerLeftCorner;
    property UpperRightCorner: OleVariant read Get_UpperRightCorner;
    property ArcSmoothness: Integer read Get_ArcSmoothness write Set_ArcSmoothness;
  end;

// *********************************************************************//
// DispIntf:  IAcadViewportDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A62E3750-0A58-47D6-B84B-E3E337E5A2D2}
// *********************************************************************//
  IAcadViewportDisp = dispinterface
    ['{A62E3750-0A58-47D6-B84B-E3E337E5A2D2}']
    property Center: OleVariant dispid 1;
    property Height: Double dispid 2;
    property Width: Double dispid 3;
    property Target: OleVariant dispid 4;
    property Direction: OleVariant dispid 5;
    property Name: WideString dispid 6;
    property GridOn: WordBool dispid 7;
    property OrthoOn: WordBool dispid 8;
    property SnapBasePoint: OleVariant dispid 9;
    property SnapOn: WordBool dispid 10;
    property SnapRotationAngle: ACAD_ANGLE dispid 11;
    property UCSIconOn: WordBool dispid 13;
    property UCSIconAtOrigin: WordBool dispid 14;
    property LowerLeftCorner: OleVariant readonly dispid 15;
    property UpperRightCorner: OleVariant readonly dispid 16;
    procedure Split(NumWins: AcViewportSplitType); dispid 17;
    procedure GetGridSpacing(out XSpacing: Double; out YSpacing: Double); dispid 18;
    procedure SetGridSpacing(XSpacing: Double; YSpacing: Double); dispid 19;
    procedure GetSnapSpacing(out XSpacing: Double; out YSpacing: Double); dispid 20;
    procedure SetSnapSpacing(XSpacing: Double; YSpacing: Double); dispid 21;
    procedure SetView(const View: IAcadView); dispid 22;
    property ArcSmoothness: Integer dispid 23;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLayouts
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1636A05E-7F68-4CEE-B93B-8F56BA299293}
// *********************************************************************//
  IAcadLayouts = interface(IAcadObject)
    ['{1636A05E-7F68-4CEE-B93B-8F56BA299293}']
    function Item(Index: OleVariant): IAcadLayout; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadLayout; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadLayoutsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1636A05E-7F68-4CEE-B93B-8F56BA299293}
// *********************************************************************//
  IAcadLayoutsDisp = dispinterface
    ['{1636A05E-7F68-4CEE-B93B-8F56BA299293}']
    function Item(Index: OleVariant): IAcadLayout; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadLayout; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPlotConfigurations
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD2543CB-31A8-4DDD-9162-845E11D7F72F}
// *********************************************************************//
  IAcadPlotConfigurations = interface(IAcadObject)
    ['{AD2543CB-31A8-4DDD-9162-845E11D7F72F}']
    function Item(Index: OleVariant): IAcadPlotConfiguration; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString; ModelType: OleVariant): IAcadPlotConfiguration; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadPlotConfigurationsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD2543CB-31A8-4DDD-9162-845E11D7F72F}
// *********************************************************************//
  IAcadPlotConfigurationsDisp = dispinterface
    ['{AD2543CB-31A8-4DDD-9162-845E11D7F72F}']
    function Item(Index: OleVariant): IAcadPlotConfiguration; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString; ModelType: OleVariant): IAcadPlotConfiguration; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDatabasePreferences
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96435877-2FB6-4842-BD4F-7334ADF4B707}
// *********************************************************************//
  IAcadDatabasePreferences = interface(IDispatch)
    ['{96435877-2FB6-4842-BD4F-7334ADF4B707}']
    function Get_Application: IDispatch; safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(Fill: WordBool); safecall;
    function Get_XRefEdit: WordBool; safecall;
    procedure Set_XRefEdit(Edit: WordBool); safecall;
    function Get_XRefLayerVisibility: WordBool; safecall;
    procedure Set_XRefLayerVisibility(XRefLayerVis: WordBool); safecall;
    function Get_OLELaunch: WordBool; safecall;
    procedure Set_OLELaunch(Launch: WordBool); safecall;
    function Get_AllowLongSymbolNames: WordBool; safecall;
    procedure Set_AllowLongSymbolNames(LongNames: WordBool); safecall;
    function Get_ObjectSortBySelection: WordBool; safecall;
    procedure Set_ObjectSortBySelection(Sort: WordBool); safecall;
    function Get_ObjectSortBySnap: WordBool; safecall;
    procedure Set_ObjectSortBySnap(Sort: WordBool); safecall;
    function Get_ObjectSortByRedraws: WordBool; safecall;
    procedure Set_ObjectSortByRedraws(Sort: WordBool); safecall;
    function Get_ObjectSortByRegens: WordBool; safecall;
    procedure Set_ObjectSortByRegens(Sort: WordBool); safecall;
    function Get_ObjectSortByPlotting: WordBool; safecall;
    procedure Set_ObjectSortByPlotting(Sort: WordBool); safecall;
    function Get_ObjectSortByPSOutput: WordBool; safecall;
    procedure Set_ObjectSortByPSOutput(Sort: WordBool); safecall;
    procedure Set_ContourLinesPerSurface(Path: Integer); safecall;
    function Get_ContourLinesPerSurface: Integer; safecall;
    procedure Set_DisplaySilhouette(Path: WordBool); safecall;
    function Get_DisplaySilhouette: WordBool; safecall;
    procedure Set_MaxActiveViewports(Path: Integer); safecall;
    function Get_MaxActiveViewports: Integer; safecall;
    procedure Set_RenderSmoothness(Path: Double); safecall;
    function Get_RenderSmoothness: Double; safecall;
    procedure Set_SegmentPerPolyline(Path: Integer); safecall;
    function Get_SegmentPerPolyline: Integer; safecall;
    procedure Set_TextFrameDisplay(Path: WordBool); safecall;
    function Get_TextFrameDisplay: WordBool; safecall;
    procedure Set_Lineweight(Path: AcLineWeight); safecall;
    function Get_Lineweight: AcLineWeight; safecall;
    procedure Set_LineWeightDisplay(Path: WordBool); safecall;
    function Get_LineWeightDisplay: WordBool; safecall;
    property Application: IDispatch read Get_Application;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
    property XRefEdit: WordBool read Get_XRefEdit write Set_XRefEdit;
    property XRefLayerVisibility: WordBool read Get_XRefLayerVisibility write Set_XRefLayerVisibility;
    property OLELaunch: WordBool read Get_OLELaunch write Set_OLELaunch;
    property AllowLongSymbolNames: WordBool read Get_AllowLongSymbolNames write Set_AllowLongSymbolNames;
    property ObjectSortBySelection: WordBool read Get_ObjectSortBySelection write Set_ObjectSortBySelection;
    property ObjectSortBySnap: WordBool read Get_ObjectSortBySnap write Set_ObjectSortBySnap;
    property ObjectSortByRedraws: WordBool read Get_ObjectSortByRedraws write Set_ObjectSortByRedraws;
    property ObjectSortByRegens: WordBool read Get_ObjectSortByRegens write Set_ObjectSortByRegens;
    property ObjectSortByPlotting: WordBool read Get_ObjectSortByPlotting write Set_ObjectSortByPlotting;
    property ObjectSortByPSOutput: WordBool read Get_ObjectSortByPSOutput write Set_ObjectSortByPSOutput;
    property ContourLinesPerSurface: Integer read Get_ContourLinesPerSurface write Set_ContourLinesPerSurface;
    property DisplaySilhouette: WordBool read Get_DisplaySilhouette write Set_DisplaySilhouette;
    property MaxActiveViewports: Integer read Get_MaxActiveViewports write Set_MaxActiveViewports;
    property RenderSmoothness: Double read Get_RenderSmoothness write Set_RenderSmoothness;
    property SegmentPerPolyline: Integer read Get_SegmentPerPolyline write Set_SegmentPerPolyline;
    property TextFrameDisplay: WordBool read Get_TextFrameDisplay write Set_TextFrameDisplay;
    property Lineweight: AcLineWeight read Get_Lineweight write Set_Lineweight;
    property LineWeightDisplay: WordBool read Get_LineWeightDisplay write Set_LineWeightDisplay;
  end;

// *********************************************************************//
// DispIntf:  IAcadDatabasePreferencesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96435877-2FB6-4842-BD4F-7334ADF4B707}
// *********************************************************************//
  IAcadDatabasePreferencesDisp = dispinterface
    ['{96435877-2FB6-4842-BD4F-7334ADF4B707}']
    property Application: IDispatch readonly dispid 1;
    property SolidFill: WordBool dispid 2;
    property XRefEdit: WordBool dispid 4;
    property XRefLayerVisibility: WordBool dispid 5;
    property OLELaunch: WordBool dispid 8;
    property AllowLongSymbolNames: WordBool dispid 9;
    property ObjectSortBySelection: WordBool dispid 10;
    property ObjectSortBySnap: WordBool dispid 11;
    property ObjectSortByRedraws: WordBool dispid 12;
    property ObjectSortByRegens: WordBool dispid 13;
    property ObjectSortByPlotting: WordBool dispid 14;
    property ObjectSortByPSOutput: WordBool dispid 16;
    property ContourLinesPerSurface: Integer dispid 19;
    property DisplaySilhouette: WordBool dispid 21;
    property MaxActiveViewports: Integer dispid 22;
    property RenderSmoothness: Double dispid 23;
    property SegmentPerPolyline: Integer dispid 24;
    property TextFrameDisplay: WordBool dispid 25;
    property Lineweight: AcLineWeight dispid 26;
    property LineWeightDisplay: WordBool dispid 27;
  end;

// *********************************************************************//
// Interface: IAcadFileDependencies
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65156CBF-69F4-403C-AC21-682F839048DD}
// *********************************************************************//
  IAcadFileDependencies = interface(IDispatch)
    ['{65156CBF-69F4-403C-AC21-682F839048DD}']
    function Item(Index: OleVariant): IAcadFileDependency; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Application: IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function CreateEntry(const Feature: WideString; const FullFileName: WideString; 
                         AffectsGraphics: WordBool; noIncrement: WordBool): Integer; safecall;
    function IndexOf(const Feature: WideString; const FullFileName: WideString): Integer; safecall;
    procedure RemoveEntry(Index: Integer; forceRemove: WordBool); safecall;
    procedure UpdateEntry(Index: Integer); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Application: IDispatch read Get_Application;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IAcadFileDependenciesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65156CBF-69F4-403C-AC21-682F839048DD}
// *********************************************************************//
  IAcadFileDependenciesDisp = dispinterface
    ['{65156CBF-69F4-403C-AC21-682F839048DD}']
    function Item(Index: OleVariant): IAcadFileDependency; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Application: IDispatch readonly dispid 1;
    property Count: Integer readonly dispid 2;
    function CreateEntry(const Feature: WideString; const FullFileName: WideString; 
                         AffectsGraphics: WordBool; noIncrement: WordBool): Integer; dispid 3;
    function IndexOf(const Feature: WideString; const FullFileName: WideString): Integer; dispid 4;
    procedure RemoveEntry(Index: Integer; forceRemove: WordBool); dispid 5;
    procedure UpdateEntry(Index: Integer); dispid 6;
  end;

// *********************************************************************//
// Interface: IAcadFileDependency
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F309A783-F98D-4B85-AE32-BE0470A8A370}
// *********************************************************************//
  IAcadFileDependency = interface(IDispatch)
    ['{F309A783-F98D-4B85-AE32-BE0470A8A370}']
    function Get_FullFileName: WideString; safecall;
    function Get_FileName: WideString; safecall;
    function Get_FoundPath: WideString; safecall;
    function Get_FingerprintGuid: WideString; safecall;
    function Get_VersionGuid: WideString; safecall;
    function Get_Feature: WideString; safecall;
    function Get_IsModified: WordBool; safecall;
    function Get_AffectsGraphics: WordBool; safecall;
    function Get_Index: Integer; safecall;
    function Get_TimeStamp: Integer; safecall;
    function Get_FileSize: Integer; safecall;
    function Get_ReferenceCount: Integer; safecall;
    property FullFileName: WideString read Get_FullFileName;
    property FileName: WideString read Get_FileName;
    property FoundPath: WideString read Get_FoundPath;
    property FingerprintGuid: WideString read Get_FingerprintGuid;
    property VersionGuid: WideString read Get_VersionGuid;
    property Feature: WideString read Get_Feature;
    property IsModified: WordBool read Get_IsModified;
    property AffectsGraphics: WordBool read Get_AffectsGraphics;
    property Index: Integer read Get_Index;
    property TimeStamp: Integer read Get_TimeStamp;
    property FileSize: Integer read Get_FileSize;
    property ReferenceCount: Integer read Get_ReferenceCount;
  end;

// *********************************************************************//
// DispIntf:  IAcadFileDependencyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F309A783-F98D-4B85-AE32-BE0470A8A370}
// *********************************************************************//
  IAcadFileDependencyDisp = dispinterface
    ['{F309A783-F98D-4B85-AE32-BE0470A8A370}']
    property FullFileName: WideString readonly dispid 1;
    property FileName: WideString readonly dispid 2;
    property FoundPath: WideString readonly dispid 3;
    property FingerprintGuid: WideString readonly dispid 4;
    property VersionGuid: WideString readonly dispid 5;
    property Feature: WideString readonly dispid 6;
    property IsModified: WordBool readonly dispid 7;
    property AffectsGraphics: WordBool readonly dispid 8;
    property Index: Integer readonly dispid 9;
    property TimeStamp: Integer readonly dispid 16;
    property FileSize: Integer readonly dispid 17;
    property ReferenceCount: Integer readonly dispid 18;
  end;

// *********************************************************************//
// Interface: IAcadSummaryInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39EB94EF-3858-4DCF-8A69-3BEACBA10B7F}
// *********************************************************************//
  IAcadSummaryInfo = interface(IDispatch)
    ['{39EB94EF-3858-4DCF-8A69-3BEACBA10B7F}']
    function Get_Author: WideString; safecall;
    procedure Set_Author(const pAuthor: WideString); safecall;
    function Get_Comments: WideString; safecall;
    procedure Set_Comments(const pComments: WideString); safecall;
    function Get_HyperlinkBase: WideString; safecall;
    procedure Set_HyperlinkBase(const pHyperlinkBase: WideString); safecall;
    function Get_Keywords: WideString; safecall;
    procedure Set_Keywords(const pKeywords: WideString); safecall;
    function Get_LastSavedBy: WideString; safecall;
    procedure Set_LastSavedBy(const pLastSavedBy: WideString); safecall;
    function Get_RevisionNumber: WideString; safecall;
    procedure Set_RevisionNumber(const pRevisionNumber: WideString); safecall;
    function Get_Subject: WideString; safecall;
    procedure Set_Subject(const pSubject: WideString); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const pTitle: WideString); safecall;
    function NumCustomInfo: SYSINT; safecall;
    procedure GetCustomByIndex(Index: SYSINT; out pKey: WideString; out pValue: WideString); safecall;
    procedure GetCustomByKey(const key: WideString; out pValue: WideString); safecall;
    procedure SetCustomByIndex(Index: SYSINT; const key: WideString; const Value: WideString); safecall;
    procedure SetCustomByKey(const key: WideString; const Value: WideString); safecall;
    procedure AddCustomInfo(const key: WideString; const Value: WideString); safecall;
    procedure RemoveCustomByIndex(Index: SYSINT); safecall;
    procedure RemoveCustomByKey(const key: WideString); safecall;
    property Author: WideString read Get_Author write Set_Author;
    property Comments: WideString read Get_Comments write Set_Comments;
    property HyperlinkBase: WideString read Get_HyperlinkBase write Set_HyperlinkBase;
    property Keywords: WideString read Get_Keywords write Set_Keywords;
    property LastSavedBy: WideString read Get_LastSavedBy write Set_LastSavedBy;
    property RevisionNumber: WideString read Get_RevisionNumber write Set_RevisionNumber;
    property Subject: WideString read Get_Subject write Set_Subject;
    property Title: WideString read Get_Title write Set_Title;
  end;

// *********************************************************************//
// DispIntf:  IAcadSummaryInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39EB94EF-3858-4DCF-8A69-3BEACBA10B7F}
// *********************************************************************//
  IAcadSummaryInfoDisp = dispinterface
    ['{39EB94EF-3858-4DCF-8A69-3BEACBA10B7F}']
    property Author: WideString dispid 1;
    property Comments: WideString dispid 2;
    property HyperlinkBase: WideString dispid 3;
    property Keywords: WideString dispid 4;
    property LastSavedBy: WideString dispid 5;
    property RevisionNumber: WideString dispid 6;
    property Subject: WideString dispid 7;
    property Title: WideString dispid 8;
    function NumCustomInfo: SYSINT; dispid 9;
    procedure GetCustomByIndex(Index: SYSINT; out pKey: WideString; out pValue: WideString); dispid 10;
    procedure GetCustomByKey(const key: WideString; out pValue: WideString); dispid 11;
    procedure SetCustomByIndex(Index: SYSINT; const key: WideString; const Value: WideString); dispid 12;
    procedure SetCustomByKey(const key: WideString; const Value: WideString); dispid 13;
    procedure AddCustomInfo(const key: WideString; const Value: WideString); dispid 14;
    procedure RemoveCustomByIndex(Index: SYSINT); dispid 15;
    procedure RemoveCustomByKey(const key: WideString); dispid 16;
  end;

// *********************************************************************//
// Interface: IAcadSectionManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ADB25D2B-4067-4D46-8B2B-6B9E9BA4D1AD}
// *********************************************************************//
  IAcadSectionManager = interface(IAcadObject)
    ['{ADB25D2B-4067-4D46-8B2B-6B9E9BA4D1AD}']
    function Item(Index: OleVariant): IAcadSection; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function GetLiveSection: IAcadSection; safecall;
    function GetUniqueSectionName(const pBaseName: WideString): WideString; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IAcadSectionManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ADB25D2B-4067-4D46-8B2B-6B9E9BA4D1AD}
// *********************************************************************//
  IAcadSectionManagerDisp = dispinterface
    ['{ADB25D2B-4067-4D46-8B2B-6B9E9BA4D1AD}']
    function Item(Index: OleVariant): IAcadSection; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1;
    function GetLiveSection: IAcadSection; dispid 2;
    function GetUniqueSectionName(const pBaseName: WideString): WideString; dispid 3;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadMaterials
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2F7B997-2B44-4BD0-8EB6-16C819BE3EF3}
// *********************************************************************//
  IAcadMaterials = interface(IAcadObject)
    ['{E2F7B997-2B44-4BD0-8EB6-16C819BE3EF3}']
    function Item(Index: OleVariant): IAcadMaterial; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Add(const Name: WideString): IAcadMaterial; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAcadMaterialsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2F7B997-2B44-4BD0-8EB6-16C819BE3EF3}
// *********************************************************************//
  IAcadMaterialsDisp = dispinterface
    ['{E2F7B997-2B44-4BD0-8EB6-16C819BE3EF3}']
    function Item(Index: OleVariant): IAcadMaterial; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Name: WideString): IAcadMaterial; dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadMaterial
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5E69D338-33B4-40D3-9D02-ADA45791E720}
// *********************************************************************//
  IAcadMaterial = interface(IAcadObject)
    ['{5E69D338-33B4-40D3-9D02-ADA45791E720}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const bstrDes: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    property Description: WideString read Get_Description write Set_Description;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IAcadMaterialDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5E69D338-33B4-40D3-9D02-ADA45791E720}
// *********************************************************************//
  IAcadMaterialDisp = dispinterface
    ['{5E69D338-33B4-40D3-9D02-ADA45791E720}']
    property Description: WideString dispid 1;
    property Name: WideString dispid 2;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadDynamicBlockReferenceProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8607EF79-E042-46C4-8DF9-E96946D5C33D}
// *********************************************************************//
  IAcadDynamicBlockReferenceProperty = interface(IDispatch)
    ['{8607EF79-E042-46C4-8DF9-E96946D5C33D}']
    function Get_PropertyName: WideString; safecall;
    function Get_ReadOnly: WordBool; safecall;
    function Get_Show: WordBool; safecall;
    function Get_Description: WideString; safecall;
    function Get_AllowedValues: OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(Value: OleVariant); safecall;
    function Get_UnitsType: AcDynamicBlockReferencePropertyUnitsType; safecall;
    property PropertyName: WideString read Get_PropertyName;
    property ReadOnly: WordBool read Get_ReadOnly;
    property Show: WordBool read Get_Show;
    property Description: WideString read Get_Description;
    property AllowedValues: OleVariant read Get_AllowedValues;
    property Value: OleVariant read Get_Value write Set_Value;
    property UnitsType: AcDynamicBlockReferencePropertyUnitsType read Get_UnitsType;
  end;

// *********************************************************************//
// DispIntf:  IAcadDynamicBlockReferencePropertyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8607EF79-E042-46C4-8DF9-E96946D5C33D}
// *********************************************************************//
  IAcadDynamicBlockReferencePropertyDisp = dispinterface
    ['{8607EF79-E042-46C4-8DF9-E96946D5C33D}']
    property PropertyName: WideString readonly dispid 1;
    property ReadOnly: WordBool readonly dispid 2;
    property Show: WordBool readonly dispid 3;
    property Description: WideString readonly dispid 4;
    property AllowedValues: OleVariant readonly dispid 5;
    property Value: OleVariant dispid 6;
    property UnitsType: AcDynamicBlockReferencePropertyUnitsType readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IAcadObjectEvents
// Flags:     (256) OleAutomation
// GUID:      {62998C8F-62F6-455F-806B-1604A1892F62}
// *********************************************************************//
  IAcadObjectEvents = interface(IUnknown)
    ['{62998C8F-62F6-455F-806B-1604A1892F62}']
    function Modified(const pObject: IAcadObject): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAcadSortentsTable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73166AEE-97AE-4F35-AD73-DFCD36E37C04}
// *********************************************************************//
  IAcadSortentsTable = interface(IAcadObject)
    ['{73166AEE-97AE-4F35-AD73-DFCD36E37C04}']
    procedure MoveToBottom(Objects: OleVariant); safecall;
    procedure MoveToTop(Objects: OleVariant); safecall;
    procedure MoveBelow(Objects: OleVariant; const Target: IAcadEntity); safecall;
    procedure MoveAbove(Objects: OleVariant; const Target: IAcadEntity); safecall;
    procedure SwapOrder(const Object1: IAcadEntity; const Object2: IAcadEntity); safecall;
    function Block: IAcadBlock; safecall;
    procedure GetFullDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool); safecall;
    procedure GetRelativeDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool); safecall;
    procedure SetRelativeDrawOrder(Objects: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  IAcadSortentsTableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73166AEE-97AE-4F35-AD73-DFCD36E37C04}
// *********************************************************************//
  IAcadSortentsTableDisp = dispinterface
    ['{73166AEE-97AE-4F35-AD73-DFCD36E37C04}']
    procedure MoveToBottom(Objects: OleVariant); dispid 1;
    procedure MoveToTop(Objects: OleVariant); dispid 2;
    procedure MoveBelow(Objects: OleVariant; const Target: IAcadEntity); dispid 3;
    procedure MoveAbove(Objects: OleVariant; const Target: IAcadEntity); dispid 4;
    procedure SwapOrder(const Object1: IAcadEntity; const Object2: IAcadEntity); dispid 5;
    function Block: IAcadBlock; dispid 6;
    procedure GetFullDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool); dispid 7;
    procedure GetRelativeDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool); dispid 8;
    procedure SetRelativeDrawOrder(Objects: OleVariant); dispid 9;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadIdPair
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA1895FD-9DF5-4824-9597-8FB7EA336887}
// *********************************************************************//
  IAcadIdPair = interface(IDispatch)
    ['{AA1895FD-9DF5-4824-9597-8FB7EA336887}']
    function Get_IsCloned: WordBool; safecall;
    function Get_IsOwnerXlated: WordBool; safecall;
    function Get_IsPrimary: WordBool; safecall;
    function Get_key: Integer; safecall;
    function Get_Value: Integer; safecall;
    function Get_Application: IDispatch; safecall;
    property IsCloned: WordBool read Get_IsCloned;
    property IsOwnerXlated: WordBool read Get_IsOwnerXlated;
    property IsPrimary: WordBool read Get_IsPrimary;
    property key: Integer read Get_key;
    property Value: Integer read Get_Value;
    property Application: IDispatch read Get_Application;
  end;

// *********************************************************************//
// DispIntf:  IAcadIdPairDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA1895FD-9DF5-4824-9597-8FB7EA336887}
// *********************************************************************//
  IAcadIdPairDisp = dispinterface
    ['{AA1895FD-9DF5-4824-9597-8FB7EA336887}']
    property IsCloned: WordBool readonly dispid 1;
    property IsOwnerXlated: WordBool readonly dispid 2;
    property IsPrimary: WordBool readonly dispid 3;
    property key: Integer readonly dispid 4;
    property Value: Integer readonly dispid 5;
    property Application: IDispatch readonly dispid 6;
  end;

// *********************************************************************//
// Interface: IAcadTableStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1EF838D-1F50-4313-9A42-B290F14470AB}
// *********************************************************************//
  IAcadTableStyle = interface(IAcadObject)
    ['{C1EF838D-1F50-4313-9A42-B290F14470AB}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrValue: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const bstr: WideString); safecall;
    function Get_BitFlags: Integer; safecall;
    procedure Set_BitFlags(bitFlag: Integer); safecall;
    function Get_FlowDirection: AcTableDirection; safecall;
    procedure Set_FlowDirection(pFlow: AcTableDirection); safecall;
    function Get_HorzCellMargin: Double; safecall;
    procedure Set_HorzCellMargin(dHorzCellMargin: Double); safecall;
    function Get_VertCellMargin: Double; safecall;
    procedure Set_VertCellMargin(dVertCellMargin: Double); safecall;
    function Get_TitleSuppressed: WordBool; safecall;
    procedure Set_TitleSuppressed(bValue: WordBool); safecall;
    function Get_HeaderSuppressed: WordBool; safecall;
    procedure Set_HeaderSuppressed(bValue: WordBool); safecall;
    function GetTextStyle(rowType: AcRowType): WideString; safecall;
    procedure SetTextStyle(rowTypes: SYSINT; const bstrName: WideString); safecall;
    function GetTextHeight(rowType: AcRowType): Double; safecall;
    procedure SetTextHeight(rowTypes: SYSINT; TextHeight: Double); safecall;
    function GetAlignment(rowType: AcRowType): AcCellAlignment; safecall;
    procedure SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment); safecall;
    function GetColor(rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetBackgroundColorNone(rowType: AcRowType): WordBool; safecall;
    procedure SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool); safecall;
    function GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT; safecall;
    procedure SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; Lineweight: ACAD_LWEIGHT); safecall;
    function GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor; safecall;
    procedure SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; const pColor: IAcadAcCmColor); safecall;
    function GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool; safecall;
    procedure SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; bValue: WordBool); safecall;
    procedure GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                          out pUnitType: AcValueUnitType); safecall;
    procedure SetDataType(rowTypes: SYSINT; nDataType: AcValueDataType; nUnitType: AcValueUnitType); safecall;
    function GetFormat(rowType: AcRowType): WideString; safecall;
    procedure SetFormat(rowTypes: SYSINT; const val: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property BitFlags: Integer read Get_BitFlags write Set_BitFlags;
    property FlowDirection: AcTableDirection read Get_FlowDirection write Set_FlowDirection;
    property HorzCellMargin: Double read Get_HorzCellMargin write Set_HorzCellMargin;
    property VertCellMargin: Double read Get_VertCellMargin write Set_VertCellMargin;
    property TitleSuppressed: WordBool read Get_TitleSuppressed write Set_TitleSuppressed;
    property HeaderSuppressed: WordBool read Get_HeaderSuppressed write Set_HeaderSuppressed;
  end;

// *********************************************************************//
// DispIntf:  IAcadTableStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1EF838D-1F50-4313-9A42-B290F14470AB}
// *********************************************************************//
  IAcadTableStyleDisp = dispinterface
    ['{C1EF838D-1F50-4313-9A42-B290F14470AB}']
    property Name: WideString dispid 1;
    property Description: WideString dispid 2;
    property BitFlags: Integer dispid 3;
    property FlowDirection: AcTableDirection dispid 4;
    property HorzCellMargin: Double dispid 5;
    property VertCellMargin: Double dispid 6;
    property TitleSuppressed: WordBool dispid 7;
    property HeaderSuppressed: WordBool dispid 8;
    function GetTextStyle(rowType: AcRowType): WideString; dispid 9;
    procedure SetTextStyle(rowTypes: SYSINT; const bstrName: WideString); dispid 10;
    function GetTextHeight(rowType: AcRowType): Double; dispid 11;
    procedure SetTextHeight(rowTypes: SYSINT; TextHeight: Double); dispid 12;
    function GetAlignment(rowType: AcRowType): AcCellAlignment; dispid 13;
    procedure SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment); dispid 14;
    function GetColor(rowType: AcRowType): IAcadAcCmColor; dispid 15;
    procedure SetColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 16;
    function GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor; dispid 17;
    procedure SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 18;
    function GetBackgroundColorNone(rowType: AcRowType): WordBool; dispid 19;
    procedure SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool); dispid 20;
    function GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT; dispid 21;
    procedure SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; Lineweight: ACAD_LWEIGHT); dispid 22;
    function GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor; dispid 23;
    procedure SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; const pColor: IAcadAcCmColor); dispid 24;
    function GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool; dispid 25;
    procedure SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; bValue: WordBool); dispid 26;
    procedure GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                          out pUnitType: AcValueUnitType); dispid 27;
    procedure SetDataType(rowTypes: SYSINT; nDataType: AcValueDataType; nUnitType: AcValueUnitType); dispid 28;
    function GetFormat(rowType: AcRowType): WideString; dispid 29;
    procedure SetFormat(rowTypes: SYSINT; const val: WideString); dispid 30;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadShadowDisplay
// Flags:     (320) Dual OleAutomation
// GUID:      {3836C443-B84E-4F50-A3F5-D7DF6FF5366A}
// *********************************************************************//
  IAcadShadowDisplay = interface(IUnknown)
    ['{3836C443-B84E-4F50-A3F5-D7DF6FF5366A}']
    function Get_ShadowDisplay: AcShadowDisplayType; safecall;
    procedure Set_ShadowDisplay(ShadowDisplay: AcShadowDisplayType); safecall;
    function Get_EnableShadowDisplay: Integer; safecall;
    property ShadowDisplay: AcShadowDisplayType read Get_ShadowDisplay write Set_ShadowDisplay;
    property EnableShadowDisplay: Integer read Get_EnableShadowDisplay;
  end;

// *********************************************************************//
// DispIntf:  IAcadShadowDisplayDisp
// Flags:     (320) Dual OleAutomation
// GUID:      {3836C443-B84E-4F50-A3F5-D7DF6FF5366A}
// *********************************************************************//
  IAcadShadowDisplayDisp = dispinterface
    ['{3836C443-B84E-4F50-A3F5-D7DF6FF5366A}']
    property ShadowDisplay: AcShadowDisplayType dispid 1610678272;
    property EnableShadowDisplay: Integer readonly dispid 1610678274;
  end;

// *********************************************************************//
// Interface: IAcadAttributeReference
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9930D00-3154-46E9-9101-E5E963F0D1FF}
// *********************************************************************//
  IAcadAttributeReference = interface(IAcadEntity)
    ['{A9930D00-3154-46E9-9101-E5E963F0D1FF}']
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_HorizontalAlignment: AcHorizontalAlignment; safecall;
    procedure Set_HorizontalAlignment(horizAlign: AcHorizontalAlignment); safecall;
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Normal: OleVariant); safecall;
    function Get_ObliqueAngle: ACAD_ANGLE; safecall;
    procedure Set_ObliqueAngle(obliAngle: ACAD_ANGLE); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(scalFactor: ACAD_NOUNITS); safecall;
    function Get_StyleName: WideString; safecall;
    procedure Set_StyleName(const Name: WideString); safecall;
    function Get_TagString: WideString; safecall;
    procedure Set_TagString(const bstrTag: WideString); safecall;
    function Get_TextAlignmentPoint: OleVariant; safecall;
    procedure Set_TextAlignmentPoint(alignPoint: OleVariant); safecall;
    function Get_TextGenerationFlag: Integer; safecall;
    procedure Set_TextGenerationFlag(textGenFlag: Integer); safecall;
    function Get_TextString: WideString; safecall;
    procedure Set_TextString(const bstrText: WideString); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_VerticalAlignment: AcVerticalAlignment; safecall;
    procedure Set_VerticalAlignment(vertiAlign: AcVerticalAlignment); safecall;
    function Get_FieldLength: Integer; safecall;
    procedure Set_FieldLength(fieldLen: Integer); safecall;
    function Get_Alignment: AcAlignment; safecall;
    procedure Set_Alignment(align: AcAlignment); safecall;
    function Get_UpsideDown: WordBool; safecall;
    procedure Set_UpsideDown(bUpsideDown: WordBool); safecall;
    function Get_Backward: WordBool; safecall;
    procedure Set_Backward(bBackward: WordBool); safecall;
    function Get_Invisible: WordBool; safecall;
    procedure Set_Invisible(bInvisible: WordBool); safecall;
    function Get_Constant: WordBool; safecall;
    function Get_LockPosition: WordBool; safecall;
    property Height: Double read Get_Height write Set_Height;
    property HorizontalAlignment: AcHorizontalAlignment read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property ObliqueAngle: ACAD_ANGLE read Get_ObliqueAngle write Set_ObliqueAngle;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property StyleName: WideString read Get_StyleName write Set_StyleName;
    property TagString: WideString read Get_TagString write Set_TagString;
    property TextAlignmentPoint: OleVariant read Get_TextAlignmentPoint write Set_TextAlignmentPoint;
    property TextGenerationFlag: Integer read Get_TextGenerationFlag write Set_TextGenerationFlag;
    property TextString: WideString read Get_TextString write Set_TextString;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property VerticalAlignment: AcVerticalAlignment read Get_VerticalAlignment write Set_VerticalAlignment;
    property FieldLength: Integer read Get_FieldLength write Set_FieldLength;
    property Alignment: AcAlignment read Get_Alignment write Set_Alignment;
    property UpsideDown: WordBool read Get_UpsideDown write Set_UpsideDown;
    property Backward: WordBool read Get_Backward write Set_Backward;
    property Invisible: WordBool read Get_Invisible write Set_Invisible;
    property Constant: WordBool read Get_Constant;
    property LockPosition: WordBool read Get_LockPosition;
  end;

// *********************************************************************//
// DispIntf:  IAcadAttributeReferenceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9930D00-3154-46E9-9101-E5E963F0D1FF}
// *********************************************************************//
  IAcadAttributeReferenceDisp = dispinterface
    ['{A9930D00-3154-46E9-9101-E5E963F0D1FF}']
    property Height: Double dispid 1;
    property HorizontalAlignment: AcHorizontalAlignment dispid 2;
    property InsertionPoint: OleVariant dispid 3;
    property Normal: OleVariant dispid 4;
    property ObliqueAngle: ACAD_ANGLE dispid 5;
    property Rotation: ACAD_ANGLE dispid 6;
    property ScaleFactor: ACAD_NOUNITS dispid 7;
    property StyleName: WideString dispid 8;
    property TagString: WideString dispid 9;
    property TextAlignmentPoint: OleVariant dispid 10;
    property TextGenerationFlag: Integer dispid 11;
    property TextString: WideString dispid 12;
    property Thickness: Double dispid 13;
    property VerticalAlignment: AcVerticalAlignment dispid 14;
    property FieldLength: Integer dispid 15;
    property Alignment: AcAlignment dispid 16;
    property UpsideDown: WordBool dispid 17;
    property Backward: WordBool dispid 18;
    property Invisible: WordBool dispid 19;
    property Constant: WordBool readonly dispid 20;
    property LockPosition: WordBool readonly dispid 25;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadOle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83DA5978-433D-4873-B80A-E353D0AEC540}
// *********************************************************************//
  IAcadOle = interface(IAcadEntity)
    ['{83DA5978-433D-4873-B80A-E353D0AEC540}']
    function Get_InsertionPoint: OleVariant; safecall;
    procedure Set_InsertionPoint(insPoint: OleVariant); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rot: ACAD_ANGLE); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_ScaleWidth: Double; safecall;
    procedure Set_ScaleWidth(swidth: Double); safecall;
    function Get_ScaleHeight: Double; safecall;
    procedure Set_ScaleHeight(sheight: Double); safecall;
    function Get_LockAspectRatio: WordBool; safecall;
    procedure Set_LockAspectRatio(aspect: WordBool); safecall;
    function Get_OleItemType: AcOleType; safecall;
    procedure Set_OleItemType(pType: AcOleType); safecall;
    function Get_OlePlotQuality: AcOlePlotQuality; safecall;
    procedure Set_OlePlotQuality(pPQuality: AcOlePlotQuality); safecall;
    function Get_OleSourceApp: WideString; safecall;
    procedure Set_OleSourceApp(const srcApp: WideString); safecall;
    property InsertionPoint: OleVariant read Get_InsertionPoint write Set_InsertionPoint;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property ScaleWidth: Double read Get_ScaleWidth write Set_ScaleWidth;
    property ScaleHeight: Double read Get_ScaleHeight write Set_ScaleHeight;
    property LockAspectRatio: WordBool read Get_LockAspectRatio write Set_LockAspectRatio;
    property OleItemType: AcOleType read Get_OleItemType write Set_OleItemType;
    property OlePlotQuality: AcOlePlotQuality read Get_OlePlotQuality write Set_OlePlotQuality;
    property OleSourceApp: WideString read Get_OleSourceApp write Set_OleSourceApp;
  end;

// *********************************************************************//
// DispIntf:  IAcadOleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83DA5978-433D-4873-B80A-E353D0AEC540}
// *********************************************************************//
  IAcadOleDisp = dispinterface
    ['{83DA5978-433D-4873-B80A-E353D0AEC540}']
    property InsertionPoint: OleVariant dispid 1;
    property Rotation: ACAD_ANGLE dispid 2;
    property Width: Double dispid 3;
    property Height: Double dispid 4;
    property ScaleWidth: Double dispid 5;
    property ScaleHeight: Double dispid 6;
    property LockAspectRatio: WordBool dispid 7;
    property OleItemType: AcOleType dispid 8;
    property OlePlotQuality: AcOlePlotQuality dispid 9;
    property OleSourceApp: WideString dispid 10;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadHelix
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0D0377A-C3ED-4F5A-87CE-2AAC3C141D32}
// *********************************************************************//
  IAcadHelix = interface(IAcadEntity)
    ['{E0D0377A-C3ED-4F5A-87CE-2AAC3C141D32}']
    function Get_Position: OleVariant; safecall;
    procedure Set_Position(StartPoint: OleVariant); safecall;
    function Get_Constrain: AcHelixConstrainType; safecall;
    procedure Set_Constrain(constrainType: AcHelixConstrainType); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Length: Double); safecall;
    function Get_Turns: ACAD_NOUNITS; safecall;
    procedure Set_Turns(Turns: ACAD_NOUNITS); safecall;
    function Get_TurnHeight: Double; safecall;
    procedure Set_TurnHeight(Distance: Double); safecall;
    function Get_BaseRadius: Double; safecall;
    procedure Set_BaseRadius(Radius: Double); safecall;
    function Get_TopRadius: Double; safecall;
    procedure Set_TopRadius(Radius: Double); safecall;
    function Get_Twist: AcHelixTwistType; safecall;
    procedure Set_Twist(twistType: AcHelixTwistType); safecall;
    function Get_TurnSlope: ACAD_ANGLE; safecall;
    function Get_TotalLength: Double; safecall;
    property Position: OleVariant read Get_Position write Set_Position;
    property Constrain: AcHelixConstrainType read Get_Constrain write Set_Constrain;
    property Height: Double read Get_Height write Set_Height;
    property Turns: ACAD_NOUNITS read Get_Turns write Set_Turns;
    property TurnHeight: Double read Get_TurnHeight write Set_TurnHeight;
    property BaseRadius: Double read Get_BaseRadius write Set_BaseRadius;
    property TopRadius: Double read Get_TopRadius write Set_TopRadius;
    property Twist: AcHelixTwistType read Get_Twist write Set_Twist;
    property TurnSlope: ACAD_ANGLE read Get_TurnSlope;
    property TotalLength: Double read Get_TotalLength;
  end;

// *********************************************************************//
// DispIntf:  IAcadHelixDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0D0377A-C3ED-4F5A-87CE-2AAC3C141D32}
// *********************************************************************//
  IAcadHelixDisp = dispinterface
    ['{E0D0377A-C3ED-4F5A-87CE-2AAC3C141D32}']
    property Position: OleVariant dispid 1;
    property Constrain: AcHelixConstrainType dispid 2;
    property Height: Double dispid 3;
    property Turns: ACAD_NOUNITS dispid 4;
    property TurnHeight: Double dispid 5;
    property BaseRadius: Double dispid 6;
    property TopRadius: Double dispid 7;
    property Twist: AcHelixTwistType dispid 8;
    property TurnSlope: ACAD_ANGLE readonly dispid 9;
    property TotalLength: Double readonly dispid 10;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59747640-33C2-4824-B942-57E893619124}
// *********************************************************************//
  IAcadSurface = interface(IAcadEntity)
    ['{59747640-33C2-4824-B942-57E893619124}']
    function Get_SurfaceType: WideString; safecall;
    function Get_UIsolineDensity: Integer; safecall;
    procedure Set_UIsolineDensity(density: Integer); safecall;
    function Get_VIsolineDensity: Integer; safecall;
    procedure Set_VIsolineDensity(density: Integer); safecall;
    property SurfaceType: WideString read Get_SurfaceType;
    property UIsolineDensity: Integer read Get_UIsolineDensity write Set_UIsolineDensity;
    property VIsolineDensity: Integer read Get_VIsolineDensity write Set_VIsolineDensity;
  end;

// *********************************************************************//
// DispIntf:  IAcadSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59747640-33C2-4824-B942-57E893619124}
// *********************************************************************//
  IAcadSurfaceDisp = dispinterface
    ['{59747640-33C2-4824-B942-57E893619124}']
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadPlaneSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C19880A-0BAF-4899-80DB-1F672CFBF5FC}
// *********************************************************************//
  IAcadPlaneSurface = interface(IAcadSurface)
    ['{4C19880A-0BAF-4899-80DB-1F672CFBF5FC}']
  end;

// *********************************************************************//
// DispIntf:  IAcadPlaneSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C19880A-0BAF-4899-80DB-1F672CFBF5FC}
// *********************************************************************//
  IAcadPlaneSurfaceDisp = dispinterface
    ['{4C19880A-0BAF-4899-80DB-1F672CFBF5FC}']
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadExtrudedSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6069C4B0-6137-4076-B4F0-330CF31EE912}
// *********************************************************************//
  IAcadExtrudedSurface = interface(IAcadSurface)
    ['{6069C4B0-6137-4076-B4F0-330CF31EE912}']
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_TaperAngle: ACAD_ANGLE; safecall;
    procedure Set_TaperAngle(TaperAngle: ACAD_ANGLE); safecall;
    function Get_Direction: OleVariant; safecall;
    property Height: Double read Get_Height write Set_Height;
    property TaperAngle: ACAD_ANGLE read Get_TaperAngle write Set_TaperAngle;
    property Direction: OleVariant read Get_Direction;
  end;

// *********************************************************************//
// DispIntf:  IAcadExtrudedSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6069C4B0-6137-4076-B4F0-330CF31EE912}
// *********************************************************************//
  IAcadExtrudedSurfaceDisp = dispinterface
    ['{6069C4B0-6137-4076-B4F0-330CF31EE912}']
    property Height: Double dispid 2;
    property TaperAngle: ACAD_ANGLE dispid 3;
    property Direction: OleVariant readonly dispid 4;
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadRevolvedSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0E305EE4-A4BB-4D14-A375-B3BAFC9D38C9}
// *********************************************************************//
  IAcadRevolvedSurface = interface(IAcadSurface)
    ['{0E305EE4-A4BB-4D14-A375-B3BAFC9D38C9}']
    function Get_RevolutionAngle: ACAD_ANGLE; safecall;
    procedure Set_RevolutionAngle(revAngle: ACAD_ANGLE); safecall;
    function Get_AxisPosition: OleVariant; safecall;
    procedure Set_AxisPosition(AxisPosition: OleVariant); safecall;
    function Get_AxisDirection: OleVariant; safecall;
    property RevolutionAngle: ACAD_ANGLE read Get_RevolutionAngle write Set_RevolutionAngle;
    property AxisPosition: OleVariant read Get_AxisPosition write Set_AxisPosition;
    property AxisDirection: OleVariant read Get_AxisDirection;
  end;

// *********************************************************************//
// DispIntf:  IAcadRevolvedSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0E305EE4-A4BB-4D14-A375-B3BAFC9D38C9}
// *********************************************************************//
  IAcadRevolvedSurfaceDisp = dispinterface
    ['{0E305EE4-A4BB-4D14-A375-B3BAFC9D38C9}']
    property RevolutionAngle: ACAD_ANGLE dispid 2;
    property AxisPosition: OleVariant dispid 3;
    property AxisDirection: OleVariant readonly dispid 4;
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSweptSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F708280-7555-499F-B5E2-0248AB74AB2F}
// *********************************************************************//
  IAcadSweptSurface = interface(IAcadSurface)
    ['{6F708280-7555-499F-B5E2-0248AB74AB2F}']
    function Get_ProfileRotation: ACAD_ANGLE; safecall;
    procedure Set_ProfileRotation(profileRotationAngle: ACAD_ANGLE); safecall;
    function Get_Bank: WordBool; safecall;
    procedure Set_Bank(bBank: WordBool); safecall;
    function Get_Twist: ACAD_ANGLE; safecall;
    procedure Set_Twist(TwistAngle: ACAD_ANGLE); safecall;
    function Get_scale: Double; safecall;
    procedure Set_scale(scale: Double); safecall;
    function Get_Length: Double; safecall;
    property ProfileRotation: ACAD_ANGLE read Get_ProfileRotation write Set_ProfileRotation;
    property Bank: WordBool read Get_Bank write Set_Bank;
    property Twist: ACAD_ANGLE read Get_Twist write Set_Twist;
    property scale: Double read Get_scale write Set_scale;
    property Length: Double read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  IAcadSweptSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F708280-7555-499F-B5E2-0248AB74AB2F}
// *********************************************************************//
  IAcadSweptSurfaceDisp = dispinterface
    ['{6F708280-7555-499F-B5E2-0248AB74AB2F}']
    property ProfileRotation: ACAD_ANGLE dispid 2;
    property Bank: WordBool dispid 3;
    property Twist: ACAD_ANGLE dispid 4;
    property scale: Double dispid 5;
    property Length: Double readonly dispid 6;
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadLoftedSurface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59FBE27D-91AF-4934-B454-BE0688ABA89D}
// *********************************************************************//
  IAcadLoftedSurface = interface(IAcadSurface)
    ['{59FBE27D-91AF-4934-B454-BE0688ABA89D}']
    function Get_NumCrossSections: Integer; safecall;
    function Get_NumGuidePaths: Integer; safecall;
    function Get_SurfaceNormals: AcLoftedSurfaceNormalType; safecall;
    procedure Set_SurfaceNormals(surfaceNormal: AcLoftedSurfaceNormalType); safecall;
    function Get_StartDraftAngle: ACAD_ANGLE; safecall;
    procedure Set_StartDraftAngle(StartDraftAngle: ACAD_ANGLE); safecall;
    function Get_StartDraftMagnitude: Double; safecall;
    procedure Set_StartDraftMagnitude(startDraftMag: Double); safecall;
    function Get_EndDraftAngle: ACAD_ANGLE; safecall;
    procedure Set_EndDraftAngle(EndDraftAngle: ACAD_ANGLE); safecall;
    function Get_EndDraftMagnitude: Double; safecall;
    procedure Set_EndDraftMagnitude(endDraftMag: Double); safecall;
    function Get_Closed: WordBool; safecall;
    procedure Set_Closed(bClosed: WordBool); safecall;
    property NumCrossSections: Integer read Get_NumCrossSections;
    property NumGuidePaths: Integer read Get_NumGuidePaths;
    property SurfaceNormals: AcLoftedSurfaceNormalType read Get_SurfaceNormals write Set_SurfaceNormals;
    property StartDraftAngle: ACAD_ANGLE read Get_StartDraftAngle write Set_StartDraftAngle;
    property StartDraftMagnitude: Double read Get_StartDraftMagnitude write Set_StartDraftMagnitude;
    property EndDraftAngle: ACAD_ANGLE read Get_EndDraftAngle write Set_EndDraftAngle;
    property EndDraftMagnitude: Double read Get_EndDraftMagnitude write Set_EndDraftMagnitude;
    property Closed: WordBool read Get_Closed write Set_Closed;
  end;

// *********************************************************************//
// DispIntf:  IAcadLoftedSurfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59FBE27D-91AF-4934-B454-BE0688ABA89D}
// *********************************************************************//
  IAcadLoftedSurfaceDisp = dispinterface
    ['{59FBE27D-91AF-4934-B454-BE0688ABA89D}']
    property NumCrossSections: Integer readonly dispid 2;
    property NumGuidePaths: Integer readonly dispid 3;
    property SurfaceNormals: AcLoftedSurfaceNormalType dispid 4;
    property StartDraftAngle: ACAD_ANGLE dispid 5;
    property StartDraftMagnitude: Double dispid 6;
    property EndDraftAngle: ACAD_ANGLE dispid 7;
    property EndDraftMagnitude: Double dispid 8;
    property Closed: WordBool dispid 9;
    property SurfaceType: WideString readonly dispid 1;
    property UIsolineDensity: Integer dispid 10;
    property VIsolineDensity: Integer dispid 11;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadUnderlay
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1140D7A3-E582-4599-B98D-2387DAF35A71}
// *********************************************************************//
  IAcadUnderlay = interface(IAcadEntity)
    ['{1140D7A3-E582-4599-B98D-2387DAF35A71}']
    function Get_Contrast: Integer; safecall;
    procedure Set_Contrast(Contrast: Integer); safecall;
    function Get_Fade: Integer; safecall;
    procedure Set_Fade(Fade: Integer); safecall;
    function Get_Position: OleVariant; safecall;
    procedure Set_Position(pos: OleVariant); safecall;
    function Get_Rotation: ACAD_ANGLE; safecall;
    procedure Set_Rotation(rotAngle: ACAD_ANGLE); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_UnderlayName: WideString; safecall;
    procedure Set_UnderlayName(const Name: WideString); safecall;
    procedure Set_ItemName(const sheetName: WideString); safecall;
    function Get_ItemName: WideString; safecall;
    function Get_Monochrome: WordBool; safecall;
    procedure Set_Monochrome(bMono: WordBool); safecall;
    function Get_AdjustForBackground: WordBool; safecall;
    procedure Set_AdjustForBackground(Value: WordBool); safecall;
    procedure ClipBoundary(boundry: OleVariant); safecall;
    function Get_ScaleFactor: ACAD_NOUNITS; safecall;
    procedure Set_ScaleFactor(ScaleFactor: ACAD_NOUNITS); safecall;
    function Get_File_: WideString; safecall;
    procedure Set_File_(const Name: WideString); safecall;
    function Get_UnderlayVisibility: WordBool; safecall;
    procedure Set_UnderlayVisibility(fVisible: WordBool); safecall;
    function Get_ClippingEnabled: WordBool; safecall;
    procedure Set_ClippingEnabled(kClip: WordBool); safecall;
    property Contrast: Integer read Get_Contrast write Set_Contrast;
    property Fade: Integer read Get_Fade write Set_Fade;
    property Position: OleVariant read Get_Position write Set_Position;
    property Rotation: ACAD_ANGLE read Get_Rotation write Set_Rotation;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property UnderlayName: WideString read Get_UnderlayName write Set_UnderlayName;
    property ItemName: WideString read Get_ItemName write Set_ItemName;
    property Monochrome: WordBool read Get_Monochrome write Set_Monochrome;
    property AdjustForBackground: WordBool read Get_AdjustForBackground write Set_AdjustForBackground;
    property ScaleFactor: ACAD_NOUNITS read Get_ScaleFactor write Set_ScaleFactor;
    property File_: WideString read Get_File_ write Set_File_;
    property UnderlayVisibility: WordBool read Get_UnderlayVisibility write Set_UnderlayVisibility;
    property ClippingEnabled: WordBool read Get_ClippingEnabled write Set_ClippingEnabled;
  end;

// *********************************************************************//
// DispIntf:  IAcadUnderlayDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1140D7A3-E582-4599-B98D-2387DAF35A71}
// *********************************************************************//
  IAcadUnderlayDisp = dispinterface
    ['{1140D7A3-E582-4599-B98D-2387DAF35A71}']
    property Contrast: Integer dispid 1;
    property Fade: Integer dispid 2;
    property Position: OleVariant dispid 3;
    property Rotation: ACAD_ANGLE dispid 4;
    property Width: Double dispid 5;
    property Height: Double dispid 6;
    property UnderlayName: WideString dispid 7;
    property ItemName: WideString dispid 8;
    property Monochrome: WordBool dispid 10;
    property AdjustForBackground: WordBool dispid 15;
    procedure ClipBoundary(boundry: OleVariant); dispid 11;
    property ScaleFactor: ACAD_NOUNITS dispid 12;
    property File_: WideString dispid 13;
    property UnderlayVisibility: WordBool dispid 14;
    property ClippingEnabled: WordBool dispid 16;
    property TrueColor: IAcadAcCmColor dispid 1302;
    property Layer: WideString dispid 1281;
    property Linetype: WideString dispid 1282;
    property LinetypeScale: ACAD_NOUNITS dispid 1283;
    property Visible: WordBool dispid 1284;
    function ArrayPolar(NumberOfObjects: SYSINT; AngleToFill: Double; CenterPoint: OleVariant): OleVariant; dispid 1285;
    function ArrayRectangular(NumberOfRows: SYSINT; NumberOfColumns: SYSINT; 
                              NumberOfLevels: SYSINT; DistBetweenRows: Double; 
                              DistBetweenCols: Double; DistBetweenLevels: Double): OleVariant; dispid 1286;
    procedure Highlight(HighlightFlag: WordBool); dispid 1287;
    function Copy: IDispatch; dispid 1288;
    procedure Move(FromPoint: OleVariant; ToPoint: OleVariant); dispid 1289;
    procedure Rotate(BasePoint: OleVariant; RotationAngle: Double); dispid 1290;
    procedure Rotate3D(Point1: OleVariant; Point2: OleVariant; RotationAngle: Double); dispid 1291;
    function Mirror(Point1: OleVariant; Point2: OleVariant): IDispatch; dispid 1292;
    function Mirror3D(Point1: OleVariant; Point2: OleVariant; point3: OleVariant): IDispatch; dispid 1293;
    procedure ScaleEntity(BasePoint: OleVariant; ScaleFactor: Double); dispid 1294;
    procedure TransformBy(TransformationMatrix: OleVariant); dispid 1295;
    procedure Update; dispid 1296;
    procedure GetBoundingBox(out MinPoint: OleVariant; out MaxPoint: OleVariant); dispid 1297;
    function IntersectWith(const IntersectObject: IDispatch; option: AcExtendOption): OleVariant; dispid 1298;
    property PlotStyleName: WideString dispid 1299;
    property Lineweight: ACAD_LWEIGHT dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
    property Material: WideString dispid 1399;
    property EntityName: WideString readonly dispid 1397;
    property EntityType: Integer readonly dispid 1398;
    property color: ACAD_COLOR dispid 1280;
    property Handle: WideString readonly dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant); dispid 1026;
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant); dispid 1027;
    procedure Delete; dispid 1028;
    property ObjectID: Integer readonly dispid 1029;
    property Application: IDispatch readonly dispid 1030;
    property Database: IAcadDatabase readonly dispid 1031;
    property HasExtensionDictionary: WordBool readonly dispid 1032;
    function GetExtensionDictionary: IAcadDictionary; dispid 1033;
    property OwnerID: Integer readonly dispid 1034;
    property Document: IDispatch readonly dispid 1035;
    procedure Erase; dispid 1141;
  end;

// *********************************************************************//
// Interface: IAcadSubEntity
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FEF26B75-296F-4402-9210-EC80A9B39972}
// *********************************************************************//
  IAcadSubEntity = interface(IDispatch)
    ['{FEF26B75-296F-4402-9210-EC80A9B39972}']
    procedure OnModified; safecall;
    function Get_ObjectName: WideString; safecall;
    function Get_color: IAcadAcCmColor; safecall;
    procedure Set_color(const pColor: IAcadAcCmColor); safecall;
    function Get_Layer: WideString; safecall;
    function Get_Linetype: WideString; safecall;
    function Get_LinetypeScale: ACAD_NOUNITS; safecall;
    function Get_PlotStyleName: WideString; safecall;
    function Get_Lineweight: ACAD_LWEIGHT; safecall;
    function Get_Hyperlinks: IAcadHyperlinks; safecall;
    property ObjectName: WideString read Get_ObjectName;
    property color: IAcadAcCmColor read Get_color write Set_color;
    property Layer: WideString read Get_Layer;
    property Linetype: WideString read Get_Linetype;
    property LinetypeScale: ACAD_NOUNITS read Get_LinetypeScale;
    property PlotStyleName: WideString read Get_PlotStyleName;
    property Lineweight: ACAD_LWEIGHT read Get_Lineweight;
    property Hyperlinks: IAcadHyperlinks read Get_Hyperlinks;
  end;

// *********************************************************************//
// DispIntf:  IAcadSubEntityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FEF26B75-296F-4402-9210-EC80A9B39972}
// *********************************************************************//
  IAcadSubEntityDisp = dispinterface
    ['{FEF26B75-296F-4402-9210-EC80A9B39972}']
    procedure OnModified; dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    property color: IAcadAcCmColor dispid 1302;
    property Layer: WideString readonly dispid 1281;
    property Linetype: WideString readonly dispid 1282;
    property LinetypeScale: ACAD_NOUNITS readonly dispid 1283;
    property PlotStyleName: WideString readonly dispid 1299;
    property Lineweight: ACAD_LWEIGHT readonly dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
  end;

// *********************************************************************//
// Interface: IAcadSubEntSolidFace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {84822F99-8F0C-4F7C-8251-4344919CFEF3}
// *********************************************************************//
  IAcadSubEntSolidFace = interface(IAcadSubEntity)
    ['{84822F99-8F0C-4F7C-8251-4344919CFEF3}']
    function Get_Material: WideString; safecall;
    procedure Set_Material(const Material: WideString); safecall;
    property Material: WideString read Get_Material write Set_Material;
  end;

// *********************************************************************//
// DispIntf:  IAcadSubEntSolidFaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {84822F99-8F0C-4F7C-8251-4344919CFEF3}
// *********************************************************************//
  IAcadSubEntSolidFaceDisp = dispinterface
    ['{84822F99-8F0C-4F7C-8251-4344919CFEF3}']
    property Material: WideString dispid 1399;
    procedure OnModified; dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    property color: IAcadAcCmColor dispid 1302;
    property Layer: WideString readonly dispid 1281;
    property Linetype: WideString readonly dispid 1282;
    property LinetypeScale: ACAD_NOUNITS readonly dispid 1283;
    property PlotStyleName: WideString readonly dispid 1299;
    property Lineweight: ACAD_LWEIGHT readonly dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
  end;

// *********************************************************************//
// Interface: IAcadSubEntSolidEdge
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06619D36-FEC2-4CD3-97F1-84949FFD63C7}
// *********************************************************************//
  IAcadSubEntSolidEdge = interface(IAcadSubEntity)
    ['{06619D36-FEC2-4CD3-97F1-84949FFD63C7}']
  end;

// *********************************************************************//
// DispIntf:  IAcadSubEntSolidEdgeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06619D36-FEC2-4CD3-97F1-84949FFD63C7}
// *********************************************************************//
  IAcadSubEntSolidEdgeDisp = dispinterface
    ['{06619D36-FEC2-4CD3-97F1-84949FFD63C7}']
    procedure OnModified; dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    property color: IAcadAcCmColor dispid 1302;
    property Layer: WideString readonly dispid 1281;
    property Linetype: WideString readonly dispid 1282;
    property LinetypeScale: ACAD_NOUNITS readonly dispid 1283;
    property PlotStyleName: WideString readonly dispid 1299;
    property Lineweight: ACAD_LWEIGHT readonly dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
  end;

// *********************************************************************//
// Interface: IAcadSubEntSolidVertex
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DEF51352-1B14-465C-9183-A69B87A3D11C}
// *********************************************************************//
  IAcadSubEntSolidVertex = interface(IAcadSubEntity)
    ['{DEF51352-1B14-465C-9183-A69B87A3D11C}']
  end;

// *********************************************************************//
// DispIntf:  IAcadSubEntSolidVertexDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DEF51352-1B14-465C-9183-A69B87A3D11C}
// *********************************************************************//
  IAcadSubEntSolidVertexDisp = dispinterface
    ['{DEF51352-1B14-465C-9183-A69B87A3D11C}']
    procedure OnModified; dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    property color: IAcadAcCmColor dispid 1302;
    property Layer: WideString readonly dispid 1281;
    property Linetype: WideString readonly dispid 1282;
    property LinetypeScale: ACAD_NOUNITS readonly dispid 1283;
    property PlotStyleName: WideString readonly dispid 1299;
    property Lineweight: ACAD_LWEIGHT readonly dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
  end;

// *********************************************************************//
// Interface: IAcadSubEntSolidNode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {699B4233-20E7-4638-8439-384D3CB00019}
// *********************************************************************//
  IAcadSubEntSolidNode = interface(IAcadSubEntity)
    ['{699B4233-20E7-4638-8439-384D3CB00019}']
  end;

// *********************************************************************//
// DispIntf:  IAcadSubEntSolidNodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {699B4233-20E7-4638-8439-384D3CB00019}
// *********************************************************************//
  IAcadSubEntSolidNodeDisp = dispinterface
    ['{699B4233-20E7-4638-8439-384D3CB00019}']
    procedure OnModified; dispid 1024;
    property ObjectName: WideString readonly dispid 1025;
    property color: IAcadAcCmColor dispid 1302;
    property Layer: WideString readonly dispid 1281;
    property Linetype: WideString readonly dispid 1282;
    property LinetypeScale: ACAD_NOUNITS readonly dispid 1283;
    property PlotStyleName: WideString readonly dispid 1299;
    property Lineweight: ACAD_LWEIGHT readonly dispid 1300;
    property Hyperlinks: IAcadHyperlinks readonly dispid 1301;
  end;

// *********************************************************************//
// Interface: IAcadSecurityParams
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {805F5969-BFFD-4683-9821-CD5590FF2F4E}
// *********************************************************************//
  IAcadSecurityParams = interface(IDispatch)
    ['{805F5969-BFFD-4683-9821-CD5590FF2F4E}']
    procedure Set_Action(pOperations: Integer); safecall;
    function Get_Action: Integer; safecall;
    procedure Set_Password(const pSecret: WideString); safecall;
    function Get_Password: WideString; safecall;
    procedure Set_ProviderType(pProvType: Integer); safecall;
    function Get_ProviderType: Integer; safecall;
    procedure Set_ProviderName(const pProvName: WideString); safecall;
    function Get_ProviderName: WideString; safecall;
    procedure Set_Algorithm(pAlgId: Integer); safecall;
    function Get_Algorithm: Integer; safecall;
    procedure Set_KeyLength(pKeyLen: Integer); safecall;
    function Get_KeyLength: Integer; safecall;
    procedure Set_Subject(const pCertSubject: WideString); safecall;
    function Get_Subject: WideString; safecall;
    procedure Set_Issuer(const pCertIssuer: WideString); safecall;
    function Get_Issuer: WideString; safecall;
    procedure Set_SerialNumber(const pSerialNum: WideString); safecall;
    function Get_SerialNumber: WideString; safecall;
    procedure Set_Comment(const pText: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_TimeServer(const pTimeServerName: WideString); safecall;
    function Get_TimeServer: WideString; safecall;
    property Action: Integer read Get_Action write Set_Action;
    property Password: WideString read Get_Password write Set_Password;
    property ProviderType: Integer read Get_ProviderType write Set_ProviderType;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property Algorithm: Integer read Get_Algorithm write Set_Algorithm;
    property KeyLength: Integer read Get_KeyLength write Set_KeyLength;
    property Subject: WideString read Get_Subject write Set_Subject;
    property Issuer: WideString read Get_Issuer write Set_Issuer;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Comment: WideString read Get_Comment write Set_Comment;
    property TimeServer: WideString read Get_TimeServer write Set_TimeServer;
  end;

// *********************************************************************//
// DispIntf:  IAcadSecurityParamsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {805F5969-BFFD-4683-9821-CD5590FF2F4E}
// *********************************************************************//
  IAcadSecurityParamsDisp = dispinterface
    ['{805F5969-BFFD-4683-9821-CD5590FF2F4E}']
    property Action: Integer dispid 1;
    property Password: WideString dispid 2;
    property ProviderType: Integer dispid 3;
    property ProviderName: WideString dispid 4;
    property Algorithm: Integer dispid 5;
    property KeyLength: Integer dispid 6;
    property Subject: WideString dispid 7;
    property Issuer: WideString dispid 8;
    property SerialNumber: WideString dispid 9;
    property Comment: WideString dispid 10;
    property TimeServer: WideString dispid 11;
  end;

// *********************************************************************//
// Interface: IAcadLayerStateManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46D38550-0080-484A-97B0-B3A1F5ED9824}
// *********************************************************************//
  IAcadLayerStateManager = interface(IDispatch)
    ['{46D38550-0080-484A-97B0-B3A1F5ED9824}']
    procedure SetDatabase(const iHostDb: IAcadDatabase); safecall;
    procedure Set_Mask(const bsName: WideString; eMask: AcLayerStateMask); safecall;
    function Get_Mask(const bsName: WideString): AcLayerStateMask; safecall;
    procedure Save(const bsName: WideString; eMask: AcLayerStateMask); safecall;
    procedure Restore(const bsName: WideString); safecall;
    procedure Delete(const bsName: WideString); safecall;
    procedure Rename(const bsName: WideString; const bsNewName: WideString); safecall;
    procedure Import(const bsFilename: WideString); safecall;
    procedure Export(const bsName: WideString; const bsFilename: WideString); safecall;
    property Mask[const bsName: WideString]: AcLayerStateMask read Get_Mask write Set_Mask;
  end;

// *********************************************************************//
// DispIntf:  IAcadLayerStateManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46D38550-0080-484A-97B0-B3A1F5ED9824}
// *********************************************************************//
  IAcadLayerStateManagerDisp = dispinterface
    ['{46D38550-0080-484A-97B0-B3A1F5ED9824}']
    procedure SetDatabase(const iHostDb: IAcadDatabase); dispid 1610743808;
    property Mask[const bsName: WideString]: AcLayerStateMask dispid 1610743809;
    procedure Save(const bsName: WideString; eMask: AcLayerStateMask); dispid 1610743811;
    procedure Restore(const bsName: WideString); dispid 1610743812;
    procedure Delete(const bsName: WideString); dispid 1610743813;
    procedure Rename(const bsName: WideString; const bsNewName: WideString); dispid 1610743814;
    procedure Import(const bsFilename: WideString); dispid 1610743815;
    procedure Export(const bsName: WideString; const bsFilename: WideString); dispid 1610743816;
  end;

// *********************************************************************//
// DispIntf:  _DAcadApplicationEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E8D59748-B414-4BE6-AF82-870C62C0CF4C}
// *********************************************************************//
  _DAcadApplicationEvents = dispinterface
    ['{E8D59748-B414-4BE6-AF82-870C62C0CF4C}']
    procedure SysVarChanged(const SysvarName: WideString; newVal: OleVariant); dispid 1;
    procedure NewDrawing; dispid 2;
    procedure AppActivate; dispid 3;
    procedure AppDeactivate; dispid 4;
    procedure WindowMovedOrResized(HWNDFrame: Integer; bMoved: WordBool); dispid 5;
    procedure BeginModal; dispid 6;
    procedure EndModal; dispid 7;
    procedure BeginQuit(var Cancel: WordBool); dispid 8;
    procedure BeginFileDrop(const FileName: WideString; var Cancel: WordBool); dispid 10;
    procedure ARXLoaded(const AppName: WideString); dispid 11;
    procedure ARXUnloaded(const AppName: WideString); dispid 12;
    procedure BeginPlot(const DrawingName: WideString); dispid 13;
    procedure EndPlot(const DrawingName: WideString); dispid 14;
    procedure BeginSave(const FileName: WideString); dispid 19;
    procedure EndSave(const FileName: WideString); dispid 20;
    procedure BeginOpen(var FileName: WideString); dispid 21;
    procedure EndOpen(const FileName: WideString); dispid 22;
    procedure BeginCommand(const CommandName: WideString); dispid 17;
    procedure EndCommand(const CommandName: WideString); dispid 18;
    procedure BeginLisp(const FirstLine: WideString); dispid 15;
    procedure EndLisp; dispid 16;
    procedure LispCancelled; dispid 24;
    procedure WindowChanged(WindowState: AcWindowState); dispid 25;
  end;

// *********************************************************************//
// Interface: IAcadDocument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EB66A59-8FF4-410B-B697-8813116B2C5F}
// *********************************************************************//
  IAcadDocument = interface(IAcadDatabase)
    ['{0EB66A59-8FF4-410B-B697-8813116B2C5F}']
    function Get_Plot: IAcadPlot; safecall;
    function Get_ActiveLayer: IAcadLayer; safecall;
    procedure Set_ActiveLayer(const pActLayer: IAcadLayer); safecall;
    function Get_ActiveLinetype: IAcadLineType; safecall;
    procedure Set_ActiveLinetype(const pActLinetype: IAcadLineType); safecall;
    function Get_ActiveDimStyle: IAcadDimStyle; safecall;
    procedure Set_ActiveDimStyle(const pActDimStyle: IAcadDimStyle); safecall;
    function Get_ActiveTextStyle: IAcadTextStyle; safecall;
    procedure Set_ActiveTextStyle(const pActTextStyle: IAcadTextStyle); safecall;
    function Get_ActiveUCS: IAcadUCS; safecall;
    procedure Set_ActiveUCS(const pActUCS: IAcadUCS); safecall;
    function Get_ActiveViewport: IAcadViewport; safecall;
    procedure Set_ActiveViewport(const pActView: IAcadViewport); safecall;
    function Get_ActivePViewport: IAcadPViewport; safecall;
    procedure Set_ActivePViewport(const pActView: IAcadPViewport); safecall;
    function Get_ActiveSpace: AcActiveSpace; safecall;
    procedure Set_ActiveSpace(ActSpace: AcActiveSpace); safecall;
    function Get_SelectionSets: IAcadSelectionSets; safecall;
    function Get_ActiveSelectionSet: IAcadSelectionSet; safecall;
    function Get_FullName: WideString; safecall;
    function Get_Name: WideString; safecall;
    function Get_Path: WideString; safecall;
    function Get_ObjectSnapMode: WordBool; safecall;
    procedure Set_ObjectSnapMode(fSnapMode: WordBool); safecall;
    function Get_ReadOnly: WordBool; safecall;
    function Get_Saved: WordBool; safecall;
    function Get_MSpace: WordBool; safecall;
    procedure Set_MSpace(Mode: WordBool); safecall;
    function Get_Utility: IAcadUtility; safecall;
    function Open(const FullName: WideString; Password: OleVariant): IAcadDocument; safecall;
    procedure AuditInfo(FixErr: WordBool); safecall;
    function Import(const FileName: WideString; InsertionPoint: OleVariant; ScaleFactor: Double): IDispatch; safecall;
    procedure Export(const FileName: WideString; const Extension: WideString; 
                     const SelectionSet: IAcadSelectionSet); safecall;
    function New(const TemplateFileName: WideString): IAcadDocument; safecall;
    procedure Save; safecall;
    procedure SaveAs(const FullFileName: WideString; SaveAsType: OleVariant; 
                     vSecurityParams: OleVariant); safecall;
    procedure Wblock(const FileName: WideString; const SelectionSet: IAcadSelectionSet); safecall;
    procedure PurgeAll; safecall;
    function GetVariable(const Name: WideString): OleVariant; safecall;
    procedure SetVariable(const Name: WideString; Value: OleVariant); safecall;
    procedure LoadShapeFile(const FullName: WideString); safecall;
    procedure Regen(WhichViewports: AcRegenType); safecall;
    function Get_PickfirstSelectionSet: IAcadSelectionSet; safecall;
    function Get_Active: WordBool; safecall;
    procedure Activate; safecall;
    procedure Close(SaveChanges: OleVariant; FileName: OleVariant); safecall;
    procedure Set_WindowState(pWinState: AcWindowState); safecall;
    function Get_WindowState: AcWindowState; safecall;
    procedure Set_Width(pWidth: SYSINT); safecall;
    function Get_Width: SYSINT; safecall;
    procedure Set_Height(pHeight: SYSINT); safecall;
    function Get_Height: SYSINT; safecall;
    procedure Set_ActiveLayout(const pLayout: IAcadLayout); safecall;
    function Get_ActiveLayout: IAcadLayout; safecall;
    procedure SendCommand(const Command: WideString); safecall;
    function Get_HWND: Integer; safecall;
    function Get_WindowTitle: WideString; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Database: IAcadDatabase; safecall;
    procedure StartUndoMark; safecall;
    procedure EndUndoMark; safecall;
    function Get_ActiveMaterial: IAcadMaterial; safecall;
    procedure Set_ActiveMaterial(const pActMaterial: IAcadMaterial); safecall;
    property Plot: IAcadPlot read Get_Plot;
    property ActiveLayer: IAcadLayer read Get_ActiveLayer write Set_ActiveLayer;
    property ActiveLinetype: IAcadLineType read Get_ActiveLinetype write Set_ActiveLinetype;
    property ActiveDimStyle: IAcadDimStyle read Get_ActiveDimStyle write Set_ActiveDimStyle;
    property ActiveTextStyle: IAcadTextStyle read Get_ActiveTextStyle write Set_ActiveTextStyle;
    property ActiveUCS: IAcadUCS read Get_ActiveUCS write Set_ActiveUCS;
    property ActiveViewport: IAcadViewport read Get_ActiveViewport write Set_ActiveViewport;
    property ActivePViewport: IAcadPViewport read Get_ActivePViewport write Set_ActivePViewport;
    property ActiveSpace: AcActiveSpace read Get_ActiveSpace write Set_ActiveSpace;
    property SelectionSets: IAcadSelectionSets read Get_SelectionSets;
    property ActiveSelectionSet: IAcadSelectionSet read Get_ActiveSelectionSet;
    property FullName: WideString read Get_FullName;
    property Name: WideString read Get_Name;
    property Path: WideString read Get_Path;
    property ObjectSnapMode: WordBool read Get_ObjectSnapMode write Set_ObjectSnapMode;
    property ReadOnly: WordBool read Get_ReadOnly;
    property Saved: WordBool read Get_Saved;
    property MSpace: WordBool read Get_MSpace write Set_MSpace;
    property Utility: IAcadUtility read Get_Utility;
    property PickfirstSelectionSet: IAcadSelectionSet read Get_PickfirstSelectionSet;
    property Active: WordBool read Get_Active;
    property WindowState: AcWindowState read Get_WindowState write Set_WindowState;
    property Width: SYSINT read Get_Width write Set_Width;
    property Height: SYSINT read Get_Height write Set_Height;
    property ActiveLayout: IAcadLayout read Get_ActiveLayout write Set_ActiveLayout;
    property HWND: Integer read Get_HWND;
    property WindowTitle: WideString read Get_WindowTitle;
    property Application: IAcadApplication read Get_Application;
    property Database: IAcadDatabase read Get_Database;
    property ActiveMaterial: IAcadMaterial read Get_ActiveMaterial write Set_ActiveMaterial;
  end;

// *********************************************************************//
// DispIntf:  IAcadDocumentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EB66A59-8FF4-410B-B697-8813116B2C5F}
// *********************************************************************//
  IAcadDocumentDisp = dispinterface
    ['{0EB66A59-8FF4-410B-B697-8813116B2C5F}']
    property Plot: IAcadPlot readonly dispid 23;
    property ActiveLayer: IAcadLayer dispid 24;
    property ActiveLinetype: IAcadLineType dispid 25;
    property ActiveDimStyle: IAcadDimStyle dispid 26;
    property ActiveTextStyle: IAcadTextStyle dispid 27;
    property ActiveUCS: IAcadUCS dispid 28;
    property ActiveViewport: IAcadViewport dispid 29;
    property ActivePViewport: IAcadPViewport dispid 30;
    property ActiveSpace: AcActiveSpace dispid 31;
    property SelectionSets: IAcadSelectionSets readonly dispid 32;
    property ActiveSelectionSet: IAcadSelectionSet readonly dispid 33;
    property FullName: WideString readonly dispid 34;
    property Name: WideString readonly dispid 35;
    property Path: WideString readonly dispid 36;
    property ObjectSnapMode: WordBool dispid 37;
    property ReadOnly: WordBool readonly dispid 38;
    property Saved: WordBool readonly dispid 39;
    property MSpace: WordBool dispid 40;
    property Utility: IAcadUtility readonly dispid 41;
    function Open(const FullName: WideString; Password: OleVariant): IAcadDocument; dispid 42;
    procedure AuditInfo(FixErr: WordBool); dispid 43;
    function Import(const FileName: WideString; InsertionPoint: OleVariant; ScaleFactor: Double): IDispatch; dispid 44;
    procedure Export(const FileName: WideString; const Extension: WideString; 
                     const SelectionSet: IAcadSelectionSet); dispid 45;
    function New(const TemplateFileName: WideString): IAcadDocument; dispid 46;
    procedure Save; dispid 47;
    procedure SaveAs(const FullFileName: WideString; SaveAsType: OleVariant; 
                     vSecurityParams: OleVariant); dispid 48;
    procedure Wblock(const FileName: WideString; const SelectionSet: IAcadSelectionSet); dispid 49;
    procedure PurgeAll; dispid 50;
    function GetVariable(const Name: WideString): OleVariant; dispid 51;
    procedure SetVariable(const Name: WideString; Value: OleVariant); dispid 52;
    procedure LoadShapeFile(const FullName: WideString); dispid 53;
    procedure Regen(WhichViewports: AcRegenType); dispid 54;
    property PickfirstSelectionSet: IAcadSelectionSet readonly dispid 55;
    property Active: WordBool readonly dispid 56;
    procedure Activate; dispid 57;
    procedure Close(SaveChanges: OleVariant; FileName: OleVariant); dispid 58;
    property WindowState: AcWindowState dispid 59;
    property Width: SYSINT dispid 60;
    property Height: SYSINT dispid 61;
    property ActiveLayout: IAcadLayout dispid 62;
    procedure SendCommand(const Command: WideString); dispid 63;
    property HWND: Integer readonly dispid 64;
    property WindowTitle: WideString readonly dispid 65;
    property Application: IAcadApplication readonly dispid 66;
    property Database: IAcadDatabase readonly dispid 67;
    procedure StartUndoMark; dispid 68;
    procedure EndUndoMark; dispid 69;
    property ActiveMaterial: IAcadMaterial dispid 74;
    property ModelSpace: IAcadModelSpace readonly dispid 1;
    property PaperSpace: IAcadPaperSpace readonly dispid 2;
    property Blocks: IAcadBlocks readonly dispid 3;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant; dispid 4;
    property Groups: IAcadGroups readonly dispid 5;
    property DimStyles: IAcadDimStyles readonly dispid 6;
    property Layers: IAcadLayers readonly dispid 7;
    property Linetypes: IAcadLineTypes readonly dispid 8;
    property Dictionaries: IAcadDictionaries readonly dispid 9;
    property RegisteredApplications: IAcadRegisteredApplications readonly dispid 10;
    property TextStyles: IAcadTextStyles readonly dispid 11;
    property UserCoordinateSystems: IAcadUCSs readonly dispid 12;
    property Views: IAcadViews readonly dispid 13;
    property Viewports: IAcadViewports readonly dispid 14;
    property ElevationModelSpace: Double dispid 15;
    property ElevationPaperSpace: Double dispid 16;
    property Limits: OleVariant dispid 17;
    function HandleToObject(const Handle: WideString): IDispatch; dispid 18;
    function ObjectIdToObject(ObjectID: Integer): IDispatch; dispid 19;
    property Layouts: IAcadLayouts readonly dispid 20;
    property PlotConfigurations: IAcadPlotConfigurations readonly dispid 21;
    property Preferences: IAcadDatabasePreferences readonly dispid 22;
    property FileDependencies: IAcadFileDependencies readonly dispid 70;
    property SummaryInfo: IAcadSummaryInfo readonly dispid 71;
    property SectionManager: IAcadSectionManager readonly dispid 72;
    property Materials: IAcadMaterials readonly dispid 73;
  end;

// *********************************************************************//
// Interface: IAcadPlot
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DFF0942E-23C4-44B5-B67C-B511B5DD5A66}
// *********************************************************************//
  IAcadPlot = interface(IDispatch)
    ['{DFF0942E-23C4-44B5-B67C-B511B5DD5A66}']
    function Get_Application: IAcadApplication; safecall;
    function Get_QuietErrorMode: WordBool; safecall;
    procedure Set_QuietErrorMode(bErrorMode: WordBool); safecall;
    function Get_NumberOfCopies: Integer; safecall;
    procedure Set_NumberOfCopies(numCopies: Integer); safecall;
    function Get_BatchPlotProgress: WordBool; safecall;
    procedure Set_BatchPlotProgress(bProgressStatus: WordBool); safecall;
    procedure DisplayPlotPreview(Preview: AcPreviewMode); safecall;
    function PlotToFile(const plotFile: WideString; plotConfig: OleVariant): WordBool; safecall;
    function PlotToDevice(plotConfig: OleVariant): WordBool; safecall;
    procedure SetLayoutsToPlot(layoutList: OleVariant); safecall;
    procedure StartBatchMode(entryCount: Integer); safecall;
    property Application: IAcadApplication read Get_Application;
    property QuietErrorMode: WordBool read Get_QuietErrorMode write Set_QuietErrorMode;
    property NumberOfCopies: Integer read Get_NumberOfCopies write Set_NumberOfCopies;
    property BatchPlotProgress: WordBool read Get_BatchPlotProgress write Set_BatchPlotProgress;
  end;

// *********************************************************************//
// DispIntf:  IAcadPlotDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DFF0942E-23C4-44B5-B67C-B511B5DD5A66}
// *********************************************************************//
  IAcadPlotDisp = dispinterface
    ['{DFF0942E-23C4-44B5-B67C-B511B5DD5A66}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property QuietErrorMode: WordBool dispid 1610743809;
    property NumberOfCopies: Integer dispid 1610743811;
    property BatchPlotProgress: WordBool dispid 1610743813;
    procedure DisplayPlotPreview(Preview: AcPreviewMode); dispid 1610743815;
    function PlotToFile(const plotFile: WideString; plotConfig: OleVariant): WordBool; dispid 1610743816;
    function PlotToDevice(plotConfig: OleVariant): WordBool; dispid 1610743817;
    procedure SetLayoutsToPlot(layoutList: OleVariant); dispid 1610743818;
    procedure StartBatchMode(entryCount: Integer); dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IAcadApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F17437C-2EFB-4FC4-8188-EEFA50FE7147}
// *********************************************************************//
  IAcadApplication = interface(IDispatch)
    ['{8F17437C-2EFB-4FC4-8188-EEFA50FE7147}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_Name: WideString; safecall;
    function Get_Caption: WideString; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_ActiveDocument: IAcadDocument; safecall;
    procedure Set_ActiveDocument(const pActiveDoc: IAcadDocument); safecall;
    function Get_FullName: WideString; safecall;
    function Get_Height: SYSINT; safecall;
    procedure Set_Height(Height: SYSINT); safecall;
    function Get_WindowLeft: SYSINT; safecall;
    procedure Set_WindowLeft(left: SYSINT); safecall;
    function Get_Path: WideString; safecall;
    function Get_LocaleId: Integer; safecall;
    function Get_WindowTop: SYSINT; safecall;
    procedure Set_WindowTop(top: SYSINT); safecall;
    function Get_Version: WideString; safecall;
    function Get_Width: SYSINT; safecall;
    procedure Set_Width(Width: SYSINT); safecall;
    function Get_Preferences: IAcadPreferences; safecall;
    function Get_StatusId(const VportObj: IDispatch): WordBool; safecall;
    function ListArx: OleVariant; safecall;
    procedure LoadArx(const Name: WideString); safecall;
    function GetInterfaceObject(const ProgID: WideString): IDispatch; safecall;
    procedure UnloadArx(const Name: WideString); safecall;
    procedure Update; safecall;
    procedure Quit; safecall;
    procedure Zoom(Type_: SYSINT; var vParams: OleVariant); safecall;
    function Get_VBE: IDispatch; safecall;
    function Get_MenuGroups: IAcadMenuGroups; safecall;
    function Get_MenuBar: IAcadMenuBar; safecall;
    procedure LoadDVB(const Name: WideString); safecall;
    procedure UnloadDVB(const Name: WideString); safecall;
    function Get_Documents: IAcadDocuments; safecall;
    procedure Eval(const Expression: WideString); safecall;
    function Get_WindowState: AcWindowState; safecall;
    procedure Set_WindowState(eWinState: AcWindowState); safecall;
    procedure RunMacro(const MacroPath: WideString); safecall;
    procedure ZoomExtents; safecall;
    procedure ZoomAll; safecall;
    procedure ZoomCenter(Center: OleVariant; Magnify: Double); safecall;
    procedure ZoomScaled(scale: Double; ScaleType: AcZoomScaleType); safecall;
    procedure ZoomWindow(LowerLeft: OleVariant; UpperRight: OleVariant); safecall;
    procedure ZoomPickWindow; safecall;
    function GetAcadState: IAcadState; safecall;
    procedure ZoomPrevious; safecall;
    function Get_HWND: Integer; safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Name: WideString read Get_Name;
    property Caption: WideString read Get_Caption;
    property Application: IAcadApplication read Get_Application;
    property ActiveDocument: IAcadDocument read Get_ActiveDocument write Set_ActiveDocument;
    property FullName: WideString read Get_FullName;
    property Height: SYSINT read Get_Height write Set_Height;
    property WindowLeft: SYSINT read Get_WindowLeft write Set_WindowLeft;
    property Path: WideString read Get_Path;
    property LocaleId: Integer read Get_LocaleId;
    property WindowTop: SYSINT read Get_WindowTop write Set_WindowTop;
    property Version: WideString read Get_Version;
    property Width: SYSINT read Get_Width write Set_Width;
    property Preferences: IAcadPreferences read Get_Preferences;
    property StatusId[const VportObj: IDispatch]: WordBool read Get_StatusId;
    property VBE: IDispatch read Get_VBE;
    property MenuGroups: IAcadMenuGroups read Get_MenuGroups;
    property MenuBar: IAcadMenuBar read Get_MenuBar;
    property Documents: IAcadDocuments read Get_Documents;
    property WindowState: AcWindowState read Get_WindowState write Set_WindowState;
    property HWND: Integer read Get_HWND;
  end;

// *********************************************************************//
// DispIntf:  IAcadApplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F17437C-2EFB-4FC4-8188-EEFA50FE7147}
// *********************************************************************//
  IAcadApplicationDisp = dispinterface
    ['{8F17437C-2EFB-4FC4-8188-EEFA50FE7147}']
    property Visible: WordBool dispid 1;
    property Name: WideString readonly dispid 2;
    property Caption: WideString readonly dispid 3;
    property Application: IAcadApplication readonly dispid 4;
    property ActiveDocument: IAcadDocument dispid 5;
    property FullName: WideString readonly dispid 6;
    property Height: SYSINT dispid 7;
    property WindowLeft: SYSINT dispid 8;
    property Path: WideString readonly dispid 9;
    property LocaleId: Integer readonly dispid 10;
    property WindowTop: SYSINT dispid 11;
    property Version: WideString readonly dispid 12;
    property Width: SYSINT dispid 13;
    property Preferences: IAcadPreferences readonly dispid 14;
    property StatusId[const VportObj: IDispatch]: WordBool readonly dispid 17;
    function ListArx: OleVariant; dispid 18;
    procedure LoadArx(const Name: WideString); dispid 19;
    function GetInterfaceObject(const ProgID: WideString): IDispatch; dispid 20;
    procedure UnloadArx(const Name: WideString); dispid 23;
    procedure Update; dispid 24;
    procedure Quit; dispid 25;
    procedure Zoom(Type_: SYSINT; var vParams: OleVariant); dispid 26;
    property VBE: IDispatch readonly dispid 27;
    property MenuGroups: IAcadMenuGroups readonly dispid 28;
    property MenuBar: IAcadMenuBar readonly dispid 29;
    procedure LoadDVB(const Name: WideString); dispid 30;
    procedure UnloadDVB(const Name: WideString); dispid 31;
    property Documents: IAcadDocuments readonly dispid 32;
    procedure Eval(const Expression: WideString); dispid 33;
    property WindowState: AcWindowState dispid 34;
    procedure RunMacro(const MacroPath: WideString); dispid 35;
    procedure ZoomExtents; dispid 36;
    procedure ZoomAll; dispid 37;
    procedure ZoomCenter(Center: OleVariant; Magnify: Double); dispid 38;
    procedure ZoomScaled(scale: Double; ScaleType: AcZoomScaleType); dispid 39;
    procedure ZoomWindow(LowerLeft: OleVariant; UpperRight: OleVariant); dispid 40;
    procedure ZoomPickWindow; dispid 41;
    function GetAcadState: IAcadState; dispid 42;
    procedure ZoomPrevious; dispid 43;
    property HWND: Integer readonly dispid 44;
  end;

// *********************************************************************//
// Interface: IAcadPreferences
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A6047B5-55E8-456B-A5D1-D42C5DC90B96}
// *********************************************************************//
  IAcadPreferences = interface(IDispatch)
    ['{5A6047B5-55E8-456B-A5D1-D42C5DC90B96}']
    function Get_Application: IAcadApplication; safecall;
    function Get_Files: IAcadPreferencesFiles; safecall;
    function Get_Display: IAcadPreferencesDisplay; safecall;
    function Get_OpenSave: IAcadPreferencesOpenSave; safecall;
    function Get_Output: IAcadPreferencesOutput; safecall;
    function Get_System_: IAcadPreferencesSystem; safecall;
    function Get_User: IAcadPreferencesUser; safecall;
    function Get_Drafting: IAcadPreferencesDrafting; safecall;
    function Get_Selection: IAcadPreferencesSelection; safecall;
    function Get_Profiles: IAcadPreferencesProfiles; safecall;
    property Application: IAcadApplication read Get_Application;
    property Files: IAcadPreferencesFiles read Get_Files;
    property Display: IAcadPreferencesDisplay read Get_Display;
    property OpenSave: IAcadPreferencesOpenSave read Get_OpenSave;
    property Output: IAcadPreferencesOutput read Get_Output;
    property System_: IAcadPreferencesSystem read Get_System_;
    property User: IAcadPreferencesUser read Get_User;
    property Drafting: IAcadPreferencesDrafting read Get_Drafting;
    property Selection: IAcadPreferencesSelection read Get_Selection;
    property Profiles: IAcadPreferencesProfiles read Get_Profiles;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A6047B5-55E8-456B-A5D1-D42C5DC90B96}
// *********************************************************************//
  IAcadPreferencesDisp = dispinterface
    ['{5A6047B5-55E8-456B-A5D1-D42C5DC90B96}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property Files: IAcadPreferencesFiles readonly dispid 1610743809;
    property Display: IAcadPreferencesDisplay readonly dispid 1610743810;
    property OpenSave: IAcadPreferencesOpenSave readonly dispid 1610743811;
    property Output: IAcadPreferencesOutput readonly dispid 1610743812;
    property System_: IAcadPreferencesSystem readonly dispid 1610743813;
    property User: IAcadPreferencesUser readonly dispid 1610743814;
    property Drafting: IAcadPreferencesDrafting readonly dispid 1610743815;
    property Selection: IAcadPreferencesSelection readonly dispid 1610743816;
    property Profiles: IAcadPreferencesProfiles readonly dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E988F6D8-E009-4C4B-B20F-937E3349B7F5}
// *********************************************************************//
  IAcadPreferencesFiles = interface(IDispatch)
    ['{E988F6D8-E009-4C4B-B20F-937E3349B7F5}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_SupportPath(const orient: WideString); safecall;
    function Get_SupportPath: WideString; safecall;
    procedure Set_DriversPath(const Path: WideString); safecall;
    function Get_DriversPath: WideString; safecall;
    procedure Set_MenuFile(const Path: WideString); safecall;
    function Get_MenuFile: WideString; safecall;
    procedure Set_EnterpriseMenuFile(const Path: WideString); safecall;
    function Get_EnterpriseMenuFile: WideString; safecall;
    procedure Set_CustomIconPath(const Path: WideString); safecall;
    function Get_CustomIconPath: WideString; safecall;
    procedure Set_HelpFilePath(const Path: WideString); safecall;
    function Get_HelpFilePath: WideString; safecall;
    procedure Set_DefaultInternetURL(const Path: WideString); safecall;
    function Get_DefaultInternetURL: WideString; safecall;
    function Get_ConfigFile: WideString; safecall;
    function Get_LicenseServer: WideString; safecall;
    procedure Set_TextEditor(const Path: WideString); safecall;
    function Get_TextEditor: WideString; safecall;
    procedure Set_MainDictionary(const Path: WideString); safecall;
    function Get_MainDictionary: WideString; safecall;
    procedure Set_CustomDictionary(const Path: WideString); safecall;
    function Get_CustomDictionary: WideString; safecall;
    procedure Set_AltFontFile(const fontFile: WideString); safecall;
    function Get_AltFontFile: WideString; safecall;
    procedure Set_FontFileMap(const Path: WideString); safecall;
    function Get_FontFileMap: WideString; safecall;
    procedure Set_PrintFile(const Path: WideString); safecall;
    function Get_PrintFile: WideString; safecall;
    procedure Set_PrintSpoolExecutable(const Path: WideString); safecall;
    function Get_PrintSpoolExecutable: WideString; safecall;
    procedure Set_PostScriptPrologFile(const Path: WideString); safecall;
    function Get_PostScriptPrologFile: WideString; safecall;
    procedure Set_PrintSpoolerPath(const Path: WideString); safecall;
    function Get_PrintSpoolerPath: WideString; safecall;
    procedure Set_AutoSavePath(const AutoSavePath: WideString); safecall;
    function Get_AutoSavePath: WideString; safecall;
    procedure Set_TemplateDwgPath(const Path: WideString); safecall;
    function Get_TemplateDwgPath: WideString; safecall;
    procedure Set_LogFilePath(const Path: WideString); safecall;
    function Get_LogFilePath: WideString; safecall;
    procedure Set_TempFilePath(const Path: WideString); safecall;
    function Get_TempFilePath: WideString; safecall;
    procedure Set_TempXrefPath(const Path: WideString); safecall;
    function Get_TempXrefPath: WideString; safecall;
    procedure Set_TextureMapPath(const Path: WideString); safecall;
    function Get_TextureMapPath: WideString; safecall;
    procedure Set_AltTabletMenuFile(const MenuFile: WideString); safecall;
    function Get_AltTabletMenuFile: WideString; safecall;
    procedure SetProjectFilePath(const ProjectName: WideString; const ProjectFilePath: WideString); safecall;
    function GetProjectFilePath(const ProjectName: WideString): WideString; safecall;
    procedure Set_PrinterConfigPath(const Path: WideString); safecall;
    function Get_PrinterConfigPath: WideString; safecall;
    procedure Set_PrinterDescPath(const Path: WideString); safecall;
    function Get_PrinterDescPath: WideString; safecall;
    procedure Set_PrinterStyleSheetPath(const Path: WideString); safecall;
    function Get_PrinterStyleSheetPath: WideString; safecall;
    procedure Set_WorkspacePath(const Path: WideString); safecall;
    function Get_WorkspacePath: WideString; safecall;
    procedure Set_ObjectARXPath(const Path: WideString); safecall;
    function Get_ObjectARXPath: WideString; safecall;
    procedure Set_ColorBookPath(const Path: WideString); safecall;
    function Get_ColorBookPath: WideString; safecall;
    procedure Set_ToolPalettePath(const Path: WideString); safecall;
    function Get_ToolPalettePath: WideString; safecall;
    procedure Set_QNewTemplateFile(const templateFile: WideString); safecall;
    function Get_QNewTemplateFile: WideString; safecall;
    procedure Set_PlotLogFilePath(const templateFile: WideString); safecall;
    function Get_PlotLogFilePath: WideString; safecall;
    procedure Set_PageSetupOverridesTemplateFile(const templateFile: WideString); safecall;
    function Get_PageSetupOverridesTemplateFile: WideString; safecall;
    property Application: IAcadApplication read Get_Application;
    property SupportPath: WideString read Get_SupportPath write Set_SupportPath;
    property DriversPath: WideString read Get_DriversPath write Set_DriversPath;
    property MenuFile: WideString read Get_MenuFile write Set_MenuFile;
    property EnterpriseMenuFile: WideString read Get_EnterpriseMenuFile write Set_EnterpriseMenuFile;
    property CustomIconPath: WideString read Get_CustomIconPath write Set_CustomIconPath;
    property HelpFilePath: WideString read Get_HelpFilePath write Set_HelpFilePath;
    property DefaultInternetURL: WideString read Get_DefaultInternetURL write Set_DefaultInternetURL;
    property ConfigFile: WideString read Get_ConfigFile;
    property LicenseServer: WideString read Get_LicenseServer;
    property TextEditor: WideString read Get_TextEditor write Set_TextEditor;
    property MainDictionary: WideString read Get_MainDictionary write Set_MainDictionary;
    property CustomDictionary: WideString read Get_CustomDictionary write Set_CustomDictionary;
    property AltFontFile: WideString read Get_AltFontFile write Set_AltFontFile;
    property FontFileMap: WideString read Get_FontFileMap write Set_FontFileMap;
    property PrintFile: WideString read Get_PrintFile write Set_PrintFile;
    property PrintSpoolExecutable: WideString read Get_PrintSpoolExecutable write Set_PrintSpoolExecutable;
    property PostScriptPrologFile: WideString read Get_PostScriptPrologFile write Set_PostScriptPrologFile;
    property PrintSpoolerPath: WideString read Get_PrintSpoolerPath write Set_PrintSpoolerPath;
    property AutoSavePath: WideString read Get_AutoSavePath write Set_AutoSavePath;
    property TemplateDwgPath: WideString read Get_TemplateDwgPath write Set_TemplateDwgPath;
    property LogFilePath: WideString read Get_LogFilePath write Set_LogFilePath;
    property TempFilePath: WideString read Get_TempFilePath write Set_TempFilePath;
    property TempXrefPath: WideString read Get_TempXrefPath write Set_TempXrefPath;
    property TextureMapPath: WideString read Get_TextureMapPath write Set_TextureMapPath;
    property AltTabletMenuFile: WideString read Get_AltTabletMenuFile write Set_AltTabletMenuFile;
    property PrinterConfigPath: WideString read Get_PrinterConfigPath write Set_PrinterConfigPath;
    property PrinterDescPath: WideString read Get_PrinterDescPath write Set_PrinterDescPath;
    property PrinterStyleSheetPath: WideString read Get_PrinterStyleSheetPath write Set_PrinterStyleSheetPath;
    property WorkspacePath: WideString read Get_WorkspacePath write Set_WorkspacePath;
    property ObjectARXPath: WideString read Get_ObjectARXPath write Set_ObjectARXPath;
    property ColorBookPath: WideString read Get_ColorBookPath write Set_ColorBookPath;
    property ToolPalettePath: WideString read Get_ToolPalettePath write Set_ToolPalettePath;
    property QNewTemplateFile: WideString read Get_QNewTemplateFile write Set_QNewTemplateFile;
    property PlotLogFilePath: WideString read Get_PlotLogFilePath write Set_PlotLogFilePath;
    property PageSetupOverridesTemplateFile: WideString read Get_PageSetupOverridesTemplateFile write Set_PageSetupOverridesTemplateFile;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesFilesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E988F6D8-E009-4C4B-B20F-937E3349B7F5}
// *********************************************************************//
  IAcadPreferencesFilesDisp = dispinterface
    ['{E988F6D8-E009-4C4B-B20F-937E3349B7F5}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property SupportPath: WideString dispid 0;
    property DriversPath: WideString dispid 1610743811;
    property MenuFile: WideString dispid 1610743813;
    property EnterpriseMenuFile: WideString dispid 1610743815;
    property CustomIconPath: WideString dispid 1610743817;
    property HelpFilePath: WideString dispid 1610743819;
    property DefaultInternetURL: WideString dispid 1610743821;
    property ConfigFile: WideString readonly dispid 1610743823;
    property LicenseServer: WideString readonly dispid 1610743824;
    property TextEditor: WideString dispid 1610743825;
    property MainDictionary: WideString dispid 1610743827;
    property CustomDictionary: WideString dispid 1610743829;
    property AltFontFile: WideString dispid 1610743831;
    property FontFileMap: WideString dispid 1610743833;
    property PrintFile: WideString dispid 1610743835;
    property PrintSpoolExecutable: WideString dispid 1610743837;
    property PostScriptPrologFile: WideString dispid 1610743839;
    property PrintSpoolerPath: WideString dispid 1610743841;
    property AutoSavePath: WideString dispid 1610743843;
    property TemplateDwgPath: WideString dispid 1610743845;
    property LogFilePath: WideString dispid 1610743847;
    property TempFilePath: WideString dispid 1610743849;
    property TempXrefPath: WideString dispid 1610743851;
    property TextureMapPath: WideString dispid 1610743853;
    property AltTabletMenuFile: WideString dispid 1610743855;
    procedure SetProjectFilePath(const ProjectName: WideString; const ProjectFilePath: WideString); dispid 1610743857;
    function GetProjectFilePath(const ProjectName: WideString): WideString; dispid 1610743858;
    property PrinterConfigPath: WideString dispid 1610743859;
    property PrinterDescPath: WideString dispid 1610743861;
    property PrinterStyleSheetPath: WideString dispid 1610743863;
    property WorkspacePath: WideString dispid 1610743865;
    property ObjectARXPath: WideString dispid 1610743867;
    property ColorBookPath: WideString dispid 1610743869;
    property ToolPalettePath: WideString dispid 1610743871;
    property QNewTemplateFile: WideString dispid 1610743873;
    property PlotLogFilePath: WideString dispid 1610743875;
    property PageSetupOverridesTemplateFile: WideString dispid 1610743877;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesDisplay
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {470F310B-CA4B-4664-B8BA-2A56745331C3}
// *********************************************************************//
  IAcadPreferencesDisplay = interface(IDispatch)
    ['{470F310B-CA4B-4664-B8BA-2A56745331C3}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_LayoutDisplayMargins(Path: WordBool); safecall;
    function Get_LayoutDisplayMargins: WordBool; safecall;
    procedure Set_LayoutDisplayPaper(Path: WordBool); safecall;
    function Get_LayoutDisplayPaper: WordBool; safecall;
    procedure Set_LayoutDisplayPaperShadow(Path: WordBool); safecall;
    function Get_LayoutDisplayPaperShadow: WordBool; safecall;
    procedure Set_LayoutShowPlotSetup(Path: WordBool); safecall;
    function Get_LayoutShowPlotSetup: WordBool; safecall;
    procedure Set_LayoutCreateViewport(Path: WordBool); safecall;
    function Get_LayoutCreateViewport: WordBool; safecall;
    procedure Set_DisplayScrollBars(Path: WordBool); safecall;
    function Get_DisplayScrollBars: WordBool; safecall;
    procedure Set_DisplayScreenMenu(Path: WordBool); safecall;
    function Get_DisplayScreenMenu: WordBool; safecall;
    procedure Set_CursorSize(Path: SYSINT); safecall;
    function Get_CursorSize: SYSINT; safecall;
    procedure Set_DockedVisibleLines(Path: SYSINT); safecall;
    function Get_DockedVisibleLines: SYSINT; safecall;
    procedure Set_ShowRasterImage(Path: WordBool); safecall;
    function Get_ShowRasterImage: WordBool; safecall;
    procedure Set_GraphicsWinModelBackgrndColor(color: OLE_COLOR); safecall;
    function Get_GraphicsWinModelBackgrndColor: OLE_COLOR; safecall;
    procedure Set_ModelCrosshairColor(crossHairColor: OLE_COLOR); safecall;
    function Get_ModelCrosshairColor: OLE_COLOR; safecall;
    procedure Set_GraphicsWinLayoutBackgrndColor(color: OLE_COLOR); safecall;
    function Get_GraphicsWinLayoutBackgrndColor: OLE_COLOR; safecall;
    procedure Set_TextWinBackgrndColor(Path: OLE_COLOR); safecall;
    function Get_TextWinBackgrndColor: OLE_COLOR; safecall;
    procedure Set_TextWinTextColor(Path: OLE_COLOR); safecall;
    function Get_TextWinTextColor: OLE_COLOR; safecall;
    procedure Set_LayoutCrosshairColor(crossHairColor: OLE_COLOR); safecall;
    function Get_LayoutCrosshairColor: OLE_COLOR; safecall;
    procedure Set_AutoTrackingVecColor(AutoTrackingVecColor: OLE_COLOR); safecall;
    function Get_AutoTrackingVecColor: OLE_COLOR; safecall;
    procedure Set_TextFont(const Path: WideString); safecall;
    function Get_TextFont: WideString; safecall;
    procedure Set_TextFontStyle(Path: AcTextFontStyle); safecall;
    function Get_TextFontStyle: AcTextFontStyle; safecall;
    procedure Set_TextFontSize(Path: SYSINT); safecall;
    function Get_TextFontSize: SYSINT; safecall;
    procedure Set_HistoryLines(Path: SYSINT); safecall;
    function Get_HistoryLines: SYSINT; safecall;
    procedure Set_MaxAutoCADWindow(Path: WordBool); safecall;
    function Get_MaxAutoCADWindow: WordBool; safecall;
    procedure Set_DisplayLayoutTabs(Path: WordBool); safecall;
    function Get_DisplayLayoutTabs: WordBool; safecall;
    procedure Set_ImageFrameHighlight(Path: WordBool); safecall;
    function Get_ImageFrameHighlight: WordBool; safecall;
    procedure Set_TrueColorImages(Path: WordBool); safecall;
    function Get_TrueColorImages: WordBool; safecall;
    procedure Set_XRefFadeIntensity(Path: Integer); safecall;
    function Get_XRefFadeIntensity: Integer; safecall;
    property Application: IAcadApplication read Get_Application;
    property LayoutDisplayMargins: WordBool read Get_LayoutDisplayMargins write Set_LayoutDisplayMargins;
    property LayoutDisplayPaper: WordBool read Get_LayoutDisplayPaper write Set_LayoutDisplayPaper;
    property LayoutDisplayPaperShadow: WordBool read Get_LayoutDisplayPaperShadow write Set_LayoutDisplayPaperShadow;
    property LayoutShowPlotSetup: WordBool read Get_LayoutShowPlotSetup write Set_LayoutShowPlotSetup;
    property LayoutCreateViewport: WordBool read Get_LayoutCreateViewport write Set_LayoutCreateViewport;
    property DisplayScrollBars: WordBool read Get_DisplayScrollBars write Set_DisplayScrollBars;
    property DisplayScreenMenu: WordBool read Get_DisplayScreenMenu write Set_DisplayScreenMenu;
    property CursorSize: SYSINT read Get_CursorSize write Set_CursorSize;
    property DockedVisibleLines: SYSINT read Get_DockedVisibleLines write Set_DockedVisibleLines;
    property ShowRasterImage: WordBool read Get_ShowRasterImage write Set_ShowRasterImage;
    property GraphicsWinModelBackgrndColor: OLE_COLOR read Get_GraphicsWinModelBackgrndColor write Set_GraphicsWinModelBackgrndColor;
    property ModelCrosshairColor: OLE_COLOR read Get_ModelCrosshairColor write Set_ModelCrosshairColor;
    property GraphicsWinLayoutBackgrndColor: OLE_COLOR read Get_GraphicsWinLayoutBackgrndColor write Set_GraphicsWinLayoutBackgrndColor;
    property TextWinBackgrndColor: OLE_COLOR read Get_TextWinBackgrndColor write Set_TextWinBackgrndColor;
    property TextWinTextColor: OLE_COLOR read Get_TextWinTextColor write Set_TextWinTextColor;
    property LayoutCrosshairColor: OLE_COLOR read Get_LayoutCrosshairColor write Set_LayoutCrosshairColor;
    property AutoTrackingVecColor: OLE_COLOR read Get_AutoTrackingVecColor write Set_AutoTrackingVecColor;
    property TextFont: WideString read Get_TextFont write Set_TextFont;
    property TextFontStyle: AcTextFontStyle read Get_TextFontStyle write Set_TextFontStyle;
    property TextFontSize: SYSINT read Get_TextFontSize write Set_TextFontSize;
    property HistoryLines: SYSINT read Get_HistoryLines write Set_HistoryLines;
    property MaxAutoCADWindow: WordBool read Get_MaxAutoCADWindow write Set_MaxAutoCADWindow;
    property DisplayLayoutTabs: WordBool read Get_DisplayLayoutTabs write Set_DisplayLayoutTabs;
    property ImageFrameHighlight: WordBool read Get_ImageFrameHighlight write Set_ImageFrameHighlight;
    property TrueColorImages: WordBool read Get_TrueColorImages write Set_TrueColorImages;
    property XRefFadeIntensity: Integer read Get_XRefFadeIntensity write Set_XRefFadeIntensity;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesDisplayDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {470F310B-CA4B-4664-B8BA-2A56745331C3}
// *********************************************************************//
  IAcadPreferencesDisplayDisp = dispinterface
    ['{470F310B-CA4B-4664-B8BA-2A56745331C3}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property LayoutDisplayMargins: WordBool dispid 1610743809;
    property LayoutDisplayPaper: WordBool dispid 1610743811;
    property LayoutDisplayPaperShadow: WordBool dispid 1610743813;
    property LayoutShowPlotSetup: WordBool dispid 1610743815;
    property LayoutCreateViewport: WordBool dispid 1610743817;
    property DisplayScrollBars: WordBool dispid 1610743819;
    property DisplayScreenMenu: WordBool dispid 1610743821;
    property CursorSize: SYSINT dispid 1610743823;
    property DockedVisibleLines: SYSINT dispid 1610743825;
    property ShowRasterImage: WordBool dispid 1610743827;
    property GraphicsWinModelBackgrndColor: OLE_COLOR dispid 1610743829;
    property ModelCrosshairColor: OLE_COLOR dispid 1610743831;
    property GraphicsWinLayoutBackgrndColor: OLE_COLOR dispid 1610743833;
    property TextWinBackgrndColor: OLE_COLOR dispid 1610743835;
    property TextWinTextColor: OLE_COLOR dispid 1610743837;
    property LayoutCrosshairColor: OLE_COLOR dispid 1610743839;
    property AutoTrackingVecColor: OLE_COLOR dispid 1610743841;
    property TextFont: WideString dispid 1610743843;
    property TextFontStyle: AcTextFontStyle dispid 1610743845;
    property TextFontSize: SYSINT dispid 1610743847;
    property HistoryLines: SYSINT dispid 1610743849;
    property MaxAutoCADWindow: WordBool dispid 1610743851;
    property DisplayLayoutTabs: WordBool dispid 1610743853;
    property ImageFrameHighlight: WordBool dispid 1610743855;
    property TrueColorImages: WordBool dispid 1610743857;
    property XRefFadeIntensity: Integer dispid 1610743859;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesOpenSave
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA7E4927-7A26-4409-A515-F4F9E67EB0C3}
// *********************************************************************//
  IAcadPreferencesOpenSave = interface(IDispatch)
    ['{DA7E4927-7A26-4409-A515-F4F9E67EB0C3}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_SavePreviewThumbnail(Path: WordBool); safecall;
    function Get_SavePreviewThumbnail: WordBool; safecall;
    procedure Set_IncrementalSavePercent(Path: SYSINT); safecall;
    function Get_IncrementalSavePercent: SYSINT; safecall;
    procedure Set_AutoSaveInterval(Path: SYSINT); safecall;
    function Get_AutoSaveInterval: SYSINT; safecall;
    procedure Set_CreateBackup(CreateBackup: WordBool); safecall;
    function Get_CreateBackup: WordBool; safecall;
    procedure Set_FullCRCValidation(Path: WordBool); safecall;
    function Get_FullCRCValidation: WordBool; safecall;
    procedure Set_LogFileOn(Path: WordBool); safecall;
    function Get_LogFileOn: WordBool; safecall;
    procedure Set_TempFileExtension(const Path: WideString); safecall;
    function Get_TempFileExtension: WideString; safecall;
    procedure Set_XrefDemandLoad(Path: AcXRefDemandLoad); safecall;
    function Get_XrefDemandLoad: AcXRefDemandLoad; safecall;
    procedure Set_DemandLoadARXApp(Path: AcARXDemandLoad); safecall;
    function Get_DemandLoadARXApp: AcARXDemandLoad; safecall;
    procedure Set_ProxyImage(Path: AcProxyImage); safecall;
    function Get_ProxyImage: AcProxyImage; safecall;
    procedure Set_ShowProxyDialogBox(Path: WordBool); safecall;
    function Get_ShowProxyDialogBox: WordBool; safecall;
    procedure Set_AutoAudit(bAudit: WordBool); safecall;
    function Get_AutoAudit: WordBool; safecall;
    procedure Set_SaveAsType(Path: AcSaveAsType); safecall;
    function Get_SaveAsType: AcSaveAsType; safecall;
    function Get_MRUNumber: Integer; safecall;
    property Application: IAcadApplication read Get_Application;
    property SavePreviewThumbnail: WordBool read Get_SavePreviewThumbnail write Set_SavePreviewThumbnail;
    property IncrementalSavePercent: SYSINT read Get_IncrementalSavePercent write Set_IncrementalSavePercent;
    property AutoSaveInterval: SYSINT read Get_AutoSaveInterval write Set_AutoSaveInterval;
    property CreateBackup: WordBool read Get_CreateBackup write Set_CreateBackup;
    property FullCRCValidation: WordBool read Get_FullCRCValidation write Set_FullCRCValidation;
    property LogFileOn: WordBool read Get_LogFileOn write Set_LogFileOn;
    property TempFileExtension: WideString read Get_TempFileExtension write Set_TempFileExtension;
    property XrefDemandLoad: AcXRefDemandLoad read Get_XrefDemandLoad write Set_XrefDemandLoad;
    property DemandLoadARXApp: AcARXDemandLoad read Get_DemandLoadARXApp write Set_DemandLoadARXApp;
    property ProxyImage: AcProxyImage read Get_ProxyImage write Set_ProxyImage;
    property ShowProxyDialogBox: WordBool read Get_ShowProxyDialogBox write Set_ShowProxyDialogBox;
    property AutoAudit: WordBool read Get_AutoAudit write Set_AutoAudit;
    property SaveAsType: AcSaveAsType read Get_SaveAsType write Set_SaveAsType;
    property MRUNumber: Integer read Get_MRUNumber;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesOpenSaveDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA7E4927-7A26-4409-A515-F4F9E67EB0C3}
// *********************************************************************//
  IAcadPreferencesOpenSaveDisp = dispinterface
    ['{DA7E4927-7A26-4409-A515-F4F9E67EB0C3}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property SavePreviewThumbnail: WordBool dispid 1610743809;
    property IncrementalSavePercent: SYSINT dispid 1610743811;
    property AutoSaveInterval: SYSINT dispid 1610743813;
    property CreateBackup: WordBool dispid 1610743815;
    property FullCRCValidation: WordBool dispid 1610743817;
    property LogFileOn: WordBool dispid 1610743819;
    property TempFileExtension: WideString dispid 1610743821;
    property XrefDemandLoad: AcXRefDemandLoad dispid 1610743823;
    property DemandLoadARXApp: AcARXDemandLoad dispid 1610743825;
    property ProxyImage: AcProxyImage dispid 1610743827;
    property ShowProxyDialogBox: WordBool dispid 1610743829;
    property AutoAudit: WordBool dispid 1610743831;
    property SaveAsType: AcSaveAsType dispid 1610743833;
    property MRUNumber: Integer readonly dispid 1610743835;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesOutput
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E985D85D-2438-4979-8BB3-0CF1C0806140}
// *********************************************************************//
  IAcadPreferencesOutput = interface(IDispatch)
    ['{E985D85D-2438-4979-8BB3-0CF1C0806140}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_DefaultOutputDevice(const Path: WideString); safecall;
    function Get_DefaultOutputDevice: WideString; safecall;
    procedure Set_PrinterSpoolAlert(Path: AcPrinterSpoolAlert); safecall;
    function Get_PrinterSpoolAlert: AcPrinterSpoolAlert; safecall;
    procedure Set_PrinterPaperSizeAlert(Path: WordBool); safecall;
    function Get_PrinterPaperSizeAlert: WordBool; safecall;
    procedure Set_PlotLegacy(Path: WordBool); safecall;
    function Get_PlotLegacy: WordBool; safecall;
    procedure Set_OLEQuality(Path: AcOleQuality); safecall;
    function Get_OLEQuality: AcOleQuality; safecall;
    procedure Set_UseLastPlotSettings(Path: WordBool); safecall;
    function Get_UseLastPlotSettings: WordBool; safecall;
    procedure Set_PlotPolicy(Path: AcPlotPolicy); safecall;
    function Get_PlotPolicy: AcPlotPolicy; safecall;
    procedure Set_DefaultPlotStyleTable(const Path: WideString); safecall;
    function Get_DefaultPlotStyleTable: WideString; safecall;
    procedure Set_DefaultPlotStyleForObjects(const Path: WideString); safecall;
    function Get_DefaultPlotStyleForObjects: WideString; safecall;
    procedure Set_DefaultPlotStyleForLayer(const Path: WideString); safecall;
    function Get_DefaultPlotStyleForLayer: WideString; safecall;
    procedure Set_ContinuousPlotLog(Path: WordBool); safecall;
    function Get_ContinuousPlotLog: WordBool; safecall;
    procedure Set_AutomaticPlotLog(Path: WordBool); safecall;
    function Get_AutomaticPlotLog: WordBool; safecall;
    procedure Set_DefaultPlotToFilePath(const Path: WideString); safecall;
    function Get_DefaultPlotToFilePath: WideString; safecall;
    property Application: IAcadApplication read Get_Application;
    property DefaultOutputDevice: WideString read Get_DefaultOutputDevice write Set_DefaultOutputDevice;
    property PrinterSpoolAlert: AcPrinterSpoolAlert read Get_PrinterSpoolAlert write Set_PrinterSpoolAlert;
    property PrinterPaperSizeAlert: WordBool read Get_PrinterPaperSizeAlert write Set_PrinterPaperSizeAlert;
    property PlotLegacy: WordBool read Get_PlotLegacy write Set_PlotLegacy;
    property OLEQuality: AcOleQuality read Get_OLEQuality write Set_OLEQuality;
    property UseLastPlotSettings: WordBool read Get_UseLastPlotSettings write Set_UseLastPlotSettings;
    property PlotPolicy: AcPlotPolicy read Get_PlotPolicy write Set_PlotPolicy;
    property DefaultPlotStyleTable: WideString read Get_DefaultPlotStyleTable write Set_DefaultPlotStyleTable;
    property DefaultPlotStyleForObjects: WideString read Get_DefaultPlotStyleForObjects write Set_DefaultPlotStyleForObjects;
    property DefaultPlotStyleForLayer: WideString read Get_DefaultPlotStyleForLayer write Set_DefaultPlotStyleForLayer;
    property ContinuousPlotLog: WordBool read Get_ContinuousPlotLog write Set_ContinuousPlotLog;
    property AutomaticPlotLog: WordBool read Get_AutomaticPlotLog write Set_AutomaticPlotLog;
    property DefaultPlotToFilePath: WideString read Get_DefaultPlotToFilePath write Set_DefaultPlotToFilePath;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesOutputDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E985D85D-2438-4979-8BB3-0CF1C0806140}
// *********************************************************************//
  IAcadPreferencesOutputDisp = dispinterface
    ['{E985D85D-2438-4979-8BB3-0CF1C0806140}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property DefaultOutputDevice: WideString dispid 1610743809;
    property PrinterSpoolAlert: AcPrinterSpoolAlert dispid 1610743811;
    property PrinterPaperSizeAlert: WordBool dispid 1610743813;
    property PlotLegacy: WordBool dispid 1610743815;
    property OLEQuality: AcOleQuality dispid 1610743817;
    property UseLastPlotSettings: WordBool dispid 1610743819;
    property PlotPolicy: AcPlotPolicy dispid 1610743821;
    property DefaultPlotStyleTable: WideString dispid 1610743823;
    property DefaultPlotStyleForObjects: WideString dispid 1610743825;
    property DefaultPlotStyleForLayer: WideString dispid 1610743827;
    property ContinuousPlotLog: WordBool dispid 1610743829;
    property AutomaticPlotLog: WordBool dispid 1610743831;
    property DefaultPlotToFilePath: WideString dispid 1610743833;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesSystem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42370369-A258-4EAD-96C6-F78702E57374}
// *********************************************************************//
  IAcadPreferencesSystem = interface(IDispatch)
    ['{42370369-A258-4EAD-96C6-F78702E57374}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_SingleDocumentMode(Path: WordBool); safecall;
    function Get_SingleDocumentMode: WordBool; safecall;
    procedure Set_DisplayOLEScale(Path: WordBool); safecall;
    function Get_DisplayOLEScale: WordBool; safecall;
    procedure Set_StoreSQLIndex(Path: WordBool); safecall;
    function Get_StoreSQLIndex: WordBool; safecall;
    procedure Set_TablesReadOnly(Path: WordBool); safecall;
    function Get_TablesReadOnly: WordBool; safecall;
    procedure Set_EnableStartupDialog(Path: WordBool); safecall;
    function Get_EnableStartupDialog: WordBool; safecall;
    procedure Set_BeepOnError(BeepOnError: WordBool); safecall;
    function Get_BeepOnError: WordBool; safecall;
    procedure Set_ShowWarningMessages(Path: WordBool); safecall;
    function Get_ShowWarningMessages: WordBool; safecall;
    procedure Set_LoadAcadLspInAllDocuments(pALID: WordBool); safecall;
    function Get_LoadAcadLspInAllDocuments: WordBool; safecall;
    property Application: IAcadApplication read Get_Application;
    property SingleDocumentMode: WordBool read Get_SingleDocumentMode write Set_SingleDocumentMode;
    property DisplayOLEScale: WordBool read Get_DisplayOLEScale write Set_DisplayOLEScale;
    property StoreSQLIndex: WordBool read Get_StoreSQLIndex write Set_StoreSQLIndex;
    property TablesReadOnly: WordBool read Get_TablesReadOnly write Set_TablesReadOnly;
    property EnableStartupDialog: WordBool read Get_EnableStartupDialog write Set_EnableStartupDialog;
    property BeepOnError: WordBool read Get_BeepOnError write Set_BeepOnError;
    property ShowWarningMessages: WordBool read Get_ShowWarningMessages write Set_ShowWarningMessages;
    property LoadAcadLspInAllDocuments: WordBool read Get_LoadAcadLspInAllDocuments write Set_LoadAcadLspInAllDocuments;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesSystemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42370369-A258-4EAD-96C6-F78702E57374}
// *********************************************************************//
  IAcadPreferencesSystemDisp = dispinterface
    ['{42370369-A258-4EAD-96C6-F78702E57374}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property SingleDocumentMode: WordBool dispid 1610743809;
    property DisplayOLEScale: WordBool dispid 1610743811;
    property StoreSQLIndex: WordBool dispid 1610743813;
    property TablesReadOnly: WordBool dispid 1610743815;
    property EnableStartupDialog: WordBool dispid 1610743817;
    property BeepOnError: WordBool dispid 1610743819;
    property ShowWarningMessages: WordBool dispid 1610743821;
    property LoadAcadLspInAllDocuments: WordBool dispid 1610743823;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesUser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4149C4B5-CA42-4ED0-B8CB-EBBE87F83912}
// *********************************************************************//
  IAcadPreferencesUser = interface(IDispatch)
    ['{4149C4B5-CA42-4ED0-B8CB-EBBE87F83912}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_KeyboardAccelerator(Path: AcKeyboardAccelerator); safecall;
    function Get_KeyboardAccelerator: AcKeyboardAccelerator; safecall;
    procedure Set_KeyboardPriority(Path: AcKeyboardPriority); safecall;
    function Get_KeyboardPriority: AcKeyboardPriority; safecall;
    procedure Set_HyperlinkDisplayCursor(Path: WordBool); safecall;
    function Get_HyperlinkDisplayCursor: WordBool; safecall;
    procedure Set_HyperlinkDisplayTooltip(Path: WordBool); safecall;
    function Get_HyperlinkDisplayTooltip: WordBool; safecall;
    procedure Set_ADCInsertUnitsDefaultSource(pIU: AcInsertUnits); safecall;
    function Get_ADCInsertUnitsDefaultSource: AcInsertUnits; safecall;
    procedure Set_ADCInsertUnitsDefaultTarget(pSUunits: AcInsertUnits); safecall;
    function Get_ADCInsertUnitsDefaultTarget: AcInsertUnits; safecall;
    procedure Set_ShortCutMenuDisplay(pSCM: WordBool); safecall;
    function Get_ShortCutMenuDisplay: WordBool; safecall;
    procedure Set_SCMDefaultMode(pSCM: AcDrawingAreaSCMDefault); safecall;
    function Get_SCMDefaultMode: AcDrawingAreaSCMDefault; safecall;
    procedure Set_SCMEditMode(pSCM: AcDrawingAreaSCMEdit); safecall;
    function Get_SCMEditMode: AcDrawingAreaSCMEdit; safecall;
    procedure Set_SCMCommandMode(pSCM: AcDrawingAreaSCMCommand); safecall;
    function Get_SCMCommandMode: AcDrawingAreaSCMCommand; safecall;
    procedure Set_SCMTimeMode(time: WordBool); safecall;
    function Get_SCMTimeMode: WordBool; safecall;
    procedure Set_SCMTimeValue(time: SYSINT); safecall;
    function Get_SCMTimeValue: SYSINT; safecall;
    property Application: IAcadApplication read Get_Application;
    property KeyboardAccelerator: AcKeyboardAccelerator read Get_KeyboardAccelerator write Set_KeyboardAccelerator;
    property KeyboardPriority: AcKeyboardPriority read Get_KeyboardPriority write Set_KeyboardPriority;
    property HyperlinkDisplayCursor: WordBool read Get_HyperlinkDisplayCursor write Set_HyperlinkDisplayCursor;
    property HyperlinkDisplayTooltip: WordBool read Get_HyperlinkDisplayTooltip write Set_HyperlinkDisplayTooltip;
    property ADCInsertUnitsDefaultSource: AcInsertUnits read Get_ADCInsertUnitsDefaultSource write Set_ADCInsertUnitsDefaultSource;
    property ADCInsertUnitsDefaultTarget: AcInsertUnits read Get_ADCInsertUnitsDefaultTarget write Set_ADCInsertUnitsDefaultTarget;
    property ShortCutMenuDisplay: WordBool read Get_ShortCutMenuDisplay write Set_ShortCutMenuDisplay;
    property SCMDefaultMode: AcDrawingAreaSCMDefault read Get_SCMDefaultMode write Set_SCMDefaultMode;
    property SCMEditMode: AcDrawingAreaSCMEdit read Get_SCMEditMode write Set_SCMEditMode;
    property SCMCommandMode: AcDrawingAreaSCMCommand read Get_SCMCommandMode write Set_SCMCommandMode;
    property SCMTimeMode: WordBool read Get_SCMTimeMode write Set_SCMTimeMode;
    property SCMTimeValue: SYSINT read Get_SCMTimeValue write Set_SCMTimeValue;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesUserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4149C4B5-CA42-4ED0-B8CB-EBBE87F83912}
// *********************************************************************//
  IAcadPreferencesUserDisp = dispinterface
    ['{4149C4B5-CA42-4ED0-B8CB-EBBE87F83912}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property KeyboardAccelerator: AcKeyboardAccelerator dispid 1610743809;
    property KeyboardPriority: AcKeyboardPriority dispid 1610743811;
    property HyperlinkDisplayCursor: WordBool dispid 1610743813;
    property HyperlinkDisplayTooltip: WordBool dispid 1610743815;
    property ADCInsertUnitsDefaultSource: AcInsertUnits dispid 1610743817;
    property ADCInsertUnitsDefaultTarget: AcInsertUnits dispid 1610743819;
    property ShortCutMenuDisplay: WordBool dispid 1610743821;
    property SCMDefaultMode: AcDrawingAreaSCMDefault dispid 1610743823;
    property SCMEditMode: AcDrawingAreaSCMEdit dispid 1610743825;
    property SCMCommandMode: AcDrawingAreaSCMCommand dispid 1610743827;
    property SCMTimeMode: WordBool dispid 1610743829;
    property SCMTimeValue: SYSINT dispid 1610743831;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesDrafting
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1591419F-43C2-4F66-BC6F-C0FF0EFFF074}
// *********************************************************************//
  IAcadPreferencesDrafting = interface(IDispatch)
    ['{1591419F-43C2-4F66-BC6F-C0FF0EFFF074}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_AutoSnapMarker(Path: WordBool); safecall;
    function Get_AutoSnapMarker: WordBool; safecall;
    procedure Set_AutoSnapMagnet(Path: WordBool); safecall;
    function Get_AutoSnapMagnet: WordBool; safecall;
    procedure Set_AutoSnapTooltip(Path: WordBool); safecall;
    function Get_AutoSnapTooltip: WordBool; safecall;
    procedure Set_AutoSnapAperture(Path: WordBool); safecall;
    function Get_AutoSnapAperture: WordBool; safecall;
    procedure Set_AutoSnapApertureSize(Path: Integer); safecall;
    function Get_AutoSnapApertureSize: Integer; safecall;
    procedure Set_AutoSnapMarkerColor(Path: AcColor); safecall;
    function Get_AutoSnapMarkerColor: AcColor; safecall;
    procedure Set_AutoSnapMarkerSize(Path: Integer); safecall;
    function Get_AutoSnapMarkerSize: Integer; safecall;
    procedure Set_PolarTrackingVector(Path: WordBool); safecall;
    function Get_PolarTrackingVector: WordBool; safecall;
    procedure Set_FullScreenTrackingVector(Path: WordBool); safecall;
    function Get_FullScreenTrackingVector: WordBool; safecall;
    procedure Set_AutoTrackTooltip(Path: WordBool); safecall;
    function Get_AutoTrackTooltip: WordBool; safecall;
    procedure Set_AlignmentPointAcquisition(Path: AcAlignmentPointAcquisition); safecall;
    function Get_AlignmentPointAcquisition: AcAlignmentPointAcquisition; safecall;
    property Application: IAcadApplication read Get_Application;
    property AutoSnapMarker: WordBool read Get_AutoSnapMarker write Set_AutoSnapMarker;
    property AutoSnapMagnet: WordBool read Get_AutoSnapMagnet write Set_AutoSnapMagnet;
    property AutoSnapTooltip: WordBool read Get_AutoSnapTooltip write Set_AutoSnapTooltip;
    property AutoSnapAperture: WordBool read Get_AutoSnapAperture write Set_AutoSnapAperture;
    property AutoSnapApertureSize: Integer read Get_AutoSnapApertureSize write Set_AutoSnapApertureSize;
    property AutoSnapMarkerColor: AcColor read Get_AutoSnapMarkerColor write Set_AutoSnapMarkerColor;
    property AutoSnapMarkerSize: Integer read Get_AutoSnapMarkerSize write Set_AutoSnapMarkerSize;
    property PolarTrackingVector: WordBool read Get_PolarTrackingVector write Set_PolarTrackingVector;
    property FullScreenTrackingVector: WordBool read Get_FullScreenTrackingVector write Set_FullScreenTrackingVector;
    property AutoTrackTooltip: WordBool read Get_AutoTrackTooltip write Set_AutoTrackTooltip;
    property AlignmentPointAcquisition: AcAlignmentPointAcquisition read Get_AlignmentPointAcquisition write Set_AlignmentPointAcquisition;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesDraftingDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1591419F-43C2-4F66-BC6F-C0FF0EFFF074}
// *********************************************************************//
  IAcadPreferencesDraftingDisp = dispinterface
    ['{1591419F-43C2-4F66-BC6F-C0FF0EFFF074}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property AutoSnapMarker: WordBool dispid 1610743809;
    property AutoSnapMagnet: WordBool dispid 1610743811;
    property AutoSnapTooltip: WordBool dispid 1610743813;
    property AutoSnapAperture: WordBool dispid 1610743815;
    property AutoSnapApertureSize: Integer dispid 1610743817;
    property AutoSnapMarkerColor: AcColor dispid 1610743819;
    property AutoSnapMarkerSize: Integer dispid 1610743821;
    property PolarTrackingVector: WordBool dispid 1610743823;
    property FullScreenTrackingVector: WordBool dispid 1610743825;
    property AutoTrackTooltip: WordBool dispid 1610743827;
    property AlignmentPointAcquisition: AcAlignmentPointAcquisition dispid 1610743829;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesSelection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {129B870F-5FEE-4EF2-9BE6-30BAD4B0CD1F}
// *********************************************************************//
  IAcadPreferencesSelection = interface(IDispatch)
    ['{129B870F-5FEE-4EF2-9BE6-30BAD4B0CD1F}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_PickFirst(Path: WordBool); safecall;
    function Get_PickFirst: WordBool; safecall;
    procedure Set_PickAdd(Path: WordBool); safecall;
    function Get_PickAdd: WordBool; safecall;
    procedure Set_PickDrag(Path: WordBool); safecall;
    function Get_PickDrag: WordBool; safecall;
    procedure Set_PickAuto(Path: WordBool); safecall;
    function Get_PickAuto: WordBool; safecall;
    procedure Set_PickBoxSize(Path: Integer); safecall;
    function Get_PickBoxSize: Integer; safecall;
    procedure Set_DisplayGrips(Path: WordBool); safecall;
    function Get_DisplayGrips: WordBool; safecall;
    procedure Set_DisplayGripsWithinBlocks(Path: WordBool); safecall;
    function Get_DisplayGripsWithinBlocks: WordBool; safecall;
    procedure Set_GripColorSelected(Path: AcColor); safecall;
    function Get_GripColorSelected: AcColor; safecall;
    procedure Set_GripColorUnselected(Path: AcColor); safecall;
    function Get_GripColorUnselected: AcColor; safecall;
    procedure Set_GripSize(Path: Integer); safecall;
    function Get_GripSize: Integer; safecall;
    procedure Set_PickGroup(pick: WordBool); safecall;
    function Get_PickGroup: WordBool; safecall;
    property Application: IAcadApplication read Get_Application;
    property PickFirst: WordBool read Get_PickFirst write Set_PickFirst;
    property PickAdd: WordBool read Get_PickAdd write Set_PickAdd;
    property PickDrag: WordBool read Get_PickDrag write Set_PickDrag;
    property PickAuto: WordBool read Get_PickAuto write Set_PickAuto;
    property PickBoxSize: Integer read Get_PickBoxSize write Set_PickBoxSize;
    property DisplayGrips: WordBool read Get_DisplayGrips write Set_DisplayGrips;
    property DisplayGripsWithinBlocks: WordBool read Get_DisplayGripsWithinBlocks write Set_DisplayGripsWithinBlocks;
    property GripColorSelected: AcColor read Get_GripColorSelected write Set_GripColorSelected;
    property GripColorUnselected: AcColor read Get_GripColorUnselected write Set_GripColorUnselected;
    property GripSize: Integer read Get_GripSize write Set_GripSize;
    property PickGroup: WordBool read Get_PickGroup write Set_PickGroup;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesSelectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {129B870F-5FEE-4EF2-9BE6-30BAD4B0CD1F}
// *********************************************************************//
  IAcadPreferencesSelectionDisp = dispinterface
    ['{129B870F-5FEE-4EF2-9BE6-30BAD4B0CD1F}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property PickFirst: WordBool dispid 1610743809;
    property PickAdd: WordBool dispid 1610743811;
    property PickDrag: WordBool dispid 1610743813;
    property PickAuto: WordBool dispid 1610743815;
    property PickBoxSize: Integer dispid 1610743817;
    property DisplayGrips: WordBool dispid 1610743819;
    property DisplayGripsWithinBlocks: WordBool dispid 1610743821;
    property GripColorSelected: AcColor dispid 1610743823;
    property GripColorUnselected: AcColor dispid 1610743825;
    property GripSize: Integer dispid 1610743827;
    property PickGroup: WordBool dispid 1610743829;
  end;

// *********************************************************************//
// Interface: IAcadPreferencesProfiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB3A84E0-1069-4B35-8564-62441E5BEDC6}
// *********************************************************************//
  IAcadPreferencesProfiles = interface(IDispatch)
    ['{EB3A84E0-1069-4B35-8564-62441E5BEDC6}']
    function Get_Application: IAcadApplication; safecall;
    procedure Set_ActiveProfile(const Path: WideString); safecall;
    function Get_ActiveProfile: WideString; safecall;
    procedure ImportProfile(const ProfileName: WideString; const RegFile: WideString; 
                            IncludePathInfo: WordBool); safecall;
    procedure ExportProfile(const ProfileName: WideString; const RegFile: WideString); safecall;
    procedure DeleteProfile(const ProfileName: WideString); safecall;
    procedure ResetProfile(const Profile: WideString); safecall;
    procedure RenameProfile(const origProfileName: WideString; const newProfileName: WideString); safecall;
    procedure CopyProfile(const oldProfileName: WideString; const newProfileName: WideString); safecall;
    procedure GetAllProfileNames(out pNames: OleVariant); safecall;
    property Application: IAcadApplication read Get_Application;
    property ActiveProfile: WideString read Get_ActiveProfile write Set_ActiveProfile;
  end;

// *********************************************************************//
// DispIntf:  IAcadPreferencesProfilesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB3A84E0-1069-4B35-8564-62441E5BEDC6}
// *********************************************************************//
  IAcadPreferencesProfilesDisp = dispinterface
    ['{EB3A84E0-1069-4B35-8564-62441E5BEDC6}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property ActiveProfile: WideString dispid 1610743809;
    procedure ImportProfile(const ProfileName: WideString; const RegFile: WideString; 
                            IncludePathInfo: WordBool); dispid 1610743811;
    procedure ExportProfile(const ProfileName: WideString; const RegFile: WideString); dispid 1610743812;
    procedure DeleteProfile(const ProfileName: WideString); dispid 1610743813;
    procedure ResetProfile(const Profile: WideString); dispid 1610743814;
    procedure RenameProfile(const origProfileName: WideString; const newProfileName: WideString); dispid 1610743815;
    procedure CopyProfile(const oldProfileName: WideString; const newProfileName: WideString); dispid 1610743816;
    procedure GetAllProfileNames(out pNames: OleVariant); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IAcadMenuGroups
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38931362-4638-4A2F-8201-E7B2AA52CA37}
// *********************************************************************//
  IAcadMenuGroups = interface(IDispatch)
    ['{38931362-4638-4A2F-8201-E7B2AA52CA37}']
    function Item(Index: OleVariant): IAcadMenuGroup; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadApplication; safecall;
    function Load(const MenuFileName: WideString; BaseMenu: OleVariant): IAcadMenuGroup; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadApplication read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IAcadMenuGroupsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38931362-4638-4A2F-8201-E7B2AA52CA37}
// *********************************************************************//
  IAcadMenuGroupsDisp = dispinterface
    ['{38931362-4638-4A2F-8201-E7B2AA52CA37}']
    function Item(Index: OleVariant): IAcadMenuGroup; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IAcadApplication readonly dispid 1610743812;
    function Load(const MenuFileName: WideString; BaseMenu: OleVariant): IAcadMenuGroup; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: IAcadMenuGroup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6261081-12FD-49ED-A359-D990DF71949D}
// *********************************************************************//
  IAcadMenuGroup = interface(IDispatch)
    ['{D6261081-12FD-49ED-A359-D990DF71949D}']
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadMenuGroups; safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: AcMenuGroupType; safecall;
    function Get_MenuFileName: WideString; safecall;
    function Get_Menus: IAcadPopupMenus; safecall;
    function Get_Toolbars: IAcadToolbars; safecall;
    procedure Unload; safecall;
    procedure Save(MenuFileType: AcMenuFileType); safecall;
    procedure SaveAs(const MenuFileName: WideString; MenuFileType: AcMenuFileType); safecall;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadMenuGroups read Get_Parent;
    property Name: WideString read Get_Name;
    property type_: AcMenuGroupType read Get_type_;
    property MenuFileName: WideString read Get_MenuFileName;
    property Menus: IAcadPopupMenus read Get_Menus;
    property Toolbars: IAcadToolbars read Get_Toolbars;
  end;

// *********************************************************************//
// DispIntf:  IAcadMenuGroupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6261081-12FD-49ED-A359-D990DF71949D}
// *********************************************************************//
  IAcadMenuGroupDisp = dispinterface
    ['{D6261081-12FD-49ED-A359-D990DF71949D}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property Parent: IAcadMenuGroups readonly dispid 1610743809;
    property Name: WideString readonly dispid 1610743810;
    property type_: AcMenuGroupType readonly dispid 1610743811;
    property MenuFileName: WideString readonly dispid 1610743812;
    property Menus: IAcadPopupMenus readonly dispid 1610743813;
    property Toolbars: IAcadToolbars readonly dispid 1610743814;
    procedure Unload; dispid 1610743815;
    procedure Save(MenuFileType: AcMenuFileType); dispid 1610743816;
    procedure SaveAs(const MenuFileName: WideString; MenuFileType: AcMenuFileType); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IAcadPopupMenus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {984C0B3E-F861-403A-A0FD-E332A7EC0CF3}
// *********************************************************************//
  IAcadPopupMenus = interface(IDispatch)
    ['{984C0B3E-F861-403A-A0FD-E332A7EC0CF3}']
    function Item(Index: OleVariant): IAcadPopupMenu; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadMenuGroup; safecall;
    function Add(const MenuName: WideString): IAcadPopupMenu; safecall;
    procedure InsertMenuInMenuBar(const MenuName: WideString; Index: OleVariant); safecall;
    procedure RemoveMenuFromMenuBar(Index: OleVariant); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadMenuGroup read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IAcadPopupMenusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {984C0B3E-F861-403A-A0FD-E332A7EC0CF3}
// *********************************************************************//
  IAcadPopupMenusDisp = dispinterface
    ['{984C0B3E-F861-403A-A0FD-E332A7EC0CF3}']
    function Item(Index: OleVariant): IAcadPopupMenu; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IAcadMenuGroup readonly dispid 1610743812;
    function Add(const MenuName: WideString): IAcadPopupMenu; dispid 1610743813;
    procedure InsertMenuInMenuBar(const MenuName: WideString; Index: OleVariant); dispid 1610743814;
    procedure RemoveMenuFromMenuBar(Index: OleVariant); dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IAcadPopupMenu
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19F1AEC4-8F70-4431-B5E3-1B3C681F0819}
// *********************************************************************//
  IAcadPopupMenu = interface(IDispatch)
    ['{19F1AEC4-8F70-4431-B5E3-1B3C681F0819}']
    function Item(Index: OleVariant): IAcadPopupMenuItem; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_NameNoMnemonic: WideString; safecall;
    function Get_ShortcutMenu: WordBool; safecall;
    function Get_OnMenuBar: WordBool; safecall;
    function AddMenuItem(Index: OleVariant; const Label_: WideString; const Macro: WideString): IAcadPopupMenuItem; safecall;
    function AddSubMenu(Index: OleVariant; const Label_: WideString): IAcadPopupMenu; safecall;
    function AddSeparator(Index: OleVariant): IAcadPopupMenuItem; safecall;
    procedure InsertInMenuBar(Index: OleVariant); safecall;
    procedure RemoveFromMenuBar; safecall;
    function Get_TagString: WideString; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name write Set_Name;
    property NameNoMnemonic: WideString read Get_NameNoMnemonic;
    property ShortcutMenu: WordBool read Get_ShortcutMenu;
    property OnMenuBar: WordBool read Get_OnMenuBar;
    property TagString: WideString read Get_TagString;
  end;

// *********************************************************************//
// DispIntf:  IAcadPopupMenuDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19F1AEC4-8F70-4431-B5E3-1B3C681F0819}
// *********************************************************************//
  IAcadPopupMenuDisp = dispinterface
    ['{19F1AEC4-8F70-4431-B5E3-1B3C681F0819}']
    function Item(Index: OleVariant): IAcadPopupMenuItem; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IDispatch readonly dispid 1610743812;
    property Name: WideString dispid 1610743813;
    property NameNoMnemonic: WideString readonly dispid 1610743815;
    property ShortcutMenu: WordBool readonly dispid 1610743816;
    property OnMenuBar: WordBool readonly dispid 1610743817;
    function AddMenuItem(Index: OleVariant; const Label_: WideString; const Macro: WideString): IAcadPopupMenuItem; dispid 1610743818;
    function AddSubMenu(Index: OleVariant; const Label_: WideString): IAcadPopupMenu; dispid 1610743819;
    function AddSeparator(Index: OleVariant): IAcadPopupMenuItem; dispid 1610743820;
    procedure InsertInMenuBar(Index: OleVariant); dispid 1610743821;
    procedure RemoveFromMenuBar; dispid 1610743822;
    property TagString: WideString readonly dispid 1610743823;
  end;

// *********************************************************************//
// Interface: IAcadPopupMenuItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7D20DD7-CB07-40A5-A611-1A62BA0806C7}
// *********************************************************************//
  IAcadPopupMenuItem = interface(IDispatch)
    ['{B7D20DD7-CB07-40A5-A611-1A62BA0806C7}']
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadPopupMenu; safecall;
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const bstrLabel: WideString); safecall;
    function Get_TagString: WideString; safecall;
    procedure Set_TagString(const bstrTag: WideString); safecall;
    function Get_Enable: WordBool; safecall;
    procedure Set_Enable(bFlag: WordBool); safecall;
    function Get_Check: WordBool; safecall;
    procedure Set_Check(bFlag: WordBool); safecall;
    function Get_type_: AcMenuItemType; safecall;
    function Get_SubMenu: IAcadPopupMenu; safecall;
    function Get_Macro: WideString; safecall;
    procedure Set_Macro(const bstrMacro: WideString); safecall;
    function Get_Index: SYSINT; safecall;
    function Get_Caption: WideString; safecall;
    function Get_HelpString: WideString; safecall;
    procedure Set_HelpString(const bstrHelp: WideString); safecall;
    procedure Delete; safecall;
    function Get_EndSubMenuLevel: SYSINT; safecall;
    procedure Set_EndSubMenuLevel(Level: SYSINT); safecall;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadPopupMenu read Get_Parent;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property TagString: WideString read Get_TagString write Set_TagString;
    property Enable: WordBool read Get_Enable write Set_Enable;
    property Check: WordBool read Get_Check write Set_Check;
    property type_: AcMenuItemType read Get_type_;
    property SubMenu: IAcadPopupMenu read Get_SubMenu;
    property Macro: WideString read Get_Macro write Set_Macro;
    property Index: SYSINT read Get_Index;
    property Caption: WideString read Get_Caption;
    property HelpString: WideString read Get_HelpString write Set_HelpString;
    property EndSubMenuLevel: SYSINT read Get_EndSubMenuLevel write Set_EndSubMenuLevel;
  end;

// *********************************************************************//
// DispIntf:  IAcadPopupMenuItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7D20DD7-CB07-40A5-A611-1A62BA0806C7}
// *********************************************************************//
  IAcadPopupMenuItemDisp = dispinterface
    ['{B7D20DD7-CB07-40A5-A611-1A62BA0806C7}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property Parent: IAcadPopupMenu readonly dispid 1610743809;
    property Label_: WideString dispid 1610743810;
    property TagString: WideString dispid 1610743812;
    property Enable: WordBool dispid 1610743814;
    property Check: WordBool dispid 1610743816;
    property type_: AcMenuItemType readonly dispid 1610743818;
    property SubMenu: IAcadPopupMenu readonly dispid 1610743819;
    property Macro: WideString dispid 1610743820;
    property Index: SYSINT readonly dispid 1610743822;
    property Caption: WideString readonly dispid 1610743823;
    property HelpString: WideString dispid 1610743824;
    procedure Delete; dispid 1610743826;
    property EndSubMenuLevel: SYSINT dispid 1610743827;
  end;

// *********************************************************************//
// Interface: IAcadToolbars
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1081A53F-2A08-4767-A131-08831AE62035}
// *********************************************************************//
  IAcadToolbars = interface(IDispatch)
    ['{1081A53F-2A08-4767-A131-08831AE62035}']
    function Item(Index: OleVariant): IAcadToolbar; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadMenuGroup; safecall;
    function Get_LargeButtons: WordBool; safecall;
    procedure Set_LargeButtons(bFlag: WordBool); safecall;
    function Add(const ToolbarName: WideString): IAcadToolbar; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadMenuGroup read Get_Parent;
    property LargeButtons: WordBool read Get_LargeButtons write Set_LargeButtons;
  end;

// *********************************************************************//
// DispIntf:  IAcadToolbarsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1081A53F-2A08-4767-A131-08831AE62035}
// *********************************************************************//
  IAcadToolbarsDisp = dispinterface
    ['{1081A53F-2A08-4767-A131-08831AE62035}']
    function Item(Index: OleVariant): IAcadToolbar; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IAcadMenuGroup readonly dispid 1610743812;
    property LargeButtons: WordBool dispid 1610743813;
    function Add(const ToolbarName: WideString): IAcadToolbar; dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IAcadToolbar
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0C961978-3209-499F-809C-CABA49EBCA97}
// *********************************************************************//
  IAcadToolbar = interface(IDispatch)
    ['{0C961978-3209-499F-809C-CABA49EBCA97}']
    function Item(Index: OleVariant): IAcadToolbarItem; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(bFlag: WordBool); safecall;
    function Get_DockStatus: AcToolbarDockStatus; safecall;
    function Get_LargeButtons: WordBool; safecall;
    function Get_left: SYSINT; safecall;
    procedure Set_left(nLeft: SYSINT); safecall;
    function Get_top: SYSINT; safecall;
    procedure Set_top(nTop: SYSINT); safecall;
    function Get_Width: SYSINT; safecall;
    function Get_Height: SYSINT; safecall;
    function Get_FloatingRows: SYSINT; safecall;
    procedure Set_FloatingRows(nRows: SYSINT); safecall;
    function Get_HelpString: WideString; safecall;
    procedure Set_HelpString(const bstrHelp: WideString); safecall;
    function AddToolbarButton(Index: OleVariant; const Name: WideString; 
                              const HelpString: WideString; const Macro: WideString; 
                              FlyoutButton: OleVariant): IAcadToolbarItem; safecall;
    function AddSeparator(Index: OleVariant): IAcadToolbarItem; safecall;
    procedure Dock(Side: AcToolbarDockStatus); safecall;
    procedure Float(top: SYSINT; left: SYSINT; NumberFloatRows: SYSINT); safecall;
    procedure Delete; safecall;
    function Get_TagString: WideString; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name write Set_Name;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DockStatus: AcToolbarDockStatus read Get_DockStatus;
    property LargeButtons: WordBool read Get_LargeButtons;
    property left: SYSINT read Get_left write Set_left;
    property top: SYSINT read Get_top write Set_top;
    property Width: SYSINT read Get_Width;
    property Height: SYSINT read Get_Height;
    property FloatingRows: SYSINT read Get_FloatingRows write Set_FloatingRows;
    property HelpString: WideString read Get_HelpString write Set_HelpString;
    property TagString: WideString read Get_TagString;
  end;

// *********************************************************************//
// DispIntf:  IAcadToolbarDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0C961978-3209-499F-809C-CABA49EBCA97}
// *********************************************************************//
  IAcadToolbarDisp = dispinterface
    ['{0C961978-3209-499F-809C-CABA49EBCA97}']
    function Item(Index: OleVariant): IAcadToolbarItem; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IDispatch readonly dispid 1610743812;
    property Name: WideString dispid 1610743813;
    property Visible: WordBool dispid 1610743815;
    property DockStatus: AcToolbarDockStatus readonly dispid 1610743817;
    property LargeButtons: WordBool readonly dispid 1610743818;
    property left: SYSINT dispid 1610743819;
    property top: SYSINT dispid 1610743821;
    property Width: SYSINT readonly dispid 1610743823;
    property Height: SYSINT readonly dispid 1610743824;
    property FloatingRows: SYSINT dispid 1610743825;
    property HelpString: WideString dispid 1610743827;
    function AddToolbarButton(Index: OleVariant; const Name: WideString; 
                              const HelpString: WideString; const Macro: WideString; 
                              FlyoutButton: OleVariant): IAcadToolbarItem; dispid 1610743829;
    function AddSeparator(Index: OleVariant): IAcadToolbarItem; dispid 1610743830;
    procedure Dock(Side: AcToolbarDockStatus); dispid 1610743831;
    procedure Float(top: SYSINT; left: SYSINT; NumberFloatRows: SYSINT); dispid 1610743832;
    procedure Delete; dispid 1610743833;
    property TagString: WideString readonly dispid 1610743834;
  end;

// *********************************************************************//
// Interface: IAcadToolbarItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0E04681-40F0-4BCB-A78F-03660DE0651A}
// *********************************************************************//
  IAcadToolbarItem = interface(IDispatch)
    ['{B0E04681-40F0-4BCB-A78F-03660DE0651A}']
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadToolbar; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const bstrName: WideString); safecall;
    function Get_TagString: WideString; safecall;
    procedure Set_TagString(const bstrTag: WideString); safecall;
    function Get_type_: AcToolbarItemType; safecall;
    function Get_Flyout: IAcadToolbar; safecall;
    function Get_Macro: WideString; safecall;
    procedure Set_Macro(const bstrMacro: WideString); safecall;
    function Get_Index: SYSINT; safecall;
    function Get_HelpString: WideString; safecall;
    procedure Set_HelpString(const bstrHelp: WideString); safecall;
    procedure GetBitmaps(out SmallIconName: WideString; out LargeIconName: WideString); safecall;
    procedure SetBitmaps(const SmallIconName: WideString; const LargeIconName: WideString); safecall;
    procedure AttachToolbarToFlyout(const MenuGroupName: WideString; const ToolbarName: WideString); safecall;
    procedure Delete; safecall;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadToolbar read Get_Parent;
    property Name: WideString read Get_Name write Set_Name;
    property TagString: WideString read Get_TagString write Set_TagString;
    property type_: AcToolbarItemType read Get_type_;
    property Flyout: IAcadToolbar read Get_Flyout;
    property Macro: WideString read Get_Macro write Set_Macro;
    property Index: SYSINT read Get_Index;
    property HelpString: WideString read Get_HelpString write Set_HelpString;
  end;

// *********************************************************************//
// DispIntf:  IAcadToolbarItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0E04681-40F0-4BCB-A78F-03660DE0651A}
// *********************************************************************//
  IAcadToolbarItemDisp = dispinterface
    ['{B0E04681-40F0-4BCB-A78F-03660DE0651A}']
    property Application: IAcadApplication readonly dispid 1610743808;
    property Parent: IAcadToolbar readonly dispid 1610743809;
    property Name: WideString dispid 1610743810;
    property TagString: WideString dispid 1610743812;
    property type_: AcToolbarItemType readonly dispid 1610743814;
    property Flyout: IAcadToolbar readonly dispid 1610743815;
    property Macro: WideString dispid 1610743816;
    property Index: SYSINT readonly dispid 1610743818;
    property HelpString: WideString dispid 1610743819;
    procedure GetBitmaps(out SmallIconName: WideString; out LargeIconName: WideString); dispid 1610743821;
    procedure SetBitmaps(const SmallIconName: WideString; const LargeIconName: WideString); dispid 1610743822;
    procedure AttachToolbarToFlyout(const MenuGroupName: WideString; const ToolbarName: WideString); dispid 1610743823;
    procedure Delete; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IAcadMenuBar
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD7E485E-3CD1-4DD5-9959-EB76B03024A5}
// *********************************************************************//
  IAcadMenuBar = interface(IDispatch)
    ['{BD7E485E-3CD1-4DD5-9959-EB76B03024A5}']
    function Item(Index: OleVariant): IAcadPopupMenu; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Get_Parent: IAcadApplication; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
    property Parent: IAcadApplication read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IAcadMenuBarDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD7E485E-3CD1-4DD5-9959-EB76B03024A5}
// *********************************************************************//
  IAcadMenuBarDisp = dispinterface
    ['{BD7E485E-3CD1-4DD5-9959-EB76B03024A5}']
    function Item(Index: OleVariant): IAcadPopupMenu; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    property Parent: IAcadApplication readonly dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IAcadDocuments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CDF18C05-94F9-4902-856D-137AC54CEADF}
// *********************************************************************//
  IAcadDocuments = interface(IDispatch)
    ['{CDF18C05-94F9-4902-856D-137AC54CEADF}']
    function Item(Index: OleVariant): IAcadDocument; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Add(TemplateName: OleVariant): IAcadDocument; safecall;
    function Open(const Name: WideString; ReadOnly: OleVariant; Password: OleVariant): IAcadDocument; safecall;
    procedure Close; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
    property Application: IAcadApplication read Get_Application;
  end;

// *********************************************************************//
// DispIntf:  IAcadDocumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CDF18C05-94F9-4902-856D-137AC54CEADF}
// *********************************************************************//
  IAcadDocumentsDisp = dispinterface
    ['{CDF18C05-94F9-4902-856D-137AC54CEADF}']
    function Item(Index: OleVariant): IAcadDocument; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 1610743810;
    property Application: IAcadApplication readonly dispid 1610743811;
    function Add(TemplateName: OleVariant): IAcadDocument; dispid 1610743812;
    function Open(const Name: WideString; ReadOnly: OleVariant; Password: OleVariant): IAcadDocument; dispid 1610743813;
    procedure Close; dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IAcadState
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {144790A6-6C66-49EC-96B0-DC148D06DB98}
// *********************************************************************//
  IAcadState = interface(IDispatch)
    ['{144790A6-6C66-49EC-96B0-DC148D06DB98}']
    function Get_Application: IAcadApplication; safecall;
    function Get_IsQuiescent: WordBool; safecall;
    property Application: IAcadApplication read Get_Application;
    property IsQuiescent: WordBool read Get_IsQuiescent;
  end;

// *********************************************************************//
// DispIntf:  IAcadStateDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {144790A6-6C66-49EC-96B0-DC148D06DB98}
// *********************************************************************//
  IAcadStateDisp = dispinterface
    ['{144790A6-6C66-49EC-96B0-DC148D06DB98}']
    property Application: IAcadApplication readonly dispid 1;
    property IsQuiescent: WordBool readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IAcadSelectionSets
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {913DBB03-9E39-4CA3-940E-BB7C4B88EF89}
// *********************************************************************//
  IAcadSelectionSets = interface(IDispatch)
    ['{913DBB03-9E39-4CA3-940E-BB7C4B88EF89}']
    function Item(Index: OleVariant): IAcadSelectionSet; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Application: IAcadApplication; safecall;
    function Add(const Name: WideString): IAcadSelectionSet; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Application: IAcadApplication read Get_Application;
  end;

// *********************************************************************//
// DispIntf:  IAcadSelectionSetsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {913DBB03-9E39-4CA3-940E-BB7C4B88EF89}
// *********************************************************************//
  IAcadSelectionSetsDisp = dispinterface
    ['{913DBB03-9E39-4CA3-940E-BB7C4B88EF89}']
    function Item(Index: OleVariant): IAcadSelectionSet; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    property Application: IAcadApplication readonly dispid 1610743811;
    function Add(const Name: WideString): IAcadSelectionSet; dispid 2;
  end;

// *********************************************************************//
// Interface: IAcadSelectionSet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3434ABBE-DCE0-446C-B763-E1ED8C2F7821}
// *********************************************************************//
  IAcadSelectionSet = interface(IDispatch)
    ['{3434ABBE-DCE0-446C-B763-E1ED8C2F7821}']
    function Item(Index: OleVariant): IAcadEntity; safecall;
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Name: WideString; safecall;
    procedure Highlight(bFlag: WordBool); safecall;
    procedure Erase; safecall;
    procedure Update; safecall;
    function Get_Application: IAcadApplication; safecall;
    procedure AddItems(pSelSet: OleVariant); safecall;
    procedure RemoveItems(Objects: OleVariant); safecall;
    procedure Clear; safecall;
    procedure Select(Mode: AcSelect; Point1: OleVariant; Point2: OleVariant; 
                     FilterType: OleVariant; FilterData: OleVariant); safecall;
    procedure SelectAtPoint(Point: OleVariant; FilterType: OleVariant; FilterData: OleVariant); safecall;
    procedure SelectByPolygon(Mode: AcSelect; PointsList: OleVariant; FilterType: OleVariant; 
                              FilterData: OleVariant); safecall;
    procedure SelectOnScreen(FilterType: OleVariant; FilterData: OleVariant); safecall;
    procedure Delete; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Name: WideString read Get_Name;
    property Application: IAcadApplication read Get_Application;
  end;

// *********************************************************************//
// DispIntf:  IAcadSelectionSetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3434ABBE-DCE0-446C-B763-E1ED8C2F7821}
// *********************************************************************//
  IAcadSelectionSetDisp = dispinterface
    ['{3434ABBE-DCE0-446C-B763-E1ED8C2F7821}']
    function Item(Index: OleVariant): IAcadEntity; dispid 0;
    property Count: Integer readonly dispid 1;
    property _NewEnum: IUnknown readonly dispid -4;
    property Name: WideString readonly dispid 2;
    procedure Highlight(bFlag: WordBool); dispid 3;
    procedure Erase; dispid 4;
    procedure Update; dispid 5;
    property Application: IAcadApplication readonly dispid 6;
    procedure AddItems(pSelSet: OleVariant); dispid 7;
    procedure RemoveItems(Objects: OleVariant); dispid 8;
    procedure Clear; dispid 9;
    procedure Select(Mode: AcSelect; Point1: OleVariant; Point2: OleVariant; 
                     FilterType: OleVariant; FilterData: OleVariant); dispid 10;
    procedure SelectAtPoint(Point: OleVariant; FilterType: OleVariant; FilterData: OleVariant); dispid 11;
    procedure SelectByPolygon(Mode: AcSelect; PointsList: OleVariant; FilterType: OleVariant; 
                              FilterData: OleVariant); dispid 12;
    procedure SelectOnScreen(FilterType: OleVariant; FilterData: OleVariant); dispid 13;
    procedure Delete; dispid 14;
  end;

// *********************************************************************//
// Interface: IAcadUtility
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22C8E547-0D27-4793-BB9F-AC58D4F8E794}
// *********************************************************************//
  IAcadUtility = interface(IDispatch)
    ['{22C8E547-0D27-4793-BB9F-AC58D4F8E794}']
    function AngleToReal(const Angle: WideString; Unit_: AcAngleUnits): Double; safecall;
    function AngleToString(Angle: Double; Unit_: AcAngleUnits; precision: SYSINT): WideString; safecall;
    function DistanceToReal(const Distance: WideString; Unit_: AcUnits): Double; safecall;
    function RealToString(Value: Double; Unit_: AcUnits; precision: SYSINT): WideString; safecall;
    function TranslateCoordinates(Point: OleVariant; FromCoordSystem: AcCoordinateSystem; 
                                  ToCoordSystem: AcCoordinateSystem; Displacement: SYSINT; 
                                  OCSNormal: OleVariant): OleVariant; safecall;
    procedure InitializeUserInput(Bits: SYSINT; KeyWordList: OleVariant); safecall;
    function GetInteger(Prompt: OleVariant): SYSINT; safecall;
    function GetReal(Prompt: OleVariant): Double; safecall;
    function GetInput: WideString; safecall;
    function GetKeyword(Prompt: OleVariant): WideString; safecall;
    function GetString(HasSpaces: SYSINT; Prompt: OleVariant): WideString; safecall;
    function GetAngle(Point: OleVariant; Prompt: OleVariant): Double; safecall;
    function AngleFromXAxis(StartPoint: OleVariant; EndPoint: OleVariant): Double; safecall;
    function GetCorner(Point: OleVariant; Prompt: OleVariant): OleVariant; safecall;
    function GetDistance(Point: OleVariant; Prompt: OleVariant): Double; safecall;
    function GetOrientation(Point: OleVariant; Prompt: OleVariant): Double; safecall;
    function GetPoint(Point: OleVariant; Prompt: OleVariant): OleVariant; safecall;
    function PolarPoint(Point: OleVariant; Angle: Double; Distance: Double): OleVariant; safecall;
    procedure CreateTypedArray(out varArr: OleVariant; Type_: SYSINT; inArgs: PSafeArray); safecall;
    procedure GetEntity(out Object_: IDispatch; out PickedPoint: OleVariant; Prompt: OleVariant); safecall;
    procedure Prompt(const Message: WideString); safecall;
    procedure GetSubEntity(out Object_: IDispatch; out PickedPoint: OleVariant; 
                           out transMatrix: OleVariant; out ContextData: OleVariant; 
                           Prompt: OleVariant); safecall;
    function IsURL(const URL: WideString): WordBool; safecall;
    procedure GetRemoteFile(const URL: WideString; out LocalFile: WideString; IgnoreCache: WordBool); safecall;
    procedure PutRemoteFile(const URL: WideString; const LocalFile: WideString); safecall;
    function IsRemoteFile(const LocalFile: WideString; out URL: WideString): WordBool; safecall;
    function LaunchBrowserDialog(out SelectedURL: WideString; const DialogTitle: WideString; 
                                 const OpenButtonCaption: WideString; 
                                 const StartPageURL: WideString; const RegistryRootKey: WideString; 
                                 OpenButtonAlwaysEnabled: WordBool): WordBool; safecall;
    procedure SendModelessOperationStart(const Context: WideString); safecall;
    procedure SendModelessOperationEnded(const Context: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IAcadUtilityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22C8E547-0D27-4793-BB9F-AC58D4F8E794}
// *********************************************************************//
  IAcadUtilityDisp = dispinterface
    ['{22C8E547-0D27-4793-BB9F-AC58D4F8E794}']
    function AngleToReal(const Angle: WideString; Unit_: AcAngleUnits): Double; dispid 1610743808;
    function AngleToString(Angle: Double; Unit_: AcAngleUnits; precision: SYSINT): WideString; dispid 1610743809;
    function DistanceToReal(const Distance: WideString; Unit_: AcUnits): Double; dispid 1610743810;
    function RealToString(Value: Double; Unit_: AcUnits; precision: SYSINT): WideString; dispid 1610743811;
    function TranslateCoordinates(Point: OleVariant; FromCoordSystem: AcCoordinateSystem; 
                                  ToCoordSystem: AcCoordinateSystem; Displacement: SYSINT; 
                                  OCSNormal: OleVariant): OleVariant; dispid 1610743812;
    procedure InitializeUserInput(Bits: SYSINT; KeyWordList: OleVariant); dispid 1610743813;
    function GetInteger(Prompt: OleVariant): SYSINT; dispid 1610743814;
    function GetReal(Prompt: OleVariant): Double; dispid 1610743815;
    function GetInput: WideString; dispid 1610743816;
    function GetKeyword(Prompt: OleVariant): WideString; dispid 1610743817;
    function GetString(HasSpaces: SYSINT; Prompt: OleVariant): WideString; dispid 1610743818;
    function GetAngle(Point: OleVariant; Prompt: OleVariant): Double; dispid 1610743819;
    function AngleFromXAxis(StartPoint: OleVariant; EndPoint: OleVariant): Double; dispid 1610743820;
    function GetCorner(Point: OleVariant; Prompt: OleVariant): OleVariant; dispid 1610743821;
    function GetDistance(Point: OleVariant; Prompt: OleVariant): Double; dispid 1610743822;
    function GetOrientation(Point: OleVariant; Prompt: OleVariant): Double; dispid 1610743823;
    function GetPoint(Point: OleVariant; Prompt: OleVariant): OleVariant; dispid 1610743824;
    function PolarPoint(Point: OleVariant; Angle: Double; Distance: Double): OleVariant; dispid 1610743825;
    procedure CreateTypedArray(out varArr: OleVariant; Type_: SYSINT; 
                               inArgs: {??PSafeArray}OleVariant); dispid 1610743826;
    procedure GetEntity(out Object_: IDispatch; out PickedPoint: OleVariant; Prompt: OleVariant); dispid 1610743827;
    procedure Prompt(const Message: WideString); dispid 1610743828;
    procedure GetSubEntity(out Object_: IDispatch; out PickedPoint: OleVariant; 
                           out transMatrix: OleVariant; out ContextData: OleVariant; 
                           Prompt: OleVariant); dispid 1610743829;
    function IsURL(const URL: WideString): WordBool; dispid 1610743830;
    procedure GetRemoteFile(const URL: WideString; out LocalFile: WideString; IgnoreCache: WordBool); dispid 1610743831;
    procedure PutRemoteFile(const URL: WideString; const LocalFile: WideString); dispid 1610743832;
    function IsRemoteFile(const LocalFile: WideString; out URL: WideString): WordBool; dispid 1610743833;
    function LaunchBrowserDialog(out SelectedURL: WideString; const DialogTitle: WideString; 
                                 const OpenButtonCaption: WideString; 
                                 const StartPageURL: WideString; const RegistryRootKey: WideString; 
                                 OpenButtonAlwaysEnabled: WordBool): WordBool; dispid 1610743834;
    procedure SendModelessOperationStart(const Context: WideString); dispid 1610743835;
    procedure SendModelessOperationEnded(const Context: WideString); dispid 1610743836;
  end;

// *********************************************************************//
// DispIntf:  _DAcadDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {C814C69D-A74B-494C-8EE6-23731B145CCB}
// *********************************************************************//
  _DAcadDocumentEvents = dispinterface
    ['{C814C69D-A74B-494C-8EE6-23731B145CCB}']
    procedure BeginSave(const FileName: WideString); dispid 1;
    procedure EndSave(const FileName: WideString); dispid 2;
    procedure BeginCommand(const CommandName: WideString); dispid 6;
    procedure EndCommand(const CommandName: WideString); dispid 7;
    procedure BeginLisp(const FirstLine: WideString); dispid 8;
    procedure EndLisp; dispid 9;
    procedure LispCancelled; dispid 10;
    procedure SelectionChanged; dispid 11;
    procedure Activate; dispid 12;
    procedure Deactivate; dispid 13;
    procedure BeginRightClick(PickPoint: OleVariant); dispid 14;
    procedure BeginShortcutMenuDefault(out ShortcutMenu: IAcadPopupMenu); dispid 15;
    procedure BeginShortcutMenuEdit(out ShortcutMenu: IAcadPopupMenu; 
                                    out SelectionSet: IAcadSelectionSet); dispid 16;
    procedure BeginShortcutMenuCommand(out ShortcutMenu: IAcadPopupMenu; const Command: WideString); dispid 17;
    procedure BeginShortcutMenuGrip(out ShortcutMenu: IAcadPopupMenu); dispid 18;
    procedure BeginShortcutMenuOsnap(out ShortcutMenu: IAcadPopupMenu); dispid 19;
    procedure EndShortcutMenu(out ShortcutMenu: IAcadPopupMenu); dispid 30;
    procedure BeginDoubleClick(PickPoint: OleVariant); dispid 20;
    procedure ObjectAdded(const Object_: IDispatch); dispid 21;
    procedure ObjectErased(ObjectID: Integer); dispid 22;
    procedure ObjectModified(const Object_: IDispatch); dispid 23;
    procedure BeginPlot(const DrawingName: WideString); dispid 24;
    procedure EndPlot(const DrawingName: WideString); dispid 25;
    procedure WindowMovedOrResized(HWNDFrame: Integer; bMoved: WordBool); dispid 29;
    procedure LayoutSwitched(const LayoutName: WideString); dispid 31;
    procedure WindowChanged(WindowState: AcWindowState); dispid 32;
    procedure BeginClose; dispid 33;
    procedure BeginDocClose(var Cancel: WordBool); dispid 34;
  end;

// *********************************************************************//
// The Class CoAcadHyperlink provides a Create and CreateRemote method to          
// create instances of the default interface IAcadHyperlink exposed by              
// the CoClass AcadHyperlink. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadHyperlink = class
    class function Create: IAcadHyperlink;
    class function CreateRemote(const MachineName: string): IAcadHyperlink;
  end;

// *********************************************************************//
// The Class CoAcadDynamicBlockReferenceProperty provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDynamicBlockReferenceProperty exposed by              
// the CoClass AcadDynamicBlockReferenceProperty. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDynamicBlockReferenceProperty = class
    class function Create: IAcadDynamicBlockReferenceProperty;
    class function CreateRemote(const MachineName: string): IAcadDynamicBlockReferenceProperty;
  end;

// *********************************************************************//
// The Class CoAcadAcCmColor provides a Create and CreateRemote method to          
// create instances of the default interface IAcadAcCmColor exposed by              
// the CoClass AcadAcCmColor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadAcCmColor = class
    class function Create: IAcadAcCmColor;
    class function CreateRemote(const MachineName: string): IAcadAcCmColor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadAcCmColor
// Help String      : AutoCAD True Color Object
// Default Interface: IAcadAcCmColor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadAcCmColorProperties= class;
{$ENDIF}
  TAcadAcCmColor = class(TOleServer)
  private
    FIntf:        IAcadAcCmColor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadAcCmColorProperties;
    function      GetServerProperties: TAcadAcCmColorProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadAcCmColor;
  protected
    procedure InitServerData; override;
    procedure Set_EntityColor(eColor: Integer);
    function Get_EntityColor: Integer;
    function Get_ColorName: WideString;
    function Get_BookName: WideString;
    function Get_Red: Integer;
    function Get_Blue: Integer;
    function Get_Green: Integer;
    procedure Set_ColorMethod(Flags: AcColorMethod);
    function Get_ColorMethod: AcColorMethod;
    function Get_ColorIndex: AcColor;
    procedure Set_ColorIndex(color: AcColor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadAcCmColor);
    procedure Disconnect; override;
    procedure SetNames(const ColorName: WideString; const BookName: WideString);
    procedure Delete;
    procedure SetRGB(Red: Integer; Green: Integer; Blue: Integer);
    procedure SetColorBookColor(const BookName: WideString; const ColorName: WideString);
    property DefaultInterface: IAcadAcCmColor read GetDefaultInterface;
    property ColorName: WideString read Get_ColorName;
    property BookName: WideString read Get_BookName;
    property Red: Integer read Get_Red;
    property Blue: Integer read Get_Blue;
    property Green: Integer read Get_Green;
    property EntityColor: Integer read Get_EntityColor write Set_EntityColor;
    property ColorMethod: AcColorMethod read Get_ColorMethod write Set_ColorMethod;
    property ColorIndex: AcColor read Get_ColorIndex write Set_ColorIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadAcCmColorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadAcCmColor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadAcCmColorProperties = class(TPersistent)
  private
    FServer:    TAcadAcCmColor;
    function    GetDefaultInterface: IAcadAcCmColor;
    constructor Create(AServer: TAcadAcCmColor);
  protected
    procedure Set_EntityColor(eColor: Integer);
    function Get_EntityColor: Integer;
    function Get_ColorName: WideString;
    function Get_BookName: WideString;
    function Get_Red: Integer;
    function Get_Blue: Integer;
    function Get_Green: Integer;
    procedure Set_ColorMethod(Flags: AcColorMethod);
    function Get_ColorMethod: AcColorMethod;
    function Get_ColorIndex: AcColor;
    procedure Set_ColorIndex(color: AcColor);
  public
    property DefaultInterface: IAcadAcCmColor read GetDefaultInterface;
  published
    property EntityColor: Integer read Get_EntityColor write Set_EntityColor;
    property ColorMethod: AcColorMethod read Get_ColorMethod write Set_ColorMethod;
    property ColorIndex: AcColor read Get_ColorIndex write Set_ColorIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadObject provides a Create and CreateRemote method to          
// create instances of the default interface IAcadObject exposed by              
// the CoClass AcadObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadObject = class
    class function Create: IAcadObject;
    class function CreateRemote(const MachineName: string): IAcadObject;
  end;

// *********************************************************************//
// The Class CoAcadXRecord provides a Create and CreateRemote method to          
// create instances of the default interface IAcadXRecord exposed by              
// the CoClass AcadXRecord. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadXRecord = class
    class function Create: IAcadXRecord;
    class function CreateRemote(const MachineName: string): IAcadXRecord;
  end;

// *********************************************************************//
// The Class CoAcadSortentsTable provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSortentsTable exposed by              
// the CoClass AcadSortentsTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSortentsTable = class
    class function Create: IAcadSortentsTable;
    class function CreateRemote(const MachineName: string): IAcadSortentsTable;
  end;

  TAcadSortentsTableModified = procedure(ASender: TObject; const pObject: IAcadObject) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadSortentsTable
// Help String      : AutoCAD AcadSortentsTable Object
// Default Interface: IAcadSortentsTable
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadSortentsTableProperties= class;
{$ENDIF}
  TAcadSortentsTable = class(TOleServer)
  private
    FOnModified: TAcadSortentsTableModified;
    FIntf:        IAcadSortentsTable;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadSortentsTableProperties;
    function      GetServerProperties: TAcadSortentsTableProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadSortentsTable;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: WideString;
    function Get_ObjectName: WideString;
    function Get_ObjectID: Integer;
    function Get_Application: IDispatch;
    function Get_Database: IAcadDatabase;
    function Get_HasExtensionDictionary: WordBool;
    function Get_OwnerID: Integer;
    function Get_Document: IDispatch;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadSortentsTable);
    procedure Disconnect; override;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant);
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant);
    procedure Delete;
    function GetExtensionDictionary: IAcadDictionary;
    procedure Erase;
    procedure MoveToBottom(Objects: OleVariant);
    procedure MoveToTop(Objects: OleVariant);
    procedure MoveBelow(Objects: OleVariant; const Target: IAcadEntity);
    procedure MoveAbove(Objects: OleVariant; const Target: IAcadEntity);
    procedure SwapOrder(const Object1: IAcadEntity; const Object2: IAcadEntity);
    function Block: IAcadBlock;
    procedure GetFullDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool);
    procedure GetRelativeDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool);
    procedure SetRelativeDrawOrder(Objects: OleVariant);
    property DefaultInterface: IAcadSortentsTable read GetDefaultInterface;
    property Handle: WideString read Get_Handle;
    property ObjectName: WideString read Get_ObjectName;
    property ObjectID: Integer read Get_ObjectID;
    property Application: IDispatch read Get_Application;
    property Database: IAcadDatabase read Get_Database;
    property HasExtensionDictionary: WordBool read Get_HasExtensionDictionary;
    property OwnerID: Integer read Get_OwnerID;
    property Document: IDispatch read Get_Document;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadSortentsTableProperties read GetServerProperties;
{$ENDIF}
    property OnModified: TAcadSortentsTableModified read FOnModified write FOnModified;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadSortentsTable
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadSortentsTableProperties = class(TPersistent)
  private
    FServer:    TAcadSortentsTable;
    function    GetDefaultInterface: IAcadSortentsTable;
    constructor Create(AServer: TAcadSortentsTable);
  protected
    function Get_Handle: WideString;
    function Get_ObjectName: WideString;
    function Get_ObjectID: Integer;
    function Get_Application: IDispatch;
    function Get_Database: IAcadDatabase;
    function Get_HasExtensionDictionary: WordBool;
    function Get_OwnerID: Integer;
    function Get_Document: IDispatch;
  public
    property DefaultInterface: IAcadSortentsTable read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadDimStyle provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimStyle exposed by              
// the CoClass AcadDimStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimStyle = class
    class function Create: IAcadDimStyle;
    class function CreateRemote(const MachineName: string): IAcadDimStyle;
  end;

// *********************************************************************//
// The Class CoAcadLayer provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLayer exposed by              
// the CoClass AcadLayer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLayer = class
    class function Create: IAcadLayer;
    class function CreateRemote(const MachineName: string): IAcadLayer;
  end;

// *********************************************************************//
// The Class CoAcadLineType provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLineType exposed by              
// the CoClass AcadLineType. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLineType = class
    class function Create: IAcadLineType;
    class function CreateRemote(const MachineName: string): IAcadLineType;
  end;

// *********************************************************************//
// The Class CoAcadMaterial provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMaterial exposed by              
// the CoClass AcadMaterial. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMaterial = class
    class function Create: IAcadMaterial;
    class function CreateRemote(const MachineName: string): IAcadMaterial;
  end;

// *********************************************************************//
// The Class CoAcadRegisteredApplication provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRegisteredApplication exposed by              
// the CoClass AcadRegisteredApplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRegisteredApplication = class
    class function Create: IAcadRegisteredApplication;
    class function CreateRemote(const MachineName: string): IAcadRegisteredApplication;
  end;

// *********************************************************************//
// The Class CoAcadTextStyle provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTextStyle exposed by              
// the CoClass AcadTextStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTextStyle = class
    class function Create: IAcadTextStyle;
    class function CreateRemote(const MachineName: string): IAcadTextStyle;
  end;

// *********************************************************************//
// The Class CoAcadUCS provides a Create and CreateRemote method to          
// create instances of the default interface IAcadUCS exposed by              
// the CoClass AcadUCS. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadUCS = class
    class function Create: IAcadUCS;
    class function CreateRemote(const MachineName: string): IAcadUCS;
  end;

// *********************************************************************//
// The Class CoAcadView provides a Create and CreateRemote method to          
// create instances of the default interface IAcadView exposed by              
// the CoClass AcadView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadView = class
    class function Create: IAcadView;
    class function CreateRemote(const MachineName: string): IAcadView;
  end;

// *********************************************************************//
// The Class CoAcadViewport provides a Create and CreateRemote method to          
// create instances of the default interface IAcadViewport exposed by              
// the CoClass AcadViewport. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadViewport = class
    class function Create: IAcadViewport;
    class function CreateRemote(const MachineName: string): IAcadViewport;
  end;

// *********************************************************************//
// The Class CoAcadGroup provides a Create and CreateRemote method to          
// create instances of the default interface IAcadGroup exposed by              
// the CoClass AcadGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadGroup = class
    class function Create: IAcadGroup;
    class function CreateRemote(const MachineName: string): IAcadGroup;
  end;

// *********************************************************************//
// The Class CoAcadPlotConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPlotConfiguration exposed by              
// the CoClass AcadPlotConfiguration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPlotConfiguration = class
    class function Create: IAcadPlotConfiguration;
    class function CreateRemote(const MachineName: string): IAcadPlotConfiguration;
  end;

// *********************************************************************//
// The Class CoAcadLayout provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLayout exposed by              
// the CoClass AcadLayout. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLayout = class
    class function Create: IAcadLayout;
    class function CreateRemote(const MachineName: string): IAcadLayout;
  end;

// *********************************************************************//
// The Class CoAcadIdPair provides a Create and CreateRemote method to          
// create instances of the default interface IAcadIdPair exposed by              
// the CoClass AcadIdPair. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadIdPair = class
    class function Create: IAcadIdPair;
    class function CreateRemote(const MachineName: string): IAcadIdPair;
  end;

// *********************************************************************//
// The Class CoAcadTableStyle provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTableStyle exposed by              
// the CoClass AcadTableStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTableStyle = class
    class function Create: IAcadTableStyle;
    class function CreateRemote(const MachineName: string): IAcadTableStyle;
  end;

  TAcadTableStyleModified = procedure(ASender: TObject; const pObject: IAcadObject) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadTableStyle
// Help String      : AutoCAD AcadTableStyle Object
// Default Interface: IAcadTableStyle
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadTableStyleProperties= class;
{$ENDIF}
  TAcadTableStyle = class(TOleServer)
  private
    FOnModified: TAcadTableStyleModified;
    FIntf:        IAcadTableStyle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadTableStyleProperties;
    function      GetServerProperties: TAcadTableStyleProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadTableStyle;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: WideString;
    function Get_ObjectName: WideString;
    function Get_ObjectID: Integer;
    function Get_Application: IDispatch;
    function Get_Database: IAcadDatabase;
    function Get_HasExtensionDictionary: WordBool;
    function Get_OwnerID: Integer;
    function Get_Document: IDispatch;
    function Get_Name: WideString;
    procedure Set_Name(const bstrValue: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const bstr: WideString);
    function Get_BitFlags: Integer;
    procedure Set_BitFlags(bitFlag: Integer);
    function Get_FlowDirection: AcTableDirection;
    procedure Set_FlowDirection(pFlow: AcTableDirection);
    function Get_HorzCellMargin: Double;
    procedure Set_HorzCellMargin(dHorzCellMargin: Double);
    function Get_VertCellMargin: Double;
    procedure Set_VertCellMargin(dVertCellMargin: Double);
    function Get_TitleSuppressed: WordBool;
    procedure Set_TitleSuppressed(bValue: WordBool);
    function Get_HeaderSuppressed: WordBool;
    procedure Set_HeaderSuppressed(bValue: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadTableStyle);
    procedure Disconnect; override;
    procedure GetXData(const AppName: WideString; out XDataType: OleVariant; 
                       out XDataValue: OleVariant);
    procedure SetXData(XDataType: OleVariant; XDataValue: OleVariant);
    procedure Delete;
    function GetExtensionDictionary: IAcadDictionary;
    procedure Erase;
    function GetTextStyle(rowType: AcRowType): WideString;
    procedure SetTextStyle(rowTypes: SYSINT; const bstrName: WideString);
    function GetTextHeight(rowType: AcRowType): Double;
    procedure SetTextHeight(rowTypes: SYSINT; TextHeight: Double);
    function GetAlignment(rowType: AcRowType): AcCellAlignment;
    procedure SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment);
    function GetColor(rowType: AcRowType): IAcadAcCmColor;
    procedure SetColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor);
    function GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor;
    procedure SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor);
    function GetBackgroundColorNone(rowType: AcRowType): WordBool;
    procedure SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool);
    function GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT;
    procedure SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; Lineweight: ACAD_LWEIGHT);
    function GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor;
    procedure SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; const pColor: IAcadAcCmColor);
    function GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool;
    procedure SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; bValue: WordBool);
    procedure GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                          out pUnitType: AcValueUnitType);
    procedure SetDataType(rowTypes: SYSINT; nDataType: AcValueDataType; nUnitType: AcValueUnitType);
    function GetFormat(rowType: AcRowType): WideString;
    procedure SetFormat(rowTypes: SYSINT; const val: WideString);
    property DefaultInterface: IAcadTableStyle read GetDefaultInterface;
    property Handle: WideString read Get_Handle;
    property ObjectName: WideString read Get_ObjectName;
    property ObjectID: Integer read Get_ObjectID;
    property Application: IDispatch read Get_Application;
    property Database: IAcadDatabase read Get_Database;
    property HasExtensionDictionary: WordBool read Get_HasExtensionDictionary;
    property OwnerID: Integer read Get_OwnerID;
    property Document: IDispatch read Get_Document;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property BitFlags: Integer read Get_BitFlags write Set_BitFlags;
    property FlowDirection: AcTableDirection read Get_FlowDirection write Set_FlowDirection;
    property HorzCellMargin: Double read Get_HorzCellMargin write Set_HorzCellMargin;
    property VertCellMargin: Double read Get_VertCellMargin write Set_VertCellMargin;
    property TitleSuppressed: WordBool read Get_TitleSuppressed write Set_TitleSuppressed;
    property HeaderSuppressed: WordBool read Get_HeaderSuppressed write Set_HeaderSuppressed;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadTableStyleProperties read GetServerProperties;
{$ENDIF}
    property OnModified: TAcadTableStyleModified read FOnModified write FOnModified;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadTableStyle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadTableStyleProperties = class(TPersistent)
  private
    FServer:    TAcadTableStyle;
    function    GetDefaultInterface: IAcadTableStyle;
    constructor Create(AServer: TAcadTableStyle);
  protected
    function Get_Handle: WideString;
    function Get_ObjectName: WideString;
    function Get_ObjectID: Integer;
    function Get_Application: IDispatch;
    function Get_Database: IAcadDatabase;
    function Get_HasExtensionDictionary: WordBool;
    function Get_OwnerID: Integer;
    function Get_Document: IDispatch;
    function Get_Name: WideString;
    procedure Set_Name(const bstrValue: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const bstr: WideString);
    function Get_BitFlags: Integer;
    procedure Set_BitFlags(bitFlag: Integer);
    function Get_FlowDirection: AcTableDirection;
    procedure Set_FlowDirection(pFlow: AcTableDirection);
    function Get_HorzCellMargin: Double;
    procedure Set_HorzCellMargin(dHorzCellMargin: Double);
    function Get_VertCellMargin: Double;
    procedure Set_VertCellMargin(dVertCellMargin: Double);
    function Get_TitleSuppressed: WordBool;
    procedure Set_TitleSuppressed(bValue: WordBool);
    function Get_HeaderSuppressed: WordBool;
    procedure Set_HeaderSuppressed(bValue: WordBool);
  public
    property DefaultInterface: IAcadTableStyle read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property BitFlags: Integer read Get_BitFlags write Set_BitFlags;
    property FlowDirection: AcTableDirection read Get_FlowDirection write Set_FlowDirection;
    property HorzCellMargin: Double read Get_HorzCellMargin write Set_HorzCellMargin;
    property VertCellMargin: Double read Get_VertCellMargin write Set_VertCellMargin;
    property TitleSuppressed: WordBool read Get_TitleSuppressed write Set_TitleSuppressed;
    property HeaderSuppressed: WordBool read Get_HeaderSuppressed write Set_HeaderSuppressed;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadSectionSettings provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSectionSettings exposed by              
// the CoClass AcadSectionSettings. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSectionSettings = class
    class function Create: IAcadSectionSettings;
    class function CreateRemote(const MachineName: string): IAcadSectionSettings;
  end;

// *********************************************************************//
// The Class CoAcadSectionTypeSettings provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSectionTypeSettings exposed by              
// the CoClass AcadSectionTypeSettings. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSectionTypeSettings = class
    class function Create: IAcadSectionTypeSettings;
    class function CreateRemote(const MachineName: string): IAcadSectionTypeSettings;
  end;

// *********************************************************************//
// The Class CoAcadHyperlinks provides a Create and CreateRemote method to          
// create instances of the default interface IAcadHyperlinks exposed by              
// the CoClass AcadHyperlinks. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadHyperlinks = class
    class function Create: IAcadHyperlinks;
    class function CreateRemote(const MachineName: string): IAcadHyperlinks;
  end;

// *********************************************************************//
// The Class CoAcadDictionary provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDictionary exposed by              
// the CoClass AcadDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDictionary = class
    class function Create: IAcadDictionary;
    class function CreateRemote(const MachineName: string): IAcadDictionary;
  end;

// *********************************************************************//
// The Class CoAcadLayers provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLayers exposed by              
// the CoClass AcadLayers. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLayers = class
    class function Create: IAcadLayers;
    class function CreateRemote(const MachineName: string): IAcadLayers;
  end;

// *********************************************************************//
// The Class CoAcadDimStyles provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimStyles exposed by              
// the CoClass AcadDimStyles. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimStyles = class
    class function Create: IAcadDimStyles;
    class function CreateRemote(const MachineName: string): IAcadDimStyles;
  end;

// *********************************************************************//
// The Class CoAcadDictionaries provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDictionaries exposed by              
// the CoClass AcadDictionaries. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDictionaries = class
    class function Create: IAcadDictionaries;
    class function CreateRemote(const MachineName: string): IAcadDictionaries;
  end;

// *********************************************************************//
// The Class CoAcadLineTypes provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLineTypes exposed by              
// the CoClass AcadLineTypes. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLineTypes = class
    class function Create: IAcadLineTypes;
    class function CreateRemote(const MachineName: string): IAcadLineTypes;
  end;

// *********************************************************************//
// The Class CoAcadMaterials provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMaterials exposed by              
// the CoClass AcadMaterials. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMaterials = class
    class function Create: IAcadMaterials;
    class function CreateRemote(const MachineName: string): IAcadMaterials;
  end;

// *********************************************************************//
// The Class CoAcadTextStyles provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTextStyles exposed by              
// the CoClass AcadTextStyles. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTextStyles = class
    class function Create: IAcadTextStyles;
    class function CreateRemote(const MachineName: string): IAcadTextStyles;
  end;

// *********************************************************************//
// The Class CoAcadUCSs provides a Create and CreateRemote method to          
// create instances of the default interface IAcadUCSs exposed by              
// the CoClass AcadUCSs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadUCSs = class
    class function Create: IAcadUCSs;
    class function CreateRemote(const MachineName: string): IAcadUCSs;
  end;

// *********************************************************************//
// The Class CoAcadRegisteredApplications provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRegisteredApplications exposed by              
// the CoClass AcadRegisteredApplications. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRegisteredApplications = class
    class function Create: IAcadRegisteredApplications;
    class function CreateRemote(const MachineName: string): IAcadRegisteredApplications;
  end;

// *********************************************************************//
// The Class CoAcadViews provides a Create and CreateRemote method to          
// create instances of the default interface IAcadViews exposed by              
// the CoClass AcadViews. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadViews = class
    class function Create: IAcadViews;
    class function CreateRemote(const MachineName: string): IAcadViews;
  end;

// *********************************************************************//
// The Class CoAcadViewports provides a Create and CreateRemote method to          
// create instances of the default interface IAcadViewports exposed by              
// the CoClass AcadViewports. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadViewports = class
    class function Create: IAcadViewports;
    class function CreateRemote(const MachineName: string): IAcadViewports;
  end;

// *********************************************************************//
// The Class CoAcadGroups provides a Create and CreateRemote method to          
// create instances of the default interface IAcadGroups exposed by              
// the CoClass AcadGroups. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadGroups = class
    class function Create: IAcadGroups;
    class function CreateRemote(const MachineName: string): IAcadGroups;
  end;

// *********************************************************************//
// The Class CoAcadBlocks provides a Create and CreateRemote method to          
// create instances of the default interface IAcadBlocks exposed by              
// the CoClass AcadBlocks. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadBlocks = class
    class function Create: IAcadBlocks;
    class function CreateRemote(const MachineName: string): IAcadBlocks;
  end;

// *********************************************************************//
// The Class CoAcadLayouts provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLayouts exposed by              
// the CoClass AcadLayouts. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLayouts = class
    class function Create: IAcadLayouts;
    class function CreateRemote(const MachineName: string): IAcadLayouts;
  end;

// *********************************************************************//
// The Class CoAcadPlotConfigurations provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPlotConfigurations exposed by              
// the CoClass AcadPlotConfigurations. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPlotConfigurations = class
    class function Create: IAcadPlotConfigurations;
    class function CreateRemote(const MachineName: string): IAcadPlotConfigurations;
  end;

// *********************************************************************//
// The Class CoAcadEntity provides a Create and CreateRemote method to          
// create instances of the default interface IAcadEntity exposed by              
// the CoClass AcadEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadEntity = class
    class function Create: IAcadEntity;
    class function CreateRemote(const MachineName: string): IAcadEntity;
  end;

// *********************************************************************//
// The Class CoAcadRasterImage provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRasterImage exposed by              
// the CoClass AcadRasterImage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRasterImage = class
    class function Create: IAcadRasterImage;
    class function CreateRemote(const MachineName: string): IAcadRasterImage;
  end;

// *********************************************************************//
// The Class CoAcad3DFace provides a Create and CreateRemote method to          
// create instances of the default interface IAcad3DFace exposed by              
// the CoClass Acad3DFace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcad3DFace = class
    class function Create: IAcad3DFace;
    class function CreateRemote(const MachineName: string): IAcad3DFace;
  end;

// *********************************************************************//
// The Class CoAcad3DPolyline provides a Create and CreateRemote method to          
// create instances of the default interface IAcad3DPolyline exposed by              
// the CoClass Acad3DPolyline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcad3DPolyline = class
    class function Create: IAcad3DPolyline;
    class function CreateRemote(const MachineName: string): IAcad3DPolyline;
  end;

// *********************************************************************//
// The Class CoAcadRegion provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRegion exposed by              
// the CoClass AcadRegion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRegion = class
    class function Create: IAcadRegion;
    class function CreateRemote(const MachineName: string): IAcadRegion;
  end;

// *********************************************************************//
// The Class CoAcad3DSolid provides a Create and CreateRemote method to          
// create instances of the default interface IAcad3DSolid exposed by              
// the CoClass Acad3DSolid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcad3DSolid = class
    class function Create: IAcad3DSolid;
    class function CreateRemote(const MachineName: string): IAcad3DSolid;
  end;

// *********************************************************************//
// The Class CoAcadArc provides a Create and CreateRemote method to          
// create instances of the default interface IAcadArc exposed by              
// the CoClass AcadArc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadArc = class
    class function Create: IAcadArc;
    class function CreateRemote(const MachineName: string): IAcadArc;
  end;

// *********************************************************************//
// The Class CoAcadAttribute provides a Create and CreateRemote method to          
// create instances of the default interface IAcadAttribute exposed by              
// the CoClass AcadAttribute. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadAttribute = class
    class function Create: IAcadAttribute;
    class function CreateRemote(const MachineName: string): IAcadAttribute;
  end;

// *********************************************************************//
// The Class CoAcadAttributeReference provides a Create and CreateRemote method to          
// create instances of the default interface IAcadAttributeReference exposed by              
// the CoClass AcadAttributeReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadAttributeReference = class
    class function Create: IAcadAttributeReference;
    class function CreateRemote(const MachineName: string): IAcadAttributeReference;
  end;

// *********************************************************************//
// The Class CoAcadBlockReference provides a Create and CreateRemote method to          
// create instances of the default interface IAcadBlockReference exposed by              
// the CoClass AcadBlockReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadBlockReference = class
    class function Create: IAcadBlockReference;
    class function CreateRemote(const MachineName: string): IAcadBlockReference;
  end;

// *********************************************************************//
// The Class CoAcadCircle provides a Create and CreateRemote method to          
// create instances of the default interface IAcadCircle exposed by              
// the CoClass AcadCircle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadCircle = class
    class function Create: IAcadCircle;
    class function CreateRemote(const MachineName: string): IAcadCircle;
  end;

// *********************************************************************//
// The Class CoAcadEllipse provides a Create and CreateRemote method to          
// create instances of the default interface IAcadEllipse exposed by              
// the CoClass AcadEllipse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadEllipse = class
    class function Create: IAcadEllipse;
    class function CreateRemote(const MachineName: string): IAcadEllipse;
  end;

// *********************************************************************//
// The Class CoAcadHatch provides a Create and CreateRemote method to          
// create instances of the default interface IAcadHatch exposed by              
// the CoClass AcadHatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadHatch = class
    class function Create: IAcadHatch;
    class function CreateRemote(const MachineName: string): IAcadHatch;
  end;

// *********************************************************************//
// The Class CoAcadLeader provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLeader exposed by              
// the CoClass AcadLeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLeader = class
    class function Create: IAcadLeader;
    class function CreateRemote(const MachineName: string): IAcadLeader;
  end;

// *********************************************************************//
// The Class CoAcadLWPolyline provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLWPolyline exposed by              
// the CoClass AcadLWPolyline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLWPolyline = class
    class function Create: IAcadLWPolyline;
    class function CreateRemote(const MachineName: string): IAcadLWPolyline;
  end;

// *********************************************************************//
// The Class CoAcadLine provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLine exposed by              
// the CoClass AcadLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLine = class
    class function Create: IAcadLine;
    class function CreateRemote(const MachineName: string): IAcadLine;
  end;

// *********************************************************************//
// The Class CoAcadMText provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMText exposed by              
// the CoClass AcadMText. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMText = class
    class function Create: IAcadMText;
    class function CreateRemote(const MachineName: string): IAcadMText;
  end;

// *********************************************************************//
// The Class CoAcadPoint provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPoint exposed by              
// the CoClass AcadPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPoint = class
    class function Create: IAcadPoint;
    class function CreateRemote(const MachineName: string): IAcadPoint;
  end;

// *********************************************************************//
// The Class CoAcadPolyline provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPolyline exposed by              
// the CoClass AcadPolyline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPolyline = class
    class function Create: IAcadPolyline;
    class function CreateRemote(const MachineName: string): IAcadPolyline;
  end;

// *********************************************************************//
// The Class CoAcadPolygonMesh provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPolygonMesh exposed by              
// the CoClass AcadPolygonMesh. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPolygonMesh = class
    class function Create: IAcadPolygonMesh;
    class function CreateRemote(const MachineName: string): IAcadPolygonMesh;
  end;

// *********************************************************************//
// The Class CoAcadRay provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRay exposed by              
// the CoClass AcadRay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRay = class
    class function Create: IAcadRay;
    class function CreateRemote(const MachineName: string): IAcadRay;
  end;

// *********************************************************************//
// The Class CoAcadShape provides a Create and CreateRemote method to          
// create instances of the default interface IAcadShape exposed by              
// the CoClass AcadShape. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadShape = class
    class function Create: IAcadShape;
    class function CreateRemote(const MachineName: string): IAcadShape;
  end;

// *********************************************************************//
// The Class CoAcadSolid provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSolid exposed by              
// the CoClass AcadSolid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSolid = class
    class function Create: IAcadSolid;
    class function CreateRemote(const MachineName: string): IAcadSolid;
  end;

// *********************************************************************//
// The Class CoAcadSpline provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSpline exposed by              
// the CoClass AcadSpline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSpline = class
    class function Create: IAcadSpline;
    class function CreateRemote(const MachineName: string): IAcadSpline;
  end;

// *********************************************************************//
// The Class CoAcadText provides a Create and CreateRemote method to          
// create instances of the default interface IAcadText exposed by              
// the CoClass AcadText. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadText = class
    class function Create: IAcadText;
    class function CreateRemote(const MachineName: string): IAcadText;
  end;

// *********************************************************************//
// The Class CoAcadTolerance provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTolerance exposed by              
// the CoClass AcadTolerance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTolerance = class
    class function Create: IAcadTolerance;
    class function CreateRemote(const MachineName: string): IAcadTolerance;
  end;

// *********************************************************************//
// The Class CoAcadTrace provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTrace exposed by              
// the CoClass AcadTrace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTrace = class
    class function Create: IAcadTrace;
    class function CreateRemote(const MachineName: string): IAcadTrace;
  end;

// *********************************************************************//
// The Class CoAcadXline provides a Create and CreateRemote method to          
// create instances of the default interface IAcadXline exposed by              
// the CoClass AcadXline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadXline = class
    class function Create: IAcadXline;
    class function CreateRemote(const MachineName: string): IAcadXline;
  end;

// *********************************************************************//
// The Class CoAcadPViewport provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPViewport exposed by              
// the CoClass AcadPViewport. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPViewport = class
    class function Create: IAcadPViewport;
    class function CreateRemote(const MachineName: string): IAcadPViewport;
  end;

// *********************************************************************//
// The Class CoAcadMInsertBlock provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMInsertBlock exposed by              
// the CoClass AcadMInsertBlock. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMInsertBlock = class
    class function Create: IAcadMInsertBlock;
    class function CreateRemote(const MachineName: string): IAcadMInsertBlock;
  end;

// *********************************************************************//
// The Class CoAcadPolyfaceMesh provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPolyfaceMesh exposed by              
// the CoClass AcadPolyfaceMesh. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPolyfaceMesh = class
    class function Create: IAcadPolyfaceMesh;
    class function CreateRemote(const MachineName: string): IAcadPolyfaceMesh;
  end;

// *********************************************************************//
// The Class CoAcadMLine provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMLine exposed by              
// the CoClass AcadMLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMLine = class
    class function Create: IAcadMLine;
    class function CreateRemote(const MachineName: string): IAcadMLine;
  end;

// *********************************************************************//
// The Class CoAcadExternalReference provides a Create and CreateRemote method to          
// create instances of the default interface IAcadExternalReference exposed by              
// the CoClass AcadExternalReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadExternalReference = class
    class function Create: IAcadExternalReference;
    class function CreateRemote(const MachineName: string): IAcadExternalReference;
  end;

// *********************************************************************//
// The Class CoAcadTable provides a Create and CreateRemote method to          
// create instances of the default interface IAcadTable exposed by              
// the CoClass AcadTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadTable = class
    class function Create: IAcadTable;
    class function CreateRemote(const MachineName: string): IAcadTable;
  end;

// *********************************************************************//
// The Class CoAcadOle provides a Create and CreateRemote method to          
// create instances of the default interface IAcadOle exposed by              
// the CoClass AcadOle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadOle = class
    class function Create: IAcadOle;
    class function CreateRemote(const MachineName: string): IAcadOle;
  end;

// *********************************************************************//
// The Class CoAcadHelix provides a Create and CreateRemote method to          
// create instances of the default interface IAcadHelix exposed by              
// the CoClass AcadHelix. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadHelix = class
    class function Create: IAcadHelix;
    class function CreateRemote(const MachineName: string): IAcadHelix;
  end;

// *********************************************************************//
// The Class CoAcadSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSurface exposed by              
// the CoClass AcadSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSurface = class
    class function Create: IAcadSurface;
    class function CreateRemote(const MachineName: string): IAcadSurface;
  end;

// *********************************************************************//
// The Class CoAcadPlaneSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPlaneSurface exposed by              
// the CoClass AcadPlaneSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPlaneSurface = class
    class function Create: IAcadPlaneSurface;
    class function CreateRemote(const MachineName: string): IAcadPlaneSurface;
  end;

// *********************************************************************//
// The Class CoAcadExtrudedSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadExtrudedSurface exposed by              
// the CoClass AcadExtrudedSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadExtrudedSurface = class
    class function Create: IAcadExtrudedSurface;
    class function CreateRemote(const MachineName: string): IAcadExtrudedSurface;
  end;

// *********************************************************************//
// The Class CoAcadRevolvedSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadRevolvedSurface exposed by              
// the CoClass AcadRevolvedSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadRevolvedSurface = class
    class function Create: IAcadRevolvedSurface;
    class function CreateRemote(const MachineName: string): IAcadRevolvedSurface;
  end;

// *********************************************************************//
// The Class CoAcadSweptSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSweptSurface exposed by              
// the CoClass AcadSweptSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSweptSurface = class
    class function Create: IAcadSweptSurface;
    class function CreateRemote(const MachineName: string): IAcadSweptSurface;
  end;

// *********************************************************************//
// The Class CoAcadLoftedSurface provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLoftedSurface exposed by              
// the CoClass AcadLoftedSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLoftedSurface = class
    class function Create: IAcadLoftedSurface;
    class function CreateRemote(const MachineName: string): IAcadLoftedSurface;
  end;

// *********************************************************************//
// The Class CoAcadSection provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSection exposed by              
// the CoClass AcadSection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSection = class
    class function Create: IAcadSection;
    class function CreateRemote(const MachineName: string): IAcadSection;
  end;

// *********************************************************************//
// The Class CoAcadSectionManager provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSectionManager exposed by              
// the CoClass AcadSectionManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSectionManager = class
    class function Create: IAcadSectionManager;
    class function CreateRemote(const MachineName: string): IAcadSectionManager;
  end;

// *********************************************************************//
// The Class CoAcadDwfUnderlay provides a Create and CreateRemote method to          
// create instances of the default interface IAcadUnderlay exposed by              
// the CoClass AcadDwfUnderlay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDwfUnderlay = class
    class function Create: IAcadUnderlay;
    class function CreateRemote(const MachineName: string): IAcadUnderlay;
  end;

// *********************************************************************//
// The Class CoAcadDgnUnderlay provides a Create and CreateRemote method to          
// create instances of the default interface IAcadUnderlay exposed by              
// the CoClass AcadDgnUnderlay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDgnUnderlay = class
    class function Create: IAcadUnderlay;
    class function CreateRemote(const MachineName: string): IAcadUnderlay;
  end;

// *********************************************************************//
// The Class CoAcadSubEntity provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSubEntity exposed by              
// the CoClass AcadSubEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSubEntity = class
    class function Create: IAcadSubEntity;
    class function CreateRemote(const MachineName: string): IAcadSubEntity;
  end;

// *********************************************************************//
// The Class CoAcadSubEntSolidFace provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSubEntSolidFace exposed by              
// the CoClass AcadSubEntSolidFace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSubEntSolidFace = class
    class function Create: IAcadSubEntSolidFace;
    class function CreateRemote(const MachineName: string): IAcadSubEntSolidFace;
  end;

// *********************************************************************//
// The Class CoAcadSubEntSolidEdge provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSubEntSolidEdge exposed by              
// the CoClass AcadSubEntSolidEdge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSubEntSolidEdge = class
    class function Create: IAcadSubEntSolidEdge;
    class function CreateRemote(const MachineName: string): IAcadSubEntSolidEdge;
  end;

// *********************************************************************//
// The Class CoAcadSubEntSolidVertex provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSubEntSolidVertex exposed by              
// the CoClass AcadSubEntSolidVertex. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSubEntSolidVertex = class
    class function Create: IAcadSubEntSolidVertex;
    class function CreateRemote(const MachineName: string): IAcadSubEntSolidVertex;
  end;

// *********************************************************************//
// The Class CoAcadSubEntSolidNode provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSubEntSolidNode exposed by              
// the CoClass AcadSubEntSolidNode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSubEntSolidNode = class
    class function Create: IAcadSubEntSolidNode;
    class function CreateRemote(const MachineName: string): IAcadSubEntSolidNode;
  end;

// *********************************************************************//
// The Class CoAcadDimension provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimension exposed by              
// the CoClass AcadDimension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimension = class
    class function Create: IAcadDimension;
    class function CreateRemote(const MachineName: string): IAcadDimension;
  end;

// *********************************************************************//
// The Class CoAcadDimAligned provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimAligned exposed by              
// the CoClass AcadDimAligned. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimAligned = class
    class function Create: IAcadDimAligned;
    class function CreateRemote(const MachineName: string): IAcadDimAligned;
  end;

// *********************************************************************//
// The Class CoAcadDimAngular provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimAngular exposed by              
// the CoClass AcadDimAngular. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimAngular = class
    class function Create: IAcadDimAngular;
    class function CreateRemote(const MachineName: string): IAcadDimAngular;
  end;

// *********************************************************************//
// The Class CoAcadDimDiametric provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimDiametric exposed by              
// the CoClass AcadDimDiametric. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimDiametric = class
    class function Create: IAcadDimDiametric;
    class function CreateRemote(const MachineName: string): IAcadDimDiametric;
  end;

// *********************************************************************//
// The Class CoAcadDimOrdinate provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimOrdinate exposed by              
// the CoClass AcadDimOrdinate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimOrdinate = class
    class function Create: IAcadDimOrdinate;
    class function CreateRemote(const MachineName: string): IAcadDimOrdinate;
  end;

// *********************************************************************//
// The Class CoAcadDimRadial provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimRadial exposed by              
// the CoClass AcadDimRadial. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimRadial = class
    class function Create: IAcadDimRadial;
    class function CreateRemote(const MachineName: string): IAcadDimRadial;
  end;

// *********************************************************************//
// The Class CoAcadDimRotated provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimRotated exposed by              
// the CoClass AcadDimRotated. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimRotated = class
    class function Create: IAcadDimRotated;
    class function CreateRemote(const MachineName: string): IAcadDimRotated;
  end;

// *********************************************************************//
// The Class CoAcadDim3PointAngular provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDim3PointAngular exposed by              
// the CoClass AcadDim3PointAngular. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDim3PointAngular = class
    class function Create: IAcadDim3PointAngular;
    class function CreateRemote(const MachineName: string): IAcadDim3PointAngular;
  end;

// *********************************************************************//
// The Class CoAcadDimArcLength provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimArcLength exposed by              
// the CoClass AcadDimArcLength. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimArcLength = class
    class function Create: IAcadDimArcLength;
    class function CreateRemote(const MachineName: string): IAcadDimArcLength;
  end;

// *********************************************************************//
// The Class CoAcadDimRadialLarge provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDimRadialLarge exposed by              
// the CoClass AcadDimRadialLarge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDimRadialLarge = class
    class function Create: IAcadDimRadialLarge;
    class function CreateRemote(const MachineName: string): IAcadDimRadialLarge;
  end;

// *********************************************************************//
// The Class CoAcadBlock provides a Create and CreateRemote method to          
// create instances of the default interface IAcadBlock exposed by              
// the CoClass AcadBlock. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadBlock = class
    class function Create: IAcadBlock;
    class function CreateRemote(const MachineName: string): IAcadBlock;
  end;

// *********************************************************************//
// The Class CoAcadModelSpace provides a Create and CreateRemote method to          
// create instances of the default interface IAcadModelSpace exposed by              
// the CoClass AcadModelSpace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadModelSpace = class
    class function Create: IAcadModelSpace;
    class function CreateRemote(const MachineName: string): IAcadModelSpace;
  end;

// *********************************************************************//
// The Class CoAcadPaperSpace provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPaperSpace exposed by              
// the CoClass AcadPaperSpace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPaperSpace = class
    class function Create: IAcadPaperSpace;
    class function CreateRemote(const MachineName: string): IAcadPaperSpace;
  end;

// *********************************************************************//
// The Class CoAcadFileDependency provides a Create and CreateRemote method to          
// create instances of the default interface IAcadFileDependency exposed by              
// the CoClass AcadFileDependency. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadFileDependency = class
    class function Create: IAcadFileDependency;
    class function CreateRemote(const MachineName: string): IAcadFileDependency;
  end;

// *********************************************************************//
// The Class CoAcadFileDependencies provides a Create and CreateRemote method to          
// create instances of the default interface IAcadFileDependencies exposed by              
// the CoClass AcadFileDependencies. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadFileDependencies = class
    class function Create: IAcadFileDependencies;
    class function CreateRemote(const MachineName: string): IAcadFileDependencies;
  end;

// *********************************************************************//
// The Class CoAcadSummaryInfo provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSummaryInfo exposed by              
// the CoClass AcadSummaryInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSummaryInfo = class
    class function Create: IAcadSummaryInfo;
    class function CreateRemote(const MachineName: string): IAcadSummaryInfo;
  end;

// *********************************************************************//
// The Class CoAcadDatabasePreferences provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDatabasePreferences exposed by              
// the CoClass AcadDatabasePreferences. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDatabasePreferences = class
    class function Create: IAcadDatabasePreferences;
    class function CreateRemote(const MachineName: string): IAcadDatabasePreferences;
  end;

// *********************************************************************//
// The Class CoAcadDatabase provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDatabase exposed by              
// the CoClass AcadDatabase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDatabase = class
    class function Create: IAcadDatabase;
    class function CreateRemote(const MachineName: string): IAcadDatabase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadDatabase
// Help String      : The contents of an XRef block
// Default Interface: IAcadDatabase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadDatabaseProperties= class;
{$ENDIF}
  TAcadDatabase = class(TOleServer)
  private
    FIntf:        IAcadDatabase;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadDatabaseProperties;
    function      GetServerProperties: TAcadDatabaseProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadDatabase;
  protected
    procedure InitServerData; override;
    function Get_ModelSpace: IAcadModelSpace;
    function Get_PaperSpace: IAcadPaperSpace;
    function Get_Blocks: IAcadBlocks;
    function Get_Groups: IAcadGroups;
    function Get_DimStyles: IAcadDimStyles;
    function Get_Layers: IAcadLayers;
    function Get_Linetypes: IAcadLineTypes;
    function Get_Dictionaries: IAcadDictionaries;
    function Get_RegisteredApplications: IAcadRegisteredApplications;
    function Get_TextStyles: IAcadTextStyles;
    function Get_UserCoordinateSystems: IAcadUCSs;
    function Get_Views: IAcadViews;
    function Get_Viewports: IAcadViewports;
    function Get_ElevationModelSpace: Double;
    procedure Set_ElevationModelSpace(Elevation: Double);
    function Get_ElevationPaperSpace: Double;
    procedure Set_ElevationPaperSpace(Elevation: Double);
    function Get_Limits: OleVariant;
    procedure Set_Limits(Limits: OleVariant);
    function Get_Layouts: IAcadLayouts;
    function Get_PlotConfigurations: IAcadPlotConfigurations;
    function Get_Preferences: IAcadDatabasePreferences;
    function Get_FileDependencies: IAcadFileDependencies;
    function Get_SummaryInfo: IAcadSummaryInfo;
    function Get_SectionManager: IAcadSectionManager;
    function Get_Materials: IAcadMaterials;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadDatabase);
    procedure Disconnect; override;
    function CopyObjects(Objects: OleVariant): OleVariant; overload;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant): OleVariant; overload;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant; overload;
    function HandleToObject(const Handle: WideString): IDispatch;
    function ObjectIdToObject(ObjectID: Integer): IDispatch;
    property DefaultInterface: IAcadDatabase read GetDefaultInterface;
    property ModelSpace: IAcadModelSpace read Get_ModelSpace;
    property PaperSpace: IAcadPaperSpace read Get_PaperSpace;
    property Blocks: IAcadBlocks read Get_Blocks;
    property Groups: IAcadGroups read Get_Groups;
    property DimStyles: IAcadDimStyles read Get_DimStyles;
    property Layers: IAcadLayers read Get_Layers;
    property Linetypes: IAcadLineTypes read Get_Linetypes;
    property Dictionaries: IAcadDictionaries read Get_Dictionaries;
    property RegisteredApplications: IAcadRegisteredApplications read Get_RegisteredApplications;
    property TextStyles: IAcadTextStyles read Get_TextStyles;
    property UserCoordinateSystems: IAcadUCSs read Get_UserCoordinateSystems;
    property Views: IAcadViews read Get_Views;
    property Viewports: IAcadViewports read Get_Viewports;
    property Limits: OleVariant read Get_Limits write Set_Limits;
    property Layouts: IAcadLayouts read Get_Layouts;
    property PlotConfigurations: IAcadPlotConfigurations read Get_PlotConfigurations;
    property Preferences: IAcadDatabasePreferences read Get_Preferences;
    property FileDependencies: IAcadFileDependencies read Get_FileDependencies;
    property SummaryInfo: IAcadSummaryInfo read Get_SummaryInfo;
    property SectionManager: IAcadSectionManager read Get_SectionManager;
    property Materials: IAcadMaterials read Get_Materials;
    property ElevationModelSpace: Double read Get_ElevationModelSpace write Set_ElevationModelSpace;
    property ElevationPaperSpace: Double read Get_ElevationPaperSpace write Set_ElevationPaperSpace;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadDatabaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadDatabase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadDatabaseProperties = class(TPersistent)
  private
    FServer:    TAcadDatabase;
    function    GetDefaultInterface: IAcadDatabase;
    constructor Create(AServer: TAcadDatabase);
  protected
    function Get_ModelSpace: IAcadModelSpace;
    function Get_PaperSpace: IAcadPaperSpace;
    function Get_Blocks: IAcadBlocks;
    function Get_Groups: IAcadGroups;
    function Get_DimStyles: IAcadDimStyles;
    function Get_Layers: IAcadLayers;
    function Get_Linetypes: IAcadLineTypes;
    function Get_Dictionaries: IAcadDictionaries;
    function Get_RegisteredApplications: IAcadRegisteredApplications;
    function Get_TextStyles: IAcadTextStyles;
    function Get_UserCoordinateSystems: IAcadUCSs;
    function Get_Views: IAcadViews;
    function Get_Viewports: IAcadViewports;
    function Get_ElevationModelSpace: Double;
    procedure Set_ElevationModelSpace(Elevation: Double);
    function Get_ElevationPaperSpace: Double;
    procedure Set_ElevationPaperSpace(Elevation: Double);
    function Get_Limits: OleVariant;
    procedure Set_Limits(Limits: OleVariant);
    function Get_Layouts: IAcadLayouts;
    function Get_PlotConfigurations: IAcadPlotConfigurations;
    function Get_Preferences: IAcadDatabasePreferences;
    function Get_FileDependencies: IAcadFileDependencies;
    function Get_SummaryInfo: IAcadSummaryInfo;
    function Get_SectionManager: IAcadSectionManager;
    function Get_Materials: IAcadMaterials;
  public
    property DefaultInterface: IAcadDatabase read GetDefaultInterface;
  published
    property ElevationModelSpace: Double read Get_ElevationModelSpace write Set_ElevationModelSpace;
    property ElevationPaperSpace: Double read Get_ElevationPaperSpace write Set_ElevationPaperSpace;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadSecurityParams provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSecurityParams exposed by              
// the CoClass AcadSecurityParams. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSecurityParams = class
    class function Create: IAcadSecurityParams;
    class function CreateRemote(const MachineName: string): IAcadSecurityParams;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadSecurityParams
// Help String      : Security Parameters Object
// Default Interface: IAcadSecurityParams
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadSecurityParamsProperties= class;
{$ENDIF}
  TAcadSecurityParams = class(TOleServer)
  private
    FIntf:        IAcadSecurityParams;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadSecurityParamsProperties;
    function      GetServerProperties: TAcadSecurityParamsProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadSecurityParams;
  protected
    procedure InitServerData; override;
    procedure Set_Action(pOperations: Integer);
    function Get_Action: Integer;
    procedure Set_Password(const pSecret: WideString);
    function Get_Password: WideString;
    procedure Set_ProviderType(pProvType: Integer);
    function Get_ProviderType: Integer;
    procedure Set_ProviderName(const pProvName: WideString);
    function Get_ProviderName: WideString;
    procedure Set_Algorithm(pAlgId: Integer);
    function Get_Algorithm: Integer;
    procedure Set_KeyLength(pKeyLen: Integer);
    function Get_KeyLength: Integer;
    procedure Set_Subject(const pCertSubject: WideString);
    function Get_Subject: WideString;
    procedure Set_Issuer(const pCertIssuer: WideString);
    function Get_Issuer: WideString;
    procedure Set_SerialNumber(const pSerialNum: WideString);
    function Get_SerialNumber: WideString;
    procedure Set_Comment(const pText: WideString);
    function Get_Comment: WideString;
    procedure Set_TimeServer(const pTimeServerName: WideString);
    function Get_TimeServer: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadSecurityParams);
    procedure Disconnect; override;
    property DefaultInterface: IAcadSecurityParams read GetDefaultInterface;
    property Action: Integer read Get_Action write Set_Action;
    property Password: WideString read Get_Password write Set_Password;
    property ProviderType: Integer read Get_ProviderType write Set_ProviderType;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property Algorithm: Integer read Get_Algorithm write Set_Algorithm;
    property KeyLength: Integer read Get_KeyLength write Set_KeyLength;
    property Subject: WideString read Get_Subject write Set_Subject;
    property Issuer: WideString read Get_Issuer write Set_Issuer;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Comment: WideString read Get_Comment write Set_Comment;
    property TimeServer: WideString read Get_TimeServer write Set_TimeServer;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadSecurityParamsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadSecurityParams
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadSecurityParamsProperties = class(TPersistent)
  private
    FServer:    TAcadSecurityParams;
    function    GetDefaultInterface: IAcadSecurityParams;
    constructor Create(AServer: TAcadSecurityParams);
  protected
    procedure Set_Action(pOperations: Integer);
    function Get_Action: Integer;
    procedure Set_Password(const pSecret: WideString);
    function Get_Password: WideString;
    procedure Set_ProviderType(pProvType: Integer);
    function Get_ProviderType: Integer;
    procedure Set_ProviderName(const pProvName: WideString);
    function Get_ProviderName: WideString;
    procedure Set_Algorithm(pAlgId: Integer);
    function Get_Algorithm: Integer;
    procedure Set_KeyLength(pKeyLen: Integer);
    function Get_KeyLength: Integer;
    procedure Set_Subject(const pCertSubject: WideString);
    function Get_Subject: WideString;
    procedure Set_Issuer(const pCertIssuer: WideString);
    function Get_Issuer: WideString;
    procedure Set_SerialNumber(const pSerialNum: WideString);
    function Get_SerialNumber: WideString;
    procedure Set_Comment(const pText: WideString);
    function Get_Comment: WideString;
    procedure Set_TimeServer(const pTimeServerName: WideString);
    function Get_TimeServer: WideString;
  public
    property DefaultInterface: IAcadSecurityParams read GetDefaultInterface;
  published
    property Action: Integer read Get_Action write Set_Action;
    property Password: WideString read Get_Password write Set_Password;
    property ProviderType: Integer read Get_ProviderType write Set_ProviderType;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property Algorithm: Integer read Get_Algorithm write Set_Algorithm;
    property KeyLength: Integer read Get_KeyLength write Set_KeyLength;
    property Subject: WideString read Get_Subject write Set_Subject;
    property Issuer: WideString read Get_Issuer write Set_Issuer;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Comment: WideString read Get_Comment write Set_Comment;
    property TimeServer: WideString read Get_TimeServer write Set_TimeServer;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadLayerStateManager provides a Create and CreateRemote method to          
// create instances of the default interface IAcadLayerStateManager exposed by              
// the CoClass AcadLayerStateManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadLayerStateManager = class
    class function Create: IAcadLayerStateManager;
    class function CreateRemote(const MachineName: string): IAcadLayerStateManager;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadLayerStateManager
// Help String      : AcadLayerStateManager Class
// Default Interface: IAcadLayerStateManager
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadLayerStateManagerProperties= class;
{$ENDIF}
  TAcadLayerStateManager = class(TOleServer)
  private
    FIntf:        IAcadLayerStateManager;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadLayerStateManagerProperties;
    function      GetServerProperties: TAcadLayerStateManagerProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadLayerStateManager;
  protected
    procedure InitServerData; override;
    procedure Set_Mask(const bsName: WideString; eMask: AcLayerStateMask);
    function Get_Mask(const bsName: WideString): AcLayerStateMask;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadLayerStateManager);
    procedure Disconnect; override;
    procedure SetDatabase(const iHostDb: IAcadDatabase);
    procedure Save(const bsName: WideString; eMask: AcLayerStateMask);
    procedure Restore(const bsName: WideString);
    procedure Delete(const bsName: WideString);
    procedure Rename(const bsName: WideString; const bsNewName: WideString);
    procedure Import(const bsFilename: WideString);
    procedure Export(const bsName: WideString; const bsFilename: WideString);
    property DefaultInterface: IAcadLayerStateManager read GetDefaultInterface;
    property Mask[const bsName: WideString]: AcLayerStateMask read Get_Mask write Set_Mask;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadLayerStateManagerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadLayerStateManager
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadLayerStateManagerProperties = class(TPersistent)
  private
    FServer:    TAcadLayerStateManager;
    function    GetDefaultInterface: IAcadLayerStateManager;
    constructor Create(AServer: TAcadLayerStateManager);
  protected
    procedure Set_Mask(const bsName: WideString; eMask: AcLayerStateMask);
    function Get_Mask(const bsName: WideString): AcLayerStateMask;
  public
    property DefaultInterface: IAcadLayerStateManager read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadState provides a Create and CreateRemote method to          
// create instances of the default interface IAcadState exposed by              
// the CoClass AcadState. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadState = class
    class function Create: IAcadState;
    class function CreateRemote(const MachineName: string): IAcadState;
  end;

// *********************************************************************//
// The Class CoAcadApplication provides a Create and CreateRemote method to          
// create instances of the default interface IAcadApplication exposed by              
// the CoClass AcadApplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadApplication = class
    class function Create: IAcadApplication;
    class function CreateRemote(const MachineName: string): IAcadApplication;
  end;

// *********************************************************************//
// The Class CoAcadSelectionSet provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSelectionSet exposed by              
// the CoClass AcadSelectionSet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSelectionSet = class
    class function Create: IAcadSelectionSet;
    class function CreateRemote(const MachineName: string): IAcadSelectionSet;
  end;

// *********************************************************************//
// The Class CoAcadSelectionSets provides a Create and CreateRemote method to          
// create instances of the default interface IAcadSelectionSets exposed by              
// the CoClass AcadSelectionSets. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadSelectionSets = class
    class function Create: IAcadSelectionSets;
    class function CreateRemote(const MachineName: string): IAcadSelectionSets;
  end;

// *********************************************************************//
// The Class CoAcadPlot provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPlot exposed by              
// the CoClass AcadPlot. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPlot = class
    class function Create: IAcadPlot;
    class function CreateRemote(const MachineName: string): IAcadPlot;
  end;

// *********************************************************************//
// The Class CoAcadPreferences provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferences exposed by              
// the CoClass AcadPreferences. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferences = class
    class function Create: IAcadPreferences;
    class function CreateRemote(const MachineName: string): IAcadPreferences;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesDrafting provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesDrafting exposed by              
// the CoClass AcadPreferencesDrafting. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesDrafting = class
    class function Create: IAcadPreferencesDrafting;
    class function CreateRemote(const MachineName: string): IAcadPreferencesDrafting;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesDisplay provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesDisplay exposed by              
// the CoClass AcadPreferencesDisplay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesDisplay = class
    class function Create: IAcadPreferencesDisplay;
    class function CreateRemote(const MachineName: string): IAcadPreferencesDisplay;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesFiles provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesFiles exposed by              
// the CoClass AcadPreferencesFiles. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesFiles = class
    class function Create: IAcadPreferencesFiles;
    class function CreateRemote(const MachineName: string): IAcadPreferencesFiles;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesOpenSave provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesOpenSave exposed by              
// the CoClass AcadPreferencesOpenSave. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesOpenSave = class
    class function Create: IAcadPreferencesOpenSave;
    class function CreateRemote(const MachineName: string): IAcadPreferencesOpenSave;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesOutput provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesOutput exposed by              
// the CoClass AcadPreferencesOutput. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesOutput = class
    class function Create: IAcadPreferencesOutput;
    class function CreateRemote(const MachineName: string): IAcadPreferencesOutput;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesProfiles provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesProfiles exposed by              
// the CoClass AcadPreferencesProfiles. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesProfiles = class
    class function Create: IAcadPreferencesProfiles;
    class function CreateRemote(const MachineName: string): IAcadPreferencesProfiles;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesSelection provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesSelection exposed by              
// the CoClass AcadPreferencesSelection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesSelection = class
    class function Create: IAcadPreferencesSelection;
    class function CreateRemote(const MachineName: string): IAcadPreferencesSelection;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesSystem provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesSystem exposed by              
// the CoClass AcadPreferencesSystem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesSystem = class
    class function Create: IAcadPreferencesSystem;
    class function CreateRemote(const MachineName: string): IAcadPreferencesSystem;
  end;

// *********************************************************************//
// The Class CoAcadPreferencesUser provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPreferencesUser exposed by              
// the CoClass AcadPreferencesUser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPreferencesUser = class
    class function Create: IAcadPreferencesUser;
    class function CreateRemote(const MachineName: string): IAcadPreferencesUser;
  end;

// *********************************************************************//
// The Class CoAcadMenuGroups provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMenuGroups exposed by              
// the CoClass AcadMenuGroups. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMenuGroups = class
    class function Create: IAcadMenuGroups;
    class function CreateRemote(const MachineName: string): IAcadMenuGroups;
  end;

// *********************************************************************//
// The Class CoAcadMenuGroup provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMenuGroup exposed by              
// the CoClass AcadMenuGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMenuGroup = class
    class function Create: IAcadMenuGroup;
    class function CreateRemote(const MachineName: string): IAcadMenuGroup;
  end;

// *********************************************************************//
// The Class CoAcadMenuBar provides a Create and CreateRemote method to          
// create instances of the default interface IAcadMenuBar exposed by              
// the CoClass AcadMenuBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadMenuBar = class
    class function Create: IAcadMenuBar;
    class function CreateRemote(const MachineName: string): IAcadMenuBar;
  end;

// *********************************************************************//
// The Class CoAcadPopupMenus provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPopupMenus exposed by              
// the CoClass AcadPopupMenus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPopupMenus = class
    class function Create: IAcadPopupMenus;
    class function CreateRemote(const MachineName: string): IAcadPopupMenus;
  end;

// *********************************************************************//
// The Class CoAcadPopupMenu provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPopupMenu exposed by              
// the CoClass AcadPopupMenu. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPopupMenu = class
    class function Create: IAcadPopupMenu;
    class function CreateRemote(const MachineName: string): IAcadPopupMenu;
  end;

// *********************************************************************//
// The Class CoAcadPopupMenuItem provides a Create and CreateRemote method to          
// create instances of the default interface IAcadPopupMenuItem exposed by              
// the CoClass AcadPopupMenuItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadPopupMenuItem = class
    class function Create: IAcadPopupMenuItem;
    class function CreateRemote(const MachineName: string): IAcadPopupMenuItem;
  end;

// *********************************************************************//
// The Class CoAcadUtility provides a Create and CreateRemote method to          
// create instances of the default interface IAcadUtility exposed by              
// the CoClass AcadUtility. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadUtility = class
    class function Create: IAcadUtility;
    class function CreateRemote(const MachineName: string): IAcadUtility;
  end;

// *********************************************************************//
// The Class CoAcadDocument provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDocument exposed by              
// the CoClass AcadDocument. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDocument = class
    class function Create: IAcadDocument;
    class function CreateRemote(const MachineName: string): IAcadDocument;
  end;

  TAcadDocumentBeginSave = procedure(ASender: TObject; const FileName: WideString) of object;
  TAcadDocumentEndSave = procedure(ASender: TObject; const FileName: WideString) of object;
  TAcadDocumentBeginCommand = procedure(ASender: TObject; const CommandName: WideString) of object;
  TAcadDocumentEndCommand = procedure(ASender: TObject; const CommandName: WideString) of object;
  TAcadDocumentBeginLisp = procedure(ASender: TObject; const FirstLine: WideString) of object;
  TAcadDocumentBeginRightClick = procedure(ASender: TObject; PickPoint: OleVariant) of object;
  TAcadDocumentBeginShortcutMenuDefault = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu) of object;
  TAcadDocumentBeginShortcutMenuEdit = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu; 
                                                                   out SelectionSet: IAcadSelectionSet) of object;
  TAcadDocumentBeginShortcutMenuCommand = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu; 
                                                                      const Command: WideString) of object;
  TAcadDocumentBeginShortcutMenuGrip = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu) of object;
  TAcadDocumentBeginShortcutMenuOsnap = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu) of object;
  TAcadDocumentEndShortcutMenu = procedure(ASender: TObject; out ShortcutMenu: IAcadPopupMenu) of object;
  TAcadDocumentBeginDoubleClick = procedure(ASender: TObject; PickPoint: OleVariant) of object;
  TAcadDocumentObjectAdded = procedure(ASender: TObject; const Object_: IDispatch) of object;
  TAcadDocumentObjectErased = procedure(ASender: TObject; ObjectID: Integer) of object;
  TAcadDocumentObjectModified = procedure(ASender: TObject; const Object_: IDispatch) of object;
  TAcadDocumentBeginPlot = procedure(ASender: TObject; const DrawingName: WideString) of object;
  TAcadDocumentEndPlot = procedure(ASender: TObject; const DrawingName: WideString) of object;
  TAcadDocumentWindowMovedOrResized = procedure(ASender: TObject; HWNDFrame: Integer; 
                                                                  bMoved: WordBool) of object;
  TAcadDocumentLayoutSwitched = procedure(ASender: TObject; const LayoutName: WideString) of object;
  TAcadDocumentWindowChanged = procedure(ASender: TObject; WindowState: AcWindowState) of object;
  TAcadDocumentBeginDocClose = procedure(ASender: TObject; var Cancel: WordBool) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAcadDocument
// Help String      : An AutoCAD drawing
// Default Interface: IAcadDocument
// Def. Intf. DISP? : No
// Event   Interface: _DAcadDocumentEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAcadDocumentProperties= class;
{$ENDIF}
  TAcadDocument = class(TOleServer)
  private
    FOnBeginSave: TAcadDocumentBeginSave;
    FOnEndSave: TAcadDocumentEndSave;
    FOnBeginCommand: TAcadDocumentBeginCommand;
    FOnEndCommand: TAcadDocumentEndCommand;
    FOnBeginLisp: TAcadDocumentBeginLisp;
    FOnEndLisp: TNotifyEvent;
    FOnLispCancelled: TNotifyEvent;
    FOnSelectionChanged: TNotifyEvent;
    FOnActivate: TNotifyEvent;
    FOnDeactivate: TNotifyEvent;
    FOnBeginRightClick: TAcadDocumentBeginRightClick;
    FOnBeginShortcutMenuDefault: TAcadDocumentBeginShortcutMenuDefault;
    FOnBeginShortcutMenuEdit: TAcadDocumentBeginShortcutMenuEdit;
    FOnBeginShortcutMenuCommand: TAcadDocumentBeginShortcutMenuCommand;
    FOnBeginShortcutMenuGrip: TAcadDocumentBeginShortcutMenuGrip;
    FOnBeginShortcutMenuOsnap: TAcadDocumentBeginShortcutMenuOsnap;
    FOnEndShortcutMenu: TAcadDocumentEndShortcutMenu;
    FOnBeginDoubleClick: TAcadDocumentBeginDoubleClick;
    FOnObjectAdded: TAcadDocumentObjectAdded;
    FOnObjectErased: TAcadDocumentObjectErased;
    FOnObjectModified: TAcadDocumentObjectModified;
    FOnBeginPlot: TAcadDocumentBeginPlot;
    FOnEndPlot: TAcadDocumentEndPlot;
    FOnWindowMovedOrResized: TAcadDocumentWindowMovedOrResized;
    FOnLayoutSwitched: TAcadDocumentLayoutSwitched;
    FOnWindowChanged: TAcadDocumentWindowChanged;
    FOnBeginClose: TNotifyEvent;
    FOnBeginDocClose: TAcadDocumentBeginDocClose;
    FIntf:        IAcadDocument;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAcadDocumentProperties;
    function      GetServerProperties: TAcadDocumentProperties;
{$ENDIF}
    function      GetDefaultInterface: IAcadDocument;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_ModelSpace: IAcadModelSpace;
    function Get_PaperSpace: IAcadPaperSpace;
    function Get_Blocks: IAcadBlocks;
    function Get_Groups: IAcadGroups;
    function Get_DimStyles: IAcadDimStyles;
    function Get_Layers: IAcadLayers;
    function Get_Linetypes: IAcadLineTypes;
    function Get_Dictionaries: IAcadDictionaries;
    function Get_RegisteredApplications: IAcadRegisteredApplications;
    function Get_TextStyles: IAcadTextStyles;
    function Get_UserCoordinateSystems: IAcadUCSs;
    function Get_Views: IAcadViews;
    function Get_Viewports: IAcadViewports;
    function Get_ElevationModelSpace: Double;
    procedure Set_ElevationModelSpace(Elevation: Double);
    function Get_ElevationPaperSpace: Double;
    procedure Set_ElevationPaperSpace(Elevation: Double);
    function Get_Limits: OleVariant;
    procedure Set_Limits(Limits: OleVariant);
    function Get_Layouts: IAcadLayouts;
    function Get_PlotConfigurations: IAcadPlotConfigurations;
    function Get_Preferences: IAcadDatabasePreferences;
    function Get_FileDependencies: IAcadFileDependencies;
    function Get_SummaryInfo: IAcadSummaryInfo;
    function Get_SectionManager: IAcadSectionManager;
    function Get_Materials: IAcadMaterials;
    function Get_Plot: IAcadPlot;
    function Get_ActiveLayer: IAcadLayer;
    procedure Set_ActiveLayer(const pActLayer: IAcadLayer);
    function Get_ActiveLinetype: IAcadLineType;
    procedure Set_ActiveLinetype(const pActLinetype: IAcadLineType);
    function Get_ActiveDimStyle: IAcadDimStyle;
    procedure Set_ActiveDimStyle(const pActDimStyle: IAcadDimStyle);
    function Get_ActiveTextStyle: IAcadTextStyle;
    procedure Set_ActiveTextStyle(const pActTextStyle: IAcadTextStyle);
    function Get_ActiveUCS: IAcadUCS;
    procedure Set_ActiveUCS(const pActUCS: IAcadUCS);
    function Get_ActiveViewport: IAcadViewport;
    procedure Set_ActiveViewport(const pActView: IAcadViewport);
    function Get_ActivePViewport: IAcadPViewport;
    procedure Set_ActivePViewport(const pActView: IAcadPViewport);
    function Get_ActiveSpace: AcActiveSpace;
    procedure Set_ActiveSpace(ActSpace: AcActiveSpace);
    function Get_SelectionSets: IAcadSelectionSets;
    function Get_ActiveSelectionSet: IAcadSelectionSet;
    function Get_FullName: WideString;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_ObjectSnapMode: WordBool;
    procedure Set_ObjectSnapMode(fSnapMode: WordBool);
    function Get_ReadOnly: WordBool;
    function Get_Saved: WordBool;
    function Get_MSpace: WordBool;
    procedure Set_MSpace(Mode: WordBool);
    function Get_Utility: IAcadUtility;
    function Get_PickfirstSelectionSet: IAcadSelectionSet;
    function Get_Active: WordBool;
    procedure Set_WindowState(pWinState: AcWindowState);
    function Get_WindowState: AcWindowState;
    procedure Set_Width(pWidth: SYSINT);
    function Get_Width: SYSINT;
    procedure Set_Height(pHeight: SYSINT);
    function Get_Height: SYSINT;
    procedure Set_ActiveLayout(const pLayout: IAcadLayout);
    function Get_ActiveLayout: IAcadLayout;
    function Get_HWND: Integer;
    function Get_WindowTitle: WideString;
    function Get_Application: IAcadApplication;
    function Get_Database: IAcadDatabase;
    function Get_ActiveMaterial: IAcadMaterial;
    procedure Set_ActiveMaterial(const pActMaterial: IAcadMaterial);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAcadDocument);
    procedure Disconnect; override;
    function CopyObjects(Objects: OleVariant): OleVariant; overload;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant): OleVariant; overload;
    function CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant; overload;
    function HandleToObject(const Handle: WideString): IDispatch;
    function ObjectIdToObject(ObjectID: Integer): IDispatch;
    function Open(const FullName: WideString): IAcadDocument; overload;
    function Open(const FullName: WideString; Password: OleVariant): IAcadDocument; overload;
    procedure AuditInfo(FixErr: WordBool);
    function Import(const FileName: WideString; InsertionPoint: OleVariant; ScaleFactor: Double): IDispatch;
    procedure Export(const FileName: WideString; const Extension: WideString; 
                     const SelectionSet: IAcadSelectionSet);
    function New(const TemplateFileName: WideString): IAcadDocument;
    procedure Save;
    procedure SaveAs(const FullFileName: WideString); overload;
    procedure SaveAs(const FullFileName: WideString; SaveAsType: OleVariant); overload;
    procedure SaveAs(const FullFileName: WideString; SaveAsType: OleVariant; 
                     vSecurityParams: OleVariant); overload;
    procedure Wblock(const FileName: WideString; const SelectionSet: IAcadSelectionSet);
    procedure PurgeAll;
    function GetVariable(const Name: WideString): OleVariant;
    procedure SetVariable(const Name: WideString; Value: OleVariant);
    procedure LoadShapeFile(const FullName: WideString);
    procedure Regen(WhichViewports: AcRegenType);
    procedure Activate;
    procedure Close; overload;
    procedure Close(SaveChanges: OleVariant); overload;
    procedure Close(SaveChanges: OleVariant; FileName: OleVariant); overload;
    procedure SendCommand(const Command: WideString);
    procedure StartUndoMark;
    procedure EndUndoMark;
    property DefaultInterface: IAcadDocument read GetDefaultInterface;
    property ModelSpace: IAcadModelSpace read Get_ModelSpace;
    property PaperSpace: IAcadPaperSpace read Get_PaperSpace;
    property Blocks: IAcadBlocks read Get_Blocks;
    property Groups: IAcadGroups read Get_Groups;
    property DimStyles: IAcadDimStyles read Get_DimStyles;
    property Layers: IAcadLayers read Get_Layers;
    property Linetypes: IAcadLineTypes read Get_Linetypes;
    property Dictionaries: IAcadDictionaries read Get_Dictionaries;
    property RegisteredApplications: IAcadRegisteredApplications read Get_RegisteredApplications;
    property TextStyles: IAcadTextStyles read Get_TextStyles;
    property UserCoordinateSystems: IAcadUCSs read Get_UserCoordinateSystems;
    property Views: IAcadViews read Get_Views;
    property Viewports: IAcadViewports read Get_Viewports;
    property Limits: OleVariant read Get_Limits write Set_Limits;
    property Layouts: IAcadLayouts read Get_Layouts;
    property PlotConfigurations: IAcadPlotConfigurations read Get_PlotConfigurations;
    property Preferences: IAcadDatabasePreferences read Get_Preferences;
    property FileDependencies: IAcadFileDependencies read Get_FileDependencies;
    property SummaryInfo: IAcadSummaryInfo read Get_SummaryInfo;
    property SectionManager: IAcadSectionManager read Get_SectionManager;
    property Materials: IAcadMaterials read Get_Materials;
    property Plot: IAcadPlot read Get_Plot;
    property SelectionSets: IAcadSelectionSets read Get_SelectionSets;
    property ActiveSelectionSet: IAcadSelectionSet read Get_ActiveSelectionSet;
    property FullName: WideString read Get_FullName;
    property Name: WideString read Get_Name;
    property Path: WideString read Get_Path;
    property ReadOnly: WordBool read Get_ReadOnly;
    property Saved: WordBool read Get_Saved;
    property Utility: IAcadUtility read Get_Utility;
    property PickfirstSelectionSet: IAcadSelectionSet read Get_PickfirstSelectionSet;
    property Active: WordBool read Get_Active;
    property HWND: Integer read Get_HWND;
    property WindowTitle: WideString read Get_WindowTitle;
    property Application: IAcadApplication read Get_Application;
    property Database: IAcadDatabase read Get_Database;
    property ElevationModelSpace: Double read Get_ElevationModelSpace write Set_ElevationModelSpace;
    property ElevationPaperSpace: Double read Get_ElevationPaperSpace write Set_ElevationPaperSpace;
    property ActiveLayer: IAcadLayer read Get_ActiveLayer write Set_ActiveLayer;
    property ActiveLinetype: IAcadLineType read Get_ActiveLinetype write Set_ActiveLinetype;
    property ActiveDimStyle: IAcadDimStyle read Get_ActiveDimStyle write Set_ActiveDimStyle;
    property ActiveTextStyle: IAcadTextStyle read Get_ActiveTextStyle write Set_ActiveTextStyle;
    property ActiveUCS: IAcadUCS read Get_ActiveUCS write Set_ActiveUCS;
    property ActiveViewport: IAcadViewport read Get_ActiveViewport write Set_ActiveViewport;
    property ActivePViewport: IAcadPViewport read Get_ActivePViewport write Set_ActivePViewport;
    property ActiveSpace: AcActiveSpace read Get_ActiveSpace write Set_ActiveSpace;
    property ObjectSnapMode: WordBool read Get_ObjectSnapMode write Set_ObjectSnapMode;
    property MSpace: WordBool read Get_MSpace write Set_MSpace;
    property WindowState: AcWindowState read Get_WindowState write Set_WindowState;
    property Width: SYSINT read Get_Width write Set_Width;
    property Height: SYSINT read Get_Height write Set_Height;
    property ActiveLayout: IAcadLayout read Get_ActiveLayout write Set_ActiveLayout;
    property ActiveMaterial: IAcadMaterial read Get_ActiveMaterial write Set_ActiveMaterial;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAcadDocumentProperties read GetServerProperties;
{$ENDIF}
    property OnBeginSave: TAcadDocumentBeginSave read FOnBeginSave write FOnBeginSave;
    property OnEndSave: TAcadDocumentEndSave read FOnEndSave write FOnEndSave;
    property OnBeginCommand: TAcadDocumentBeginCommand read FOnBeginCommand write FOnBeginCommand;
    property OnEndCommand: TAcadDocumentEndCommand read FOnEndCommand write FOnEndCommand;
    property OnBeginLisp: TAcadDocumentBeginLisp read FOnBeginLisp write FOnBeginLisp;
    property OnEndLisp: TNotifyEvent read FOnEndLisp write FOnEndLisp;
    property OnLispCancelled: TNotifyEvent read FOnLispCancelled write FOnLispCancelled;
    property OnSelectionChanged: TNotifyEvent read FOnSelectionChanged write FOnSelectionChanged;
    property OnActivate: TNotifyEvent read FOnActivate write FOnActivate;
    property OnDeactivate: TNotifyEvent read FOnDeactivate write FOnDeactivate;
    property OnBeginRightClick: TAcadDocumentBeginRightClick read FOnBeginRightClick write FOnBeginRightClick;
    property OnBeginShortcutMenuDefault: TAcadDocumentBeginShortcutMenuDefault read FOnBeginShortcutMenuDefault write FOnBeginShortcutMenuDefault;
    property OnBeginShortcutMenuEdit: TAcadDocumentBeginShortcutMenuEdit read FOnBeginShortcutMenuEdit write FOnBeginShortcutMenuEdit;
    property OnBeginShortcutMenuCommand: TAcadDocumentBeginShortcutMenuCommand read FOnBeginShortcutMenuCommand write FOnBeginShortcutMenuCommand;
    property OnBeginShortcutMenuGrip: TAcadDocumentBeginShortcutMenuGrip read FOnBeginShortcutMenuGrip write FOnBeginShortcutMenuGrip;
    property OnBeginShortcutMenuOsnap: TAcadDocumentBeginShortcutMenuOsnap read FOnBeginShortcutMenuOsnap write FOnBeginShortcutMenuOsnap;
    property OnEndShortcutMenu: TAcadDocumentEndShortcutMenu read FOnEndShortcutMenu write FOnEndShortcutMenu;
    property OnBeginDoubleClick: TAcadDocumentBeginDoubleClick read FOnBeginDoubleClick write FOnBeginDoubleClick;
    property OnObjectAdded: TAcadDocumentObjectAdded read FOnObjectAdded write FOnObjectAdded;
    property OnObjectErased: TAcadDocumentObjectErased read FOnObjectErased write FOnObjectErased;
    property OnObjectModified: TAcadDocumentObjectModified read FOnObjectModified write FOnObjectModified;
    property OnBeginPlot: TAcadDocumentBeginPlot read FOnBeginPlot write FOnBeginPlot;
    property OnEndPlot: TAcadDocumentEndPlot read FOnEndPlot write FOnEndPlot;
    property OnWindowMovedOrResized: TAcadDocumentWindowMovedOrResized read FOnWindowMovedOrResized write FOnWindowMovedOrResized;
    property OnLayoutSwitched: TAcadDocumentLayoutSwitched read FOnLayoutSwitched write FOnLayoutSwitched;
    property OnWindowChanged: TAcadDocumentWindowChanged read FOnWindowChanged write FOnWindowChanged;
    property OnBeginClose: TNotifyEvent read FOnBeginClose write FOnBeginClose;
    property OnBeginDocClose: TAcadDocumentBeginDocClose read FOnBeginDocClose write FOnBeginDocClose;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAcadDocument
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAcadDocumentProperties = class(TPersistent)
  private
    FServer:    TAcadDocument;
    function    GetDefaultInterface: IAcadDocument;
    constructor Create(AServer: TAcadDocument);
  protected
    function Get_ModelSpace: IAcadModelSpace;
    function Get_PaperSpace: IAcadPaperSpace;
    function Get_Blocks: IAcadBlocks;
    function Get_Groups: IAcadGroups;
    function Get_DimStyles: IAcadDimStyles;
    function Get_Layers: IAcadLayers;
    function Get_Linetypes: IAcadLineTypes;
    function Get_Dictionaries: IAcadDictionaries;
    function Get_RegisteredApplications: IAcadRegisteredApplications;
    function Get_TextStyles: IAcadTextStyles;
    function Get_UserCoordinateSystems: IAcadUCSs;
    function Get_Views: IAcadViews;
    function Get_Viewports: IAcadViewports;
    function Get_ElevationModelSpace: Double;
    procedure Set_ElevationModelSpace(Elevation: Double);
    function Get_ElevationPaperSpace: Double;
    procedure Set_ElevationPaperSpace(Elevation: Double);
    function Get_Limits: OleVariant;
    procedure Set_Limits(Limits: OleVariant);
    function Get_Layouts: IAcadLayouts;
    function Get_PlotConfigurations: IAcadPlotConfigurations;
    function Get_Preferences: IAcadDatabasePreferences;
    function Get_FileDependencies: IAcadFileDependencies;
    function Get_SummaryInfo: IAcadSummaryInfo;
    function Get_SectionManager: IAcadSectionManager;
    function Get_Materials: IAcadMaterials;
    function Get_Plot: IAcadPlot;
    function Get_ActiveLayer: IAcadLayer;
    procedure Set_ActiveLayer(const pActLayer: IAcadLayer);
    function Get_ActiveLinetype: IAcadLineType;
    procedure Set_ActiveLinetype(const pActLinetype: IAcadLineType);
    function Get_ActiveDimStyle: IAcadDimStyle;
    procedure Set_ActiveDimStyle(const pActDimStyle: IAcadDimStyle);
    function Get_ActiveTextStyle: IAcadTextStyle;
    procedure Set_ActiveTextStyle(const pActTextStyle: IAcadTextStyle);
    function Get_ActiveUCS: IAcadUCS;
    procedure Set_ActiveUCS(const pActUCS: IAcadUCS);
    function Get_ActiveViewport: IAcadViewport;
    procedure Set_ActiveViewport(const pActView: IAcadViewport);
    function Get_ActivePViewport: IAcadPViewport;
    procedure Set_ActivePViewport(const pActView: IAcadPViewport);
    function Get_ActiveSpace: AcActiveSpace;
    procedure Set_ActiveSpace(ActSpace: AcActiveSpace);
    function Get_SelectionSets: IAcadSelectionSets;
    function Get_ActiveSelectionSet: IAcadSelectionSet;
    function Get_FullName: WideString;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_ObjectSnapMode: WordBool;
    procedure Set_ObjectSnapMode(fSnapMode: WordBool);
    function Get_ReadOnly: WordBool;
    function Get_Saved: WordBool;
    function Get_MSpace: WordBool;
    procedure Set_MSpace(Mode: WordBool);
    function Get_Utility: IAcadUtility;
    function Get_PickfirstSelectionSet: IAcadSelectionSet;
    function Get_Active: WordBool;
    procedure Set_WindowState(pWinState: AcWindowState);
    function Get_WindowState: AcWindowState;
    procedure Set_Width(pWidth: SYSINT);
    function Get_Width: SYSINT;
    procedure Set_Height(pHeight: SYSINT);
    function Get_Height: SYSINT;
    procedure Set_ActiveLayout(const pLayout: IAcadLayout);
    function Get_ActiveLayout: IAcadLayout;
    function Get_HWND: Integer;
    function Get_WindowTitle: WideString;
    function Get_Application: IAcadApplication;
    function Get_Database: IAcadDatabase;
    function Get_ActiveMaterial: IAcadMaterial;
    procedure Set_ActiveMaterial(const pActMaterial: IAcadMaterial);
  public
    property DefaultInterface: IAcadDocument read GetDefaultInterface;
  published
    property ElevationModelSpace: Double read Get_ElevationModelSpace write Set_ElevationModelSpace;
    property ElevationPaperSpace: Double read Get_ElevationPaperSpace write Set_ElevationPaperSpace;
    property ActiveLayer: IAcadLayer read Get_ActiveLayer write Set_ActiveLayer;
    property ActiveLinetype: IAcadLineType read Get_ActiveLinetype write Set_ActiveLinetype;
    property ActiveDimStyle: IAcadDimStyle read Get_ActiveDimStyle write Set_ActiveDimStyle;
    property ActiveTextStyle: IAcadTextStyle read Get_ActiveTextStyle write Set_ActiveTextStyle;
    property ActiveUCS: IAcadUCS read Get_ActiveUCS write Set_ActiveUCS;
    property ActiveViewport: IAcadViewport read Get_ActiveViewport write Set_ActiveViewport;
    property ActivePViewport: IAcadPViewport read Get_ActivePViewport write Set_ActivePViewport;
    property ActiveSpace: AcActiveSpace read Get_ActiveSpace write Set_ActiveSpace;
    property ObjectSnapMode: WordBool read Get_ObjectSnapMode write Set_ObjectSnapMode;
    property MSpace: WordBool read Get_MSpace write Set_MSpace;
    property WindowState: AcWindowState read Get_WindowState write Set_WindowState;
    property Width: SYSINT read Get_Width write Set_Width;
    property Height: SYSINT read Get_Height write Set_Height;
    property ActiveLayout: IAcadLayout read Get_ActiveLayout write Set_ActiveLayout;
    property ActiveMaterial: IAcadMaterial read Get_ActiveMaterial write Set_ActiveMaterial;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAcadDocuments provides a Create and CreateRemote method to          
// create instances of the default interface IAcadDocuments exposed by              
// the CoClass AcadDocuments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadDocuments = class
    class function Create: IAcadDocuments;
    class function CreateRemote(const MachineName: string): IAcadDocuments;
  end;

// *********************************************************************//
// The Class CoAcadToolbars provides a Create and CreateRemote method to          
// create instances of the default interface IAcadToolbars exposed by              
// the CoClass AcadToolbars. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadToolbars = class
    class function Create: IAcadToolbars;
    class function CreateRemote(const MachineName: string): IAcadToolbars;
  end;

// *********************************************************************//
// The Class CoAcadToolbar provides a Create and CreateRemote method to          
// create instances of the default interface IAcadToolbar exposed by              
// the CoClass AcadToolbar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadToolbar = class
    class function Create: IAcadToolbar;
    class function CreateRemote(const MachineName: string): IAcadToolbar;
  end;

// *********************************************************************//
// The Class CoAcadToolbarItem provides a Create and CreateRemote method to          
// create instances of the default interface IAcadToolbarItem exposed by              
// the CoClass AcadToolbarItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAcadToolbarItem = class
    class function Create: IAcadToolbarItem;
    class function CreateRemote(const MachineName: string): IAcadToolbarItem;
  end;

procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoAcadHyperlink.Create: IAcadHyperlink;
begin
  Result := CreateComObject(CLASS_AcadHyperlink) as IAcadHyperlink;
end;

class function CoAcadHyperlink.CreateRemote(const MachineName: string): IAcadHyperlink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadHyperlink) as IAcadHyperlink;
end;

class function CoAcadDynamicBlockReferenceProperty.Create: IAcadDynamicBlockReferenceProperty;
begin
  Result := CreateComObject(CLASS_AcadDynamicBlockReferenceProperty) as IAcadDynamicBlockReferenceProperty;
end;

class function CoAcadDynamicBlockReferenceProperty.CreateRemote(const MachineName: string): IAcadDynamicBlockReferenceProperty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDynamicBlockReferenceProperty) as IAcadDynamicBlockReferenceProperty;
end;

class function CoAcadAcCmColor.Create: IAcadAcCmColor;
begin
  Result := CreateComObject(CLASS_AcadAcCmColor) as IAcadAcCmColor;
end;

class function CoAcadAcCmColor.CreateRemote(const MachineName: string): IAcadAcCmColor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadAcCmColor) as IAcadAcCmColor;
end;

procedure TAcadAcCmColor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C8C18F89-794D-466B-8B97-95634D9890EF}';
    IntfIID:   '{7382F647-BC48-456E-B877-D18F58BE6878}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadAcCmColor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAcadAcCmColor;
  end;
end;

procedure TAcadAcCmColor.ConnectTo(svrIntf: IAcadAcCmColor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAcadAcCmColor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAcadAcCmColor.GetDefaultInterface: IAcadAcCmColor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadAcCmColor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadAcCmColorProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadAcCmColor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadAcCmColor.GetServerProperties: TAcadAcCmColorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadAcCmColor.Set_EntityColor(eColor: Integer);
begin
  DefaultInterface.Set_EntityColor(eColor);
end;

function TAcadAcCmColor.Get_EntityColor: Integer;
begin
    Result := DefaultInterface.EntityColor;
end;

function TAcadAcCmColor.Get_ColorName: WideString;
begin
    Result := DefaultInterface.ColorName;
end;

function TAcadAcCmColor.Get_BookName: WideString;
begin
    Result := DefaultInterface.BookName;
end;

function TAcadAcCmColor.Get_Red: Integer;
begin
    Result := DefaultInterface.Red;
end;

function TAcadAcCmColor.Get_Blue: Integer;
begin
    Result := DefaultInterface.Blue;
end;

function TAcadAcCmColor.Get_Green: Integer;
begin
    Result := DefaultInterface.Green;
end;

procedure TAcadAcCmColor.Set_ColorMethod(Flags: AcColorMethod);
begin
  DefaultInterface.Set_ColorMethod(Flags);
end;

function TAcadAcCmColor.Get_ColorMethod: AcColorMethod;
begin
    Result := DefaultInterface.ColorMethod;
end;

function TAcadAcCmColor.Get_ColorIndex: AcColor;
begin
    Result := DefaultInterface.ColorIndex;
end;

procedure TAcadAcCmColor.Set_ColorIndex(color: AcColor);
begin
  DefaultInterface.Set_ColorIndex(color);
end;

procedure TAcadAcCmColor.SetNames(const ColorName: WideString; const BookName: WideString);
begin
  DefaultInterface.SetNames(ColorName, BookName);
end;

procedure TAcadAcCmColor.Delete;
begin
  DefaultInterface.Delete;
end;

procedure TAcadAcCmColor.SetRGB(Red: Integer; Green: Integer; Blue: Integer);
begin
  DefaultInterface.SetRGB(Red, Green, Blue);
end;

procedure TAcadAcCmColor.SetColorBookColor(const BookName: WideString; const ColorName: WideString);
begin
  DefaultInterface.SetColorBookColor(BookName, ColorName);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadAcCmColorProperties.Create(AServer: TAcadAcCmColor);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadAcCmColorProperties.GetDefaultInterface: IAcadAcCmColor;
begin
  Result := FServer.DefaultInterface;
end;

procedure TAcadAcCmColorProperties.Set_EntityColor(eColor: Integer);
begin
  DefaultInterface.Set_EntityColor(eColor);
end;

function TAcadAcCmColorProperties.Get_EntityColor: Integer;
begin
    Result := DefaultInterface.EntityColor;
end;

function TAcadAcCmColorProperties.Get_ColorName: WideString;
begin
    Result := DefaultInterface.ColorName;
end;

function TAcadAcCmColorProperties.Get_BookName: WideString;
begin
    Result := DefaultInterface.BookName;
end;

function TAcadAcCmColorProperties.Get_Red: Integer;
begin
    Result := DefaultInterface.Red;
end;

function TAcadAcCmColorProperties.Get_Blue: Integer;
begin
    Result := DefaultInterface.Blue;
end;

function TAcadAcCmColorProperties.Get_Green: Integer;
begin
    Result := DefaultInterface.Green;
end;

procedure TAcadAcCmColorProperties.Set_ColorMethod(Flags: AcColorMethod);
begin
  DefaultInterface.Set_ColorMethod(Flags);
end;

function TAcadAcCmColorProperties.Get_ColorMethod: AcColorMethod;
begin
    Result := DefaultInterface.ColorMethod;
end;

function TAcadAcCmColorProperties.Get_ColorIndex: AcColor;
begin
    Result := DefaultInterface.ColorIndex;
end;

procedure TAcadAcCmColorProperties.Set_ColorIndex(color: AcColor);
begin
  DefaultInterface.Set_ColorIndex(color);
end;

{$ENDIF}

class function CoAcadObject.Create: IAcadObject;
begin
  Result := CreateComObject(CLASS_AcadObject) as IAcadObject;
end;

class function CoAcadObject.CreateRemote(const MachineName: string): IAcadObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadObject) as IAcadObject;
end;

class function CoAcadXRecord.Create: IAcadXRecord;
begin
  Result := CreateComObject(CLASS_AcadXRecord) as IAcadXRecord;
end;

class function CoAcadXRecord.CreateRemote(const MachineName: string): IAcadXRecord;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadXRecord) as IAcadXRecord;
end;

class function CoAcadSortentsTable.Create: IAcadSortentsTable;
begin
  Result := CreateComObject(CLASS_AcadSortentsTable) as IAcadSortentsTable;
end;

class function CoAcadSortentsTable.CreateRemote(const MachineName: string): IAcadSortentsTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSortentsTable) as IAcadSortentsTable;
end;

procedure TAcadSortentsTable.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{048ED0E0-12CF-4C0F-9FFA-947C2FBE8C8E}';
    IntfIID:   '{73166AEE-97AE-4F35-AD73-DFCD36E37C04}';
    EventIID:  '{62998C8F-62F6-455F-806B-1604A1892F62}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadSortentsTable.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAcadSortentsTable;
  end;
end;

procedure TAcadSortentsTable.ConnectTo(svrIntf: IAcadSortentsTable);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAcadSortentsTable.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAcadSortentsTable.GetDefaultInterface: IAcadSortentsTable;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadSortentsTable.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadSortentsTableProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadSortentsTable.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadSortentsTable.GetServerProperties: TAcadSortentsTableProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadSortentsTable.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    768: if Assigned(FOnModified) then
         FOnModified(Self, IUnknown(TVarData(Params[0]).VPointer) as IAcadObject {const IAcadObject});
  end; {case DispID}
end;

function TAcadSortentsTable.Get_Handle: WideString;
begin
    Result := DefaultInterface.Handle;
end;

function TAcadSortentsTable.Get_ObjectName: WideString;
begin
    Result := DefaultInterface.ObjectName;
end;

function TAcadSortentsTable.Get_ObjectID: Integer;
begin
    Result := DefaultInterface.ObjectID;
end;

function TAcadSortentsTable.Get_Application: IDispatch;
begin
    Result := DefaultInterface.Application;
end;

function TAcadSortentsTable.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadSortentsTable.Get_HasExtensionDictionary: WordBool;
begin
    Result := DefaultInterface.HasExtensionDictionary;
end;

function TAcadSortentsTable.Get_OwnerID: Integer;
begin
    Result := DefaultInterface.OwnerID;
end;

function TAcadSortentsTable.Get_Document: IDispatch;
begin
    Result := DefaultInterface.Document;
end;

procedure TAcadSortentsTable.GetXData(const AppName: WideString; out XDataType: OleVariant; 
                                      out XDataValue: OleVariant);
begin
  DefaultInterface.GetXData(AppName, XDataType, XDataValue);
end;

procedure TAcadSortentsTable.SetXData(XDataType: OleVariant; XDataValue: OleVariant);
begin
  DefaultInterface.SetXData(XDataType, XDataValue);
end;

procedure TAcadSortentsTable.Delete;
begin
  DefaultInterface.Delete;
end;

function TAcadSortentsTable.GetExtensionDictionary: IAcadDictionary;
begin
  Result := DefaultInterface.GetExtensionDictionary;
end;

procedure TAcadSortentsTable.Erase;
begin
  DefaultInterface.Erase;
end;

procedure TAcadSortentsTable.MoveToBottom(Objects: OleVariant);
begin
  DefaultInterface.MoveToBottom(Objects);
end;

procedure TAcadSortentsTable.MoveToTop(Objects: OleVariant);
begin
  DefaultInterface.MoveToTop(Objects);
end;

procedure TAcadSortentsTable.MoveBelow(Objects: OleVariant; const Target: IAcadEntity);
begin
  DefaultInterface.MoveBelow(Objects, Target);
end;

procedure TAcadSortentsTable.MoveAbove(Objects: OleVariant; const Target: IAcadEntity);
begin
  DefaultInterface.MoveAbove(Objects, Target);
end;

procedure TAcadSortentsTable.SwapOrder(const Object1: IAcadEntity; const Object2: IAcadEntity);
begin
  DefaultInterface.SwapOrder(Object1, Object2);
end;

function TAcadSortentsTable.Block: IAcadBlock;
begin
  Result := DefaultInterface.Block;
end;

procedure TAcadSortentsTable.GetFullDrawOrder(out Objects: OleVariant; honorSortentsSysvar: WordBool);
begin
  DefaultInterface.GetFullDrawOrder(Objects, honorSortentsSysvar);
end;

procedure TAcadSortentsTable.GetRelativeDrawOrder(out Objects: OleVariant; 
                                                  honorSortentsSysvar: WordBool);
begin
  DefaultInterface.GetRelativeDrawOrder(Objects, honorSortentsSysvar);
end;

procedure TAcadSortentsTable.SetRelativeDrawOrder(Objects: OleVariant);
begin
  DefaultInterface.SetRelativeDrawOrder(Objects);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadSortentsTableProperties.Create(AServer: TAcadSortentsTable);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadSortentsTableProperties.GetDefaultInterface: IAcadSortentsTable;
begin
  Result := FServer.DefaultInterface;
end;

function TAcadSortentsTableProperties.Get_Handle: WideString;
begin
    Result := DefaultInterface.Handle;
end;

function TAcadSortentsTableProperties.Get_ObjectName: WideString;
begin
    Result := DefaultInterface.ObjectName;
end;

function TAcadSortentsTableProperties.Get_ObjectID: Integer;
begin
    Result := DefaultInterface.ObjectID;
end;

function TAcadSortentsTableProperties.Get_Application: IDispatch;
begin
    Result := DefaultInterface.Application;
end;

function TAcadSortentsTableProperties.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadSortentsTableProperties.Get_HasExtensionDictionary: WordBool;
begin
    Result := DefaultInterface.HasExtensionDictionary;
end;

function TAcadSortentsTableProperties.Get_OwnerID: Integer;
begin
    Result := DefaultInterface.OwnerID;
end;

function TAcadSortentsTableProperties.Get_Document: IDispatch;
begin
    Result := DefaultInterface.Document;
end;

{$ENDIF}

class function CoAcadDimStyle.Create: IAcadDimStyle;
begin
  Result := CreateComObject(CLASS_AcadDimStyle) as IAcadDimStyle;
end;

class function CoAcadDimStyle.CreateRemote(const MachineName: string): IAcadDimStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimStyle) as IAcadDimStyle;
end;

class function CoAcadLayer.Create: IAcadLayer;
begin
  Result := CreateComObject(CLASS_AcadLayer) as IAcadLayer;
end;

class function CoAcadLayer.CreateRemote(const MachineName: string): IAcadLayer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLayer) as IAcadLayer;
end;

class function CoAcadLineType.Create: IAcadLineType;
begin
  Result := CreateComObject(CLASS_AcadLineType) as IAcadLineType;
end;

class function CoAcadLineType.CreateRemote(const MachineName: string): IAcadLineType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLineType) as IAcadLineType;
end;

class function CoAcadMaterial.Create: IAcadMaterial;
begin
  Result := CreateComObject(CLASS_AcadMaterial) as IAcadMaterial;
end;

class function CoAcadMaterial.CreateRemote(const MachineName: string): IAcadMaterial;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMaterial) as IAcadMaterial;
end;

class function CoAcadRegisteredApplication.Create: IAcadRegisteredApplication;
begin
  Result := CreateComObject(CLASS_AcadRegisteredApplication) as IAcadRegisteredApplication;
end;

class function CoAcadRegisteredApplication.CreateRemote(const MachineName: string): IAcadRegisteredApplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRegisteredApplication) as IAcadRegisteredApplication;
end;

class function CoAcadTextStyle.Create: IAcadTextStyle;
begin
  Result := CreateComObject(CLASS_AcadTextStyle) as IAcadTextStyle;
end;

class function CoAcadTextStyle.CreateRemote(const MachineName: string): IAcadTextStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTextStyle) as IAcadTextStyle;
end;

class function CoAcadUCS.Create: IAcadUCS;
begin
  Result := CreateComObject(CLASS_AcadUCS) as IAcadUCS;
end;

class function CoAcadUCS.CreateRemote(const MachineName: string): IAcadUCS;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadUCS) as IAcadUCS;
end;

class function CoAcadView.Create: IAcadView;
begin
  Result := CreateComObject(CLASS_AcadView) as IAcadView;
end;

class function CoAcadView.CreateRemote(const MachineName: string): IAcadView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadView) as IAcadView;
end;

class function CoAcadViewport.Create: IAcadViewport;
begin
  Result := CreateComObject(CLASS_AcadViewport) as IAcadViewport;
end;

class function CoAcadViewport.CreateRemote(const MachineName: string): IAcadViewport;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadViewport) as IAcadViewport;
end;

class function CoAcadGroup.Create: IAcadGroup;
begin
  Result := CreateComObject(CLASS_AcadGroup) as IAcadGroup;
end;

class function CoAcadGroup.CreateRemote(const MachineName: string): IAcadGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadGroup) as IAcadGroup;
end;

class function CoAcadPlotConfiguration.Create: IAcadPlotConfiguration;
begin
  Result := CreateComObject(CLASS_AcadPlotConfiguration) as IAcadPlotConfiguration;
end;

class function CoAcadPlotConfiguration.CreateRemote(const MachineName: string): IAcadPlotConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPlotConfiguration) as IAcadPlotConfiguration;
end;

class function CoAcadLayout.Create: IAcadLayout;
begin
  Result := CreateComObject(CLASS_AcadLayout) as IAcadLayout;
end;

class function CoAcadLayout.CreateRemote(const MachineName: string): IAcadLayout;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLayout) as IAcadLayout;
end;

class function CoAcadIdPair.Create: IAcadIdPair;
begin
  Result := CreateComObject(CLASS_AcadIdPair) as IAcadIdPair;
end;

class function CoAcadIdPair.CreateRemote(const MachineName: string): IAcadIdPair;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadIdPair) as IAcadIdPair;
end;

class function CoAcadTableStyle.Create: IAcadTableStyle;
begin
  Result := CreateComObject(CLASS_AcadTableStyle) as IAcadTableStyle;
end;

class function CoAcadTableStyle.CreateRemote(const MachineName: string): IAcadTableStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTableStyle) as IAcadTableStyle;
end;

procedure TAcadTableStyle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{72EFC580-D085-4B81-8C55-26A79E445338}';
    IntfIID:   '{C1EF838D-1F50-4313-9A42-B290F14470AB}';
    EventIID:  '{62998C8F-62F6-455F-806B-1604A1892F62}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadTableStyle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAcadTableStyle;
  end;
end;

procedure TAcadTableStyle.ConnectTo(svrIntf: IAcadTableStyle);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAcadTableStyle.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAcadTableStyle.GetDefaultInterface: IAcadTableStyle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadTableStyle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadTableStyleProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadTableStyle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadTableStyle.GetServerProperties: TAcadTableStyleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadTableStyle.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    768: if Assigned(FOnModified) then
         FOnModified(Self, IUnknown(TVarData(Params[0]).VPointer) as IAcadObject {const IAcadObject});
  end; {case DispID}
end;

function TAcadTableStyle.Get_Handle: WideString;
begin
    Result := DefaultInterface.Handle;
end;

function TAcadTableStyle.Get_ObjectName: WideString;
begin
    Result := DefaultInterface.ObjectName;
end;

function TAcadTableStyle.Get_ObjectID: Integer;
begin
    Result := DefaultInterface.ObjectID;
end;

function TAcadTableStyle.Get_Application: IDispatch;
begin
    Result := DefaultInterface.Application;
end;

function TAcadTableStyle.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadTableStyle.Get_HasExtensionDictionary: WordBool;
begin
    Result := DefaultInterface.HasExtensionDictionary;
end;

function TAcadTableStyle.Get_OwnerID: Integer;
begin
    Result := DefaultInterface.OwnerID;
end;

function TAcadTableStyle.Get_Document: IDispatch;
begin
    Result := DefaultInterface.Document;
end;

function TAcadTableStyle.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAcadTableStyle.Set_Name(const bstrValue: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := bstrValue;
end;

function TAcadTableStyle.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TAcadTableStyle.Set_Description(const bstr: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := bstr;
end;

function TAcadTableStyle.Get_BitFlags: Integer;
begin
    Result := DefaultInterface.BitFlags;
end;

procedure TAcadTableStyle.Set_BitFlags(bitFlag: Integer);
begin
  DefaultInterface.Set_BitFlags(bitFlag);
end;

function TAcadTableStyle.Get_FlowDirection: AcTableDirection;
begin
    Result := DefaultInterface.FlowDirection;
end;

procedure TAcadTableStyle.Set_FlowDirection(pFlow: AcTableDirection);
begin
  DefaultInterface.Set_FlowDirection(pFlow);
end;

function TAcadTableStyle.Get_HorzCellMargin: Double;
begin
    Result := DefaultInterface.HorzCellMargin;
end;

procedure TAcadTableStyle.Set_HorzCellMargin(dHorzCellMargin: Double);
begin
  DefaultInterface.Set_HorzCellMargin(dHorzCellMargin);
end;

function TAcadTableStyle.Get_VertCellMargin: Double;
begin
    Result := DefaultInterface.VertCellMargin;
end;

procedure TAcadTableStyle.Set_VertCellMargin(dVertCellMargin: Double);
begin
  DefaultInterface.Set_VertCellMargin(dVertCellMargin);
end;

function TAcadTableStyle.Get_TitleSuppressed: WordBool;
begin
    Result := DefaultInterface.TitleSuppressed;
end;

procedure TAcadTableStyle.Set_TitleSuppressed(bValue: WordBool);
begin
  DefaultInterface.Set_TitleSuppressed(bValue);
end;

function TAcadTableStyle.Get_HeaderSuppressed: WordBool;
begin
    Result := DefaultInterface.HeaderSuppressed;
end;

procedure TAcadTableStyle.Set_HeaderSuppressed(bValue: WordBool);
begin
  DefaultInterface.Set_HeaderSuppressed(bValue);
end;

procedure TAcadTableStyle.GetXData(const AppName: WideString; out XDataType: OleVariant; 
                                   out XDataValue: OleVariant);
begin
  DefaultInterface.GetXData(AppName, XDataType, XDataValue);
end;

procedure TAcadTableStyle.SetXData(XDataType: OleVariant; XDataValue: OleVariant);
begin
  DefaultInterface.SetXData(XDataType, XDataValue);
end;

procedure TAcadTableStyle.Delete;
begin
  DefaultInterface.Delete;
end;

function TAcadTableStyle.GetExtensionDictionary: IAcadDictionary;
begin
  Result := DefaultInterface.GetExtensionDictionary;
end;

procedure TAcadTableStyle.Erase;
begin
  DefaultInterface.Erase;
end;

function TAcadTableStyle.GetTextStyle(rowType: AcRowType): WideString;
begin
  Result := DefaultInterface.GetTextStyle(rowType);
end;

procedure TAcadTableStyle.SetTextStyle(rowTypes: SYSINT; const bstrName: WideString);
begin
  DefaultInterface.SetTextStyle(rowTypes, bstrName);
end;

function TAcadTableStyle.GetTextHeight(rowType: AcRowType): Double;
begin
  Result := DefaultInterface.GetTextHeight(rowType);
end;

procedure TAcadTableStyle.SetTextHeight(rowTypes: SYSINT; TextHeight: Double);
begin
  DefaultInterface.SetTextHeight(rowTypes, TextHeight);
end;

function TAcadTableStyle.GetAlignment(rowType: AcRowType): AcCellAlignment;
begin
  Result := DefaultInterface.GetAlignment(rowType);
end;

procedure TAcadTableStyle.SetAlignment(rowTypes: SYSINT; cellAlignment: AcCellAlignment);
begin
  DefaultInterface.SetAlignment(rowTypes, cellAlignment);
end;

function TAcadTableStyle.GetColor(rowType: AcRowType): IAcadAcCmColor;
begin
  Result := DefaultInterface.GetColor(rowType);
end;

procedure TAcadTableStyle.SetColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor);
begin
  DefaultInterface.SetColor(rowTypes, pColor);
end;

function TAcadTableStyle.GetBackgroundColor(rowType: AcRowType): IAcadAcCmColor;
begin
  Result := DefaultInterface.GetBackgroundColor(rowType);
end;

procedure TAcadTableStyle.SetBackgroundColor(rowTypes: SYSINT; const pColor: IAcadAcCmColor);
begin
  DefaultInterface.SetBackgroundColor(rowTypes, pColor);
end;

function TAcadTableStyle.GetBackgroundColorNone(rowType: AcRowType): WordBool;
begin
  Result := DefaultInterface.GetBackgroundColorNone(rowType);
end;

procedure TAcadTableStyle.SetBackgroundColorNone(rowTypes: SYSINT; var bValue: WordBool);
begin
  DefaultInterface.SetBackgroundColorNone(rowTypes, bValue);
end;

function TAcadTableStyle.GetGridLineWeight(gridLineType: AcGridLineType; rowType: AcRowType): ACAD_LWEIGHT;
begin
  Result := DefaultInterface.GetGridLineWeight(gridLineType, rowType);
end;

procedure TAcadTableStyle.SetGridLineWeight(gridLineTypes: SYSINT; rowTypes: SYSINT; 
                                            Lineweight: ACAD_LWEIGHT);
begin
  DefaultInterface.SetGridLineWeight(gridLineTypes, rowTypes, Lineweight);
end;

function TAcadTableStyle.GetGridColor(gridLineType: AcGridLineType; rowType: AcRowType): IAcadAcCmColor;
begin
  Result := DefaultInterface.GetGridColor(gridLineType, rowType);
end;

procedure TAcadTableStyle.SetGridColor(gridLineTypes: SYSINT; rowTypes: SYSINT; 
                                       const pColor: IAcadAcCmColor);
begin
  DefaultInterface.SetGridColor(gridLineTypes, rowTypes, pColor);
end;

function TAcadTableStyle.GetGridVisibility(gridLineType: AcGridLineType; rowType: AcRowType): WordBool;
begin
  Result := DefaultInterface.GetGridVisibility(gridLineType, rowType);
end;

procedure TAcadTableStyle.SetGridVisibility(gridLineTypes: SYSINT; rowTypes: SYSINT; 
                                            bValue: WordBool);
begin
  DefaultInterface.SetGridVisibility(gridLineTypes, rowTypes, bValue);
end;

procedure TAcadTableStyle.GetDataType(rowType: AcRowType; out pDataType: AcValueDataType; 
                                      out pUnitType: AcValueUnitType);
begin
  DefaultInterface.GetDataType(rowType, pDataType, pUnitType);
end;

procedure TAcadTableStyle.SetDataType(rowTypes: SYSINT; nDataType: AcValueDataType; 
                                      nUnitType: AcValueUnitType);
begin
  DefaultInterface.SetDataType(rowTypes, nDataType, nUnitType);
end;

function TAcadTableStyle.GetFormat(rowType: AcRowType): WideString;
begin
  Result := DefaultInterface.GetFormat(rowType);
end;

procedure TAcadTableStyle.SetFormat(rowTypes: SYSINT; const val: WideString);
begin
  DefaultInterface.SetFormat(rowTypes, val);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadTableStyleProperties.Create(AServer: TAcadTableStyle);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadTableStyleProperties.GetDefaultInterface: IAcadTableStyle;
begin
  Result := FServer.DefaultInterface;
end;

function TAcadTableStyleProperties.Get_Handle: WideString;
begin
    Result := DefaultInterface.Handle;
end;

function TAcadTableStyleProperties.Get_ObjectName: WideString;
begin
    Result := DefaultInterface.ObjectName;
end;

function TAcadTableStyleProperties.Get_ObjectID: Integer;
begin
    Result := DefaultInterface.ObjectID;
end;

function TAcadTableStyleProperties.Get_Application: IDispatch;
begin
    Result := DefaultInterface.Application;
end;

function TAcadTableStyleProperties.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadTableStyleProperties.Get_HasExtensionDictionary: WordBool;
begin
    Result := DefaultInterface.HasExtensionDictionary;
end;

function TAcadTableStyleProperties.Get_OwnerID: Integer;
begin
    Result := DefaultInterface.OwnerID;
end;

function TAcadTableStyleProperties.Get_Document: IDispatch;
begin
    Result := DefaultInterface.Document;
end;

function TAcadTableStyleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAcadTableStyleProperties.Set_Name(const bstrValue: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := bstrValue;
end;

function TAcadTableStyleProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TAcadTableStyleProperties.Set_Description(const bstr: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := bstr;
end;

function TAcadTableStyleProperties.Get_BitFlags: Integer;
begin
    Result := DefaultInterface.BitFlags;
end;

procedure TAcadTableStyleProperties.Set_BitFlags(bitFlag: Integer);
begin
  DefaultInterface.Set_BitFlags(bitFlag);
end;

function TAcadTableStyleProperties.Get_FlowDirection: AcTableDirection;
begin
    Result := DefaultInterface.FlowDirection;
end;

procedure TAcadTableStyleProperties.Set_FlowDirection(pFlow: AcTableDirection);
begin
  DefaultInterface.Set_FlowDirection(pFlow);
end;

function TAcadTableStyleProperties.Get_HorzCellMargin: Double;
begin
    Result := DefaultInterface.HorzCellMargin;
end;

procedure TAcadTableStyleProperties.Set_HorzCellMargin(dHorzCellMargin: Double);
begin
  DefaultInterface.Set_HorzCellMargin(dHorzCellMargin);
end;

function TAcadTableStyleProperties.Get_VertCellMargin: Double;
begin
    Result := DefaultInterface.VertCellMargin;
end;

procedure TAcadTableStyleProperties.Set_VertCellMargin(dVertCellMargin: Double);
begin
  DefaultInterface.Set_VertCellMargin(dVertCellMargin);
end;

function TAcadTableStyleProperties.Get_TitleSuppressed: WordBool;
begin
    Result := DefaultInterface.TitleSuppressed;
end;

procedure TAcadTableStyleProperties.Set_TitleSuppressed(bValue: WordBool);
begin
  DefaultInterface.Set_TitleSuppressed(bValue);
end;

function TAcadTableStyleProperties.Get_HeaderSuppressed: WordBool;
begin
    Result := DefaultInterface.HeaderSuppressed;
end;

procedure TAcadTableStyleProperties.Set_HeaderSuppressed(bValue: WordBool);
begin
  DefaultInterface.Set_HeaderSuppressed(bValue);
end;

{$ENDIF}

class function CoAcadSectionSettings.Create: IAcadSectionSettings;
begin
  Result := CreateComObject(CLASS_AcadSectionSettings) as IAcadSectionSettings;
end;

class function CoAcadSectionSettings.CreateRemote(const MachineName: string): IAcadSectionSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSectionSettings) as IAcadSectionSettings;
end;

class function CoAcadSectionTypeSettings.Create: IAcadSectionTypeSettings;
begin
  Result := CreateComObject(CLASS_AcadSectionTypeSettings) as IAcadSectionTypeSettings;
end;

class function CoAcadSectionTypeSettings.CreateRemote(const MachineName: string): IAcadSectionTypeSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSectionTypeSettings) as IAcadSectionTypeSettings;
end;

class function CoAcadHyperlinks.Create: IAcadHyperlinks;
begin
  Result := CreateComObject(CLASS_AcadHyperlinks) as IAcadHyperlinks;
end;

class function CoAcadHyperlinks.CreateRemote(const MachineName: string): IAcadHyperlinks;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadHyperlinks) as IAcadHyperlinks;
end;

class function CoAcadDictionary.Create: IAcadDictionary;
begin
  Result := CreateComObject(CLASS_AcadDictionary) as IAcadDictionary;
end;

class function CoAcadDictionary.CreateRemote(const MachineName: string): IAcadDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDictionary) as IAcadDictionary;
end;

class function CoAcadLayers.Create: IAcadLayers;
begin
  Result := CreateComObject(CLASS_AcadLayers) as IAcadLayers;
end;

class function CoAcadLayers.CreateRemote(const MachineName: string): IAcadLayers;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLayers) as IAcadLayers;
end;

class function CoAcadDimStyles.Create: IAcadDimStyles;
begin
  Result := CreateComObject(CLASS_AcadDimStyles) as IAcadDimStyles;
end;

class function CoAcadDimStyles.CreateRemote(const MachineName: string): IAcadDimStyles;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimStyles) as IAcadDimStyles;
end;

class function CoAcadDictionaries.Create: IAcadDictionaries;
begin
  Result := CreateComObject(CLASS_AcadDictionaries) as IAcadDictionaries;
end;

class function CoAcadDictionaries.CreateRemote(const MachineName: string): IAcadDictionaries;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDictionaries) as IAcadDictionaries;
end;

class function CoAcadLineTypes.Create: IAcadLineTypes;
begin
  Result := CreateComObject(CLASS_AcadLineTypes) as IAcadLineTypes;
end;

class function CoAcadLineTypes.CreateRemote(const MachineName: string): IAcadLineTypes;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLineTypes) as IAcadLineTypes;
end;

class function CoAcadMaterials.Create: IAcadMaterials;
begin
  Result := CreateComObject(CLASS_AcadMaterials) as IAcadMaterials;
end;

class function CoAcadMaterials.CreateRemote(const MachineName: string): IAcadMaterials;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMaterials) as IAcadMaterials;
end;

class function CoAcadTextStyles.Create: IAcadTextStyles;
begin
  Result := CreateComObject(CLASS_AcadTextStyles) as IAcadTextStyles;
end;

class function CoAcadTextStyles.CreateRemote(const MachineName: string): IAcadTextStyles;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTextStyles) as IAcadTextStyles;
end;

class function CoAcadUCSs.Create: IAcadUCSs;
begin
  Result := CreateComObject(CLASS_AcadUCSs) as IAcadUCSs;
end;

class function CoAcadUCSs.CreateRemote(const MachineName: string): IAcadUCSs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadUCSs) as IAcadUCSs;
end;

class function CoAcadRegisteredApplications.Create: IAcadRegisteredApplications;
begin
  Result := CreateComObject(CLASS_AcadRegisteredApplications) as IAcadRegisteredApplications;
end;

class function CoAcadRegisteredApplications.CreateRemote(const MachineName: string): IAcadRegisteredApplications;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRegisteredApplications) as IAcadRegisteredApplications;
end;

class function CoAcadViews.Create: IAcadViews;
begin
  Result := CreateComObject(CLASS_AcadViews) as IAcadViews;
end;

class function CoAcadViews.CreateRemote(const MachineName: string): IAcadViews;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadViews) as IAcadViews;
end;

class function CoAcadViewports.Create: IAcadViewports;
begin
  Result := CreateComObject(CLASS_AcadViewports) as IAcadViewports;
end;

class function CoAcadViewports.CreateRemote(const MachineName: string): IAcadViewports;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadViewports) as IAcadViewports;
end;

class function CoAcadGroups.Create: IAcadGroups;
begin
  Result := CreateComObject(CLASS_AcadGroups) as IAcadGroups;
end;

class function CoAcadGroups.CreateRemote(const MachineName: string): IAcadGroups;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadGroups) as IAcadGroups;
end;

class function CoAcadBlocks.Create: IAcadBlocks;
begin
  Result := CreateComObject(CLASS_AcadBlocks) as IAcadBlocks;
end;

class function CoAcadBlocks.CreateRemote(const MachineName: string): IAcadBlocks;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadBlocks) as IAcadBlocks;
end;

class function CoAcadLayouts.Create: IAcadLayouts;
begin
  Result := CreateComObject(CLASS_AcadLayouts) as IAcadLayouts;
end;

class function CoAcadLayouts.CreateRemote(const MachineName: string): IAcadLayouts;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLayouts) as IAcadLayouts;
end;

class function CoAcadPlotConfigurations.Create: IAcadPlotConfigurations;
begin
  Result := CreateComObject(CLASS_AcadPlotConfigurations) as IAcadPlotConfigurations;
end;

class function CoAcadPlotConfigurations.CreateRemote(const MachineName: string): IAcadPlotConfigurations;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPlotConfigurations) as IAcadPlotConfigurations;
end;

class function CoAcadEntity.Create: IAcadEntity;
begin
  Result := CreateComObject(CLASS_AcadEntity) as IAcadEntity;
end;

class function CoAcadEntity.CreateRemote(const MachineName: string): IAcadEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadEntity) as IAcadEntity;
end;

class function CoAcadRasterImage.Create: IAcadRasterImage;
begin
  Result := CreateComObject(CLASS_AcadRasterImage) as IAcadRasterImage;
end;

class function CoAcadRasterImage.CreateRemote(const MachineName: string): IAcadRasterImage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRasterImage) as IAcadRasterImage;
end;

class function CoAcad3DFace.Create: IAcad3DFace;
begin
  Result := CreateComObject(CLASS_Acad3DFace) as IAcad3DFace;
end;

class function CoAcad3DFace.CreateRemote(const MachineName: string): IAcad3DFace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Acad3DFace) as IAcad3DFace;
end;

class function CoAcad3DPolyline.Create: IAcad3DPolyline;
begin
  Result := CreateComObject(CLASS_Acad3DPolyline) as IAcad3DPolyline;
end;

class function CoAcad3DPolyline.CreateRemote(const MachineName: string): IAcad3DPolyline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Acad3DPolyline) as IAcad3DPolyline;
end;

class function CoAcadRegion.Create: IAcadRegion;
begin
  Result := CreateComObject(CLASS_AcadRegion) as IAcadRegion;
end;

class function CoAcadRegion.CreateRemote(const MachineName: string): IAcadRegion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRegion) as IAcadRegion;
end;

class function CoAcad3DSolid.Create: IAcad3DSolid;
begin
  Result := CreateComObject(CLASS_Acad3DSolid) as IAcad3DSolid;
end;

class function CoAcad3DSolid.CreateRemote(const MachineName: string): IAcad3DSolid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Acad3DSolid) as IAcad3DSolid;
end;

class function CoAcadArc.Create: IAcadArc;
begin
  Result := CreateComObject(CLASS_AcadArc) as IAcadArc;
end;

class function CoAcadArc.CreateRemote(const MachineName: string): IAcadArc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadArc) as IAcadArc;
end;

class function CoAcadAttribute.Create: IAcadAttribute;
begin
  Result := CreateComObject(CLASS_AcadAttribute) as IAcadAttribute;
end;

class function CoAcadAttribute.CreateRemote(const MachineName: string): IAcadAttribute;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadAttribute) as IAcadAttribute;
end;

class function CoAcadAttributeReference.Create: IAcadAttributeReference;
begin
  Result := CreateComObject(CLASS_AcadAttributeReference) as IAcadAttributeReference;
end;

class function CoAcadAttributeReference.CreateRemote(const MachineName: string): IAcadAttributeReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadAttributeReference) as IAcadAttributeReference;
end;

class function CoAcadBlockReference.Create: IAcadBlockReference;
begin
  Result := CreateComObject(CLASS_AcadBlockReference) as IAcadBlockReference;
end;

class function CoAcadBlockReference.CreateRemote(const MachineName: string): IAcadBlockReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadBlockReference) as IAcadBlockReference;
end;

class function CoAcadCircle.Create: IAcadCircle;
begin
  Result := CreateComObject(CLASS_AcadCircle) as IAcadCircle;
end;

class function CoAcadCircle.CreateRemote(const MachineName: string): IAcadCircle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadCircle) as IAcadCircle;
end;

class function CoAcadEllipse.Create: IAcadEllipse;
begin
  Result := CreateComObject(CLASS_AcadEllipse) as IAcadEllipse;
end;

class function CoAcadEllipse.CreateRemote(const MachineName: string): IAcadEllipse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadEllipse) as IAcadEllipse;
end;

class function CoAcadHatch.Create: IAcadHatch;
begin
  Result := CreateComObject(CLASS_AcadHatch) as IAcadHatch;
end;

class function CoAcadHatch.CreateRemote(const MachineName: string): IAcadHatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadHatch) as IAcadHatch;
end;

class function CoAcadLeader.Create: IAcadLeader;
begin
  Result := CreateComObject(CLASS_AcadLeader) as IAcadLeader;
end;

class function CoAcadLeader.CreateRemote(const MachineName: string): IAcadLeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLeader) as IAcadLeader;
end;

class function CoAcadLWPolyline.Create: IAcadLWPolyline;
begin
  Result := CreateComObject(CLASS_AcadLWPolyline) as IAcadLWPolyline;
end;

class function CoAcadLWPolyline.CreateRemote(const MachineName: string): IAcadLWPolyline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLWPolyline) as IAcadLWPolyline;
end;

class function CoAcadLine.Create: IAcadLine;
begin
  Result := CreateComObject(CLASS_AcadLine) as IAcadLine;
end;

class function CoAcadLine.CreateRemote(const MachineName: string): IAcadLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLine) as IAcadLine;
end;

class function CoAcadMText.Create: IAcadMText;
begin
  Result := CreateComObject(CLASS_AcadMText) as IAcadMText;
end;

class function CoAcadMText.CreateRemote(const MachineName: string): IAcadMText;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMText) as IAcadMText;
end;

class function CoAcadPoint.Create: IAcadPoint;
begin
  Result := CreateComObject(CLASS_AcadPoint) as IAcadPoint;
end;

class function CoAcadPoint.CreateRemote(const MachineName: string): IAcadPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPoint) as IAcadPoint;
end;

class function CoAcadPolyline.Create: IAcadPolyline;
begin
  Result := CreateComObject(CLASS_AcadPolyline) as IAcadPolyline;
end;

class function CoAcadPolyline.CreateRemote(const MachineName: string): IAcadPolyline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPolyline) as IAcadPolyline;
end;

class function CoAcadPolygonMesh.Create: IAcadPolygonMesh;
begin
  Result := CreateComObject(CLASS_AcadPolygonMesh) as IAcadPolygonMesh;
end;

class function CoAcadPolygonMesh.CreateRemote(const MachineName: string): IAcadPolygonMesh;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPolygonMesh) as IAcadPolygonMesh;
end;

class function CoAcadRay.Create: IAcadRay;
begin
  Result := CreateComObject(CLASS_AcadRay) as IAcadRay;
end;

class function CoAcadRay.CreateRemote(const MachineName: string): IAcadRay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRay) as IAcadRay;
end;

class function CoAcadShape.Create: IAcadShape;
begin
  Result := CreateComObject(CLASS_AcadShape) as IAcadShape;
end;

class function CoAcadShape.CreateRemote(const MachineName: string): IAcadShape;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadShape) as IAcadShape;
end;

class function CoAcadSolid.Create: IAcadSolid;
begin
  Result := CreateComObject(CLASS_AcadSolid) as IAcadSolid;
end;

class function CoAcadSolid.CreateRemote(const MachineName: string): IAcadSolid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSolid) as IAcadSolid;
end;

class function CoAcadSpline.Create: IAcadSpline;
begin
  Result := CreateComObject(CLASS_AcadSpline) as IAcadSpline;
end;

class function CoAcadSpline.CreateRemote(const MachineName: string): IAcadSpline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSpline) as IAcadSpline;
end;

class function CoAcadText.Create: IAcadText;
begin
  Result := CreateComObject(CLASS_AcadText) as IAcadText;
end;

class function CoAcadText.CreateRemote(const MachineName: string): IAcadText;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadText) as IAcadText;
end;

class function CoAcadTolerance.Create: IAcadTolerance;
begin
  Result := CreateComObject(CLASS_AcadTolerance) as IAcadTolerance;
end;

class function CoAcadTolerance.CreateRemote(const MachineName: string): IAcadTolerance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTolerance) as IAcadTolerance;
end;

class function CoAcadTrace.Create: IAcadTrace;
begin
  Result := CreateComObject(CLASS_AcadTrace) as IAcadTrace;
end;

class function CoAcadTrace.CreateRemote(const MachineName: string): IAcadTrace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTrace) as IAcadTrace;
end;

class function CoAcadXline.Create: IAcadXline;
begin
  Result := CreateComObject(CLASS_AcadXline) as IAcadXline;
end;

class function CoAcadXline.CreateRemote(const MachineName: string): IAcadXline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadXline) as IAcadXline;
end;

class function CoAcadPViewport.Create: IAcadPViewport;
begin
  Result := CreateComObject(CLASS_AcadPViewport) as IAcadPViewport;
end;

class function CoAcadPViewport.CreateRemote(const MachineName: string): IAcadPViewport;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPViewport) as IAcadPViewport;
end;

class function CoAcadMInsertBlock.Create: IAcadMInsertBlock;
begin
  Result := CreateComObject(CLASS_AcadMInsertBlock) as IAcadMInsertBlock;
end;

class function CoAcadMInsertBlock.CreateRemote(const MachineName: string): IAcadMInsertBlock;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMInsertBlock) as IAcadMInsertBlock;
end;

class function CoAcadPolyfaceMesh.Create: IAcadPolyfaceMesh;
begin
  Result := CreateComObject(CLASS_AcadPolyfaceMesh) as IAcadPolyfaceMesh;
end;

class function CoAcadPolyfaceMesh.CreateRemote(const MachineName: string): IAcadPolyfaceMesh;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPolyfaceMesh) as IAcadPolyfaceMesh;
end;

class function CoAcadMLine.Create: IAcadMLine;
begin
  Result := CreateComObject(CLASS_AcadMLine) as IAcadMLine;
end;

class function CoAcadMLine.CreateRemote(const MachineName: string): IAcadMLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMLine) as IAcadMLine;
end;

class function CoAcadExternalReference.Create: IAcadExternalReference;
begin
  Result := CreateComObject(CLASS_AcadExternalReference) as IAcadExternalReference;
end;

class function CoAcadExternalReference.CreateRemote(const MachineName: string): IAcadExternalReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadExternalReference) as IAcadExternalReference;
end;

class function CoAcadTable.Create: IAcadTable;
begin
  Result := CreateComObject(CLASS_AcadTable) as IAcadTable;
end;

class function CoAcadTable.CreateRemote(const MachineName: string): IAcadTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadTable) as IAcadTable;
end;

class function CoAcadOle.Create: IAcadOle;
begin
  Result := CreateComObject(CLASS_AcadOle) as IAcadOle;
end;

class function CoAcadOle.CreateRemote(const MachineName: string): IAcadOle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadOle) as IAcadOle;
end;

class function CoAcadHelix.Create: IAcadHelix;
begin
  Result := CreateComObject(CLASS_AcadHelix) as IAcadHelix;
end;

class function CoAcadHelix.CreateRemote(const MachineName: string): IAcadHelix;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadHelix) as IAcadHelix;
end;

class function CoAcadSurface.Create: IAcadSurface;
begin
  Result := CreateComObject(CLASS_AcadSurface) as IAcadSurface;
end;

class function CoAcadSurface.CreateRemote(const MachineName: string): IAcadSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSurface) as IAcadSurface;
end;

class function CoAcadPlaneSurface.Create: IAcadPlaneSurface;
begin
  Result := CreateComObject(CLASS_AcadPlaneSurface) as IAcadPlaneSurface;
end;

class function CoAcadPlaneSurface.CreateRemote(const MachineName: string): IAcadPlaneSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPlaneSurface) as IAcadPlaneSurface;
end;

class function CoAcadExtrudedSurface.Create: IAcadExtrudedSurface;
begin
  Result := CreateComObject(CLASS_AcadExtrudedSurface) as IAcadExtrudedSurface;
end;

class function CoAcadExtrudedSurface.CreateRemote(const MachineName: string): IAcadExtrudedSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadExtrudedSurface) as IAcadExtrudedSurface;
end;

class function CoAcadRevolvedSurface.Create: IAcadRevolvedSurface;
begin
  Result := CreateComObject(CLASS_AcadRevolvedSurface) as IAcadRevolvedSurface;
end;

class function CoAcadRevolvedSurface.CreateRemote(const MachineName: string): IAcadRevolvedSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadRevolvedSurface) as IAcadRevolvedSurface;
end;

class function CoAcadSweptSurface.Create: IAcadSweptSurface;
begin
  Result := CreateComObject(CLASS_AcadSweptSurface) as IAcadSweptSurface;
end;

class function CoAcadSweptSurface.CreateRemote(const MachineName: string): IAcadSweptSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSweptSurface) as IAcadSweptSurface;
end;

class function CoAcadLoftedSurface.Create: IAcadLoftedSurface;
begin
  Result := CreateComObject(CLASS_AcadLoftedSurface) as IAcadLoftedSurface;
end;

class function CoAcadLoftedSurface.CreateRemote(const MachineName: string): IAcadLoftedSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLoftedSurface) as IAcadLoftedSurface;
end;

class function CoAcadSection.Create: IAcadSection;
begin
  Result := CreateComObject(CLASS_AcadSection) as IAcadSection;
end;

class function CoAcadSection.CreateRemote(const MachineName: string): IAcadSection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSection) as IAcadSection;
end;

class function CoAcadSectionManager.Create: IAcadSectionManager;
begin
  Result := CreateComObject(CLASS_AcadSectionManager) as IAcadSectionManager;
end;

class function CoAcadSectionManager.CreateRemote(const MachineName: string): IAcadSectionManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSectionManager) as IAcadSectionManager;
end;

class function CoAcadDwfUnderlay.Create: IAcadUnderlay;
begin
  Result := CreateComObject(CLASS_AcadDwfUnderlay) as IAcadUnderlay;
end;

class function CoAcadDwfUnderlay.CreateRemote(const MachineName: string): IAcadUnderlay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDwfUnderlay) as IAcadUnderlay;
end;

class function CoAcadDgnUnderlay.Create: IAcadUnderlay;
begin
  Result := CreateComObject(CLASS_AcadDgnUnderlay) as IAcadUnderlay;
end;

class function CoAcadDgnUnderlay.CreateRemote(const MachineName: string): IAcadUnderlay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDgnUnderlay) as IAcadUnderlay;
end;

class function CoAcadSubEntity.Create: IAcadSubEntity;
begin
  Result := CreateComObject(CLASS_AcadSubEntity) as IAcadSubEntity;
end;

class function CoAcadSubEntity.CreateRemote(const MachineName: string): IAcadSubEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSubEntity) as IAcadSubEntity;
end;

class function CoAcadSubEntSolidFace.Create: IAcadSubEntSolidFace;
begin
  Result := CreateComObject(CLASS_AcadSubEntSolidFace) as IAcadSubEntSolidFace;
end;

class function CoAcadSubEntSolidFace.CreateRemote(const MachineName: string): IAcadSubEntSolidFace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSubEntSolidFace) as IAcadSubEntSolidFace;
end;

class function CoAcadSubEntSolidEdge.Create: IAcadSubEntSolidEdge;
begin
  Result := CreateComObject(CLASS_AcadSubEntSolidEdge) as IAcadSubEntSolidEdge;
end;

class function CoAcadSubEntSolidEdge.CreateRemote(const MachineName: string): IAcadSubEntSolidEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSubEntSolidEdge) as IAcadSubEntSolidEdge;
end;

class function CoAcadSubEntSolidVertex.Create: IAcadSubEntSolidVertex;
begin
  Result := CreateComObject(CLASS_AcadSubEntSolidVertex) as IAcadSubEntSolidVertex;
end;

class function CoAcadSubEntSolidVertex.CreateRemote(const MachineName: string): IAcadSubEntSolidVertex;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSubEntSolidVertex) as IAcadSubEntSolidVertex;
end;

class function CoAcadSubEntSolidNode.Create: IAcadSubEntSolidNode;
begin
  Result := CreateComObject(CLASS_AcadSubEntSolidNode) as IAcadSubEntSolidNode;
end;

class function CoAcadSubEntSolidNode.CreateRemote(const MachineName: string): IAcadSubEntSolidNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSubEntSolidNode) as IAcadSubEntSolidNode;
end;

class function CoAcadDimension.Create: IAcadDimension;
begin
  Result := CreateComObject(CLASS_AcadDimension) as IAcadDimension;
end;

class function CoAcadDimension.CreateRemote(const MachineName: string): IAcadDimension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimension) as IAcadDimension;
end;

class function CoAcadDimAligned.Create: IAcadDimAligned;
begin
  Result := CreateComObject(CLASS_AcadDimAligned) as IAcadDimAligned;
end;

class function CoAcadDimAligned.CreateRemote(const MachineName: string): IAcadDimAligned;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimAligned) as IAcadDimAligned;
end;

class function CoAcadDimAngular.Create: IAcadDimAngular;
begin
  Result := CreateComObject(CLASS_AcadDimAngular) as IAcadDimAngular;
end;

class function CoAcadDimAngular.CreateRemote(const MachineName: string): IAcadDimAngular;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimAngular) as IAcadDimAngular;
end;

class function CoAcadDimDiametric.Create: IAcadDimDiametric;
begin
  Result := CreateComObject(CLASS_AcadDimDiametric) as IAcadDimDiametric;
end;

class function CoAcadDimDiametric.CreateRemote(const MachineName: string): IAcadDimDiametric;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimDiametric) as IAcadDimDiametric;
end;

class function CoAcadDimOrdinate.Create: IAcadDimOrdinate;
begin
  Result := CreateComObject(CLASS_AcadDimOrdinate) as IAcadDimOrdinate;
end;

class function CoAcadDimOrdinate.CreateRemote(const MachineName: string): IAcadDimOrdinate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimOrdinate) as IAcadDimOrdinate;
end;

class function CoAcadDimRadial.Create: IAcadDimRadial;
begin
  Result := CreateComObject(CLASS_AcadDimRadial) as IAcadDimRadial;
end;

class function CoAcadDimRadial.CreateRemote(const MachineName: string): IAcadDimRadial;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimRadial) as IAcadDimRadial;
end;

class function CoAcadDimRotated.Create: IAcadDimRotated;
begin
  Result := CreateComObject(CLASS_AcadDimRotated) as IAcadDimRotated;
end;

class function CoAcadDimRotated.CreateRemote(const MachineName: string): IAcadDimRotated;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimRotated) as IAcadDimRotated;
end;

class function CoAcadDim3PointAngular.Create: IAcadDim3PointAngular;
begin
  Result := CreateComObject(CLASS_AcadDim3PointAngular) as IAcadDim3PointAngular;
end;

class function CoAcadDim3PointAngular.CreateRemote(const MachineName: string): IAcadDim3PointAngular;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDim3PointAngular) as IAcadDim3PointAngular;
end;

class function CoAcadDimArcLength.Create: IAcadDimArcLength;
begin
  Result := CreateComObject(CLASS_AcadDimArcLength) as IAcadDimArcLength;
end;

class function CoAcadDimArcLength.CreateRemote(const MachineName: string): IAcadDimArcLength;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimArcLength) as IAcadDimArcLength;
end;

class function CoAcadDimRadialLarge.Create: IAcadDimRadialLarge;
begin
  Result := CreateComObject(CLASS_AcadDimRadialLarge) as IAcadDimRadialLarge;
end;

class function CoAcadDimRadialLarge.CreateRemote(const MachineName: string): IAcadDimRadialLarge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDimRadialLarge) as IAcadDimRadialLarge;
end;

class function CoAcadBlock.Create: IAcadBlock;
begin
  Result := CreateComObject(CLASS_AcadBlock) as IAcadBlock;
end;

class function CoAcadBlock.CreateRemote(const MachineName: string): IAcadBlock;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadBlock) as IAcadBlock;
end;

class function CoAcadModelSpace.Create: IAcadModelSpace;
begin
  Result := CreateComObject(CLASS_AcadModelSpace) as IAcadModelSpace;
end;

class function CoAcadModelSpace.CreateRemote(const MachineName: string): IAcadModelSpace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadModelSpace) as IAcadModelSpace;
end;

class function CoAcadPaperSpace.Create: IAcadPaperSpace;
begin
  Result := CreateComObject(CLASS_AcadPaperSpace) as IAcadPaperSpace;
end;

class function CoAcadPaperSpace.CreateRemote(const MachineName: string): IAcadPaperSpace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPaperSpace) as IAcadPaperSpace;
end;

class function CoAcadFileDependency.Create: IAcadFileDependency;
begin
  Result := CreateComObject(CLASS_AcadFileDependency) as IAcadFileDependency;
end;

class function CoAcadFileDependency.CreateRemote(const MachineName: string): IAcadFileDependency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadFileDependency) as IAcadFileDependency;
end;

class function CoAcadFileDependencies.Create: IAcadFileDependencies;
begin
  Result := CreateComObject(CLASS_AcadFileDependencies) as IAcadFileDependencies;
end;

class function CoAcadFileDependencies.CreateRemote(const MachineName: string): IAcadFileDependencies;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadFileDependencies) as IAcadFileDependencies;
end;

class function CoAcadSummaryInfo.Create: IAcadSummaryInfo;
begin
  Result := CreateComObject(CLASS_AcadSummaryInfo) as IAcadSummaryInfo;
end;

class function CoAcadSummaryInfo.CreateRemote(const MachineName: string): IAcadSummaryInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSummaryInfo) as IAcadSummaryInfo;
end;

class function CoAcadDatabasePreferences.Create: IAcadDatabasePreferences;
begin
  Result := CreateComObject(CLASS_AcadDatabasePreferences) as IAcadDatabasePreferences;
end;

class function CoAcadDatabasePreferences.CreateRemote(const MachineName: string): IAcadDatabasePreferences;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDatabasePreferences) as IAcadDatabasePreferences;
end;

class function CoAcadDatabase.Create: IAcadDatabase;
begin
  Result := CreateComObject(CLASS_AcadDatabase) as IAcadDatabase;
end;

class function CoAcadDatabase.CreateRemote(const MachineName: string): IAcadDatabase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDatabase) as IAcadDatabase;
end;

procedure TAcadDatabase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B53CEF4B-1A13-49DE-BBC5-A7100FB2F38C}';
    IntfIID:   '{A9625062-DC43-4D1C-9FC6-8512123BB91B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadDatabase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAcadDatabase;
  end;
end;

procedure TAcadDatabase.ConnectTo(svrIntf: IAcadDatabase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAcadDatabase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAcadDatabase.GetDefaultInterface: IAcadDatabase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadDatabase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadDatabaseProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadDatabase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadDatabase.GetServerProperties: TAcadDatabaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAcadDatabase.Get_ModelSpace: IAcadModelSpace;
begin
    Result := DefaultInterface.ModelSpace;
end;

function TAcadDatabase.Get_PaperSpace: IAcadPaperSpace;
begin
    Result := DefaultInterface.PaperSpace;
end;

function TAcadDatabase.Get_Blocks: IAcadBlocks;
begin
    Result := DefaultInterface.Blocks;
end;

function TAcadDatabase.Get_Groups: IAcadGroups;
begin
    Result := DefaultInterface.Groups;
end;

function TAcadDatabase.Get_DimStyles: IAcadDimStyles;
begin
    Result := DefaultInterface.DimStyles;
end;

function TAcadDatabase.Get_Layers: IAcadLayers;
begin
    Result := DefaultInterface.Layers;
end;

function TAcadDatabase.Get_Linetypes: IAcadLineTypes;
begin
    Result := DefaultInterface.Linetypes;
end;

function TAcadDatabase.Get_Dictionaries: IAcadDictionaries;
begin
    Result := DefaultInterface.Dictionaries;
end;

function TAcadDatabase.Get_RegisteredApplications: IAcadRegisteredApplications;
begin
    Result := DefaultInterface.RegisteredApplications;
end;

function TAcadDatabase.Get_TextStyles: IAcadTextStyles;
begin
    Result := DefaultInterface.TextStyles;
end;

function TAcadDatabase.Get_UserCoordinateSystems: IAcadUCSs;
begin
    Result := DefaultInterface.UserCoordinateSystems;
end;

function TAcadDatabase.Get_Views: IAcadViews;
begin
    Result := DefaultInterface.Views;
end;

function TAcadDatabase.Get_Viewports: IAcadViewports;
begin
    Result := DefaultInterface.Viewports;
end;

function TAcadDatabase.Get_ElevationModelSpace: Double;
begin
    Result := DefaultInterface.ElevationModelSpace;
end;

procedure TAcadDatabase.Set_ElevationModelSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationModelSpace(Elevation);
end;

function TAcadDatabase.Get_ElevationPaperSpace: Double;
begin
    Result := DefaultInterface.ElevationPaperSpace;
end;

procedure TAcadDatabase.Set_ElevationPaperSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationPaperSpace(Elevation);
end;

function TAcadDatabase.Get_Limits: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Limits;
end;

procedure TAcadDatabase.Set_Limits(Limits: OleVariant);
begin
  DefaultInterface.Set_Limits(Limits);
end;

function TAcadDatabase.Get_Layouts: IAcadLayouts;
begin
    Result := DefaultInterface.Layouts;
end;

function TAcadDatabase.Get_PlotConfigurations: IAcadPlotConfigurations;
begin
    Result := DefaultInterface.PlotConfigurations;
end;

function TAcadDatabase.Get_Preferences: IAcadDatabasePreferences;
begin
    Result := DefaultInterface.Preferences;
end;

function TAcadDatabase.Get_FileDependencies: IAcadFileDependencies;
begin
    Result := DefaultInterface.FileDependencies;
end;

function TAcadDatabase.Get_SummaryInfo: IAcadSummaryInfo;
begin
    Result := DefaultInterface.SummaryInfo;
end;

function TAcadDatabase.Get_SectionManager: IAcadSectionManager;
begin
    Result := DefaultInterface.SectionManager;
end;

function TAcadDatabase.Get_Materials: IAcadMaterials;
begin
    Result := DefaultInterface.Materials;
end;

function TAcadDatabase.CopyObjects(Objects: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, EmptyParam, EmptyParam);
end;

function TAcadDatabase.CopyObjects(Objects: OleVariant; Owner: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, Owner, EmptyParam);
end;

function TAcadDatabase.CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, Owner, IdPairs);
end;

function TAcadDatabase.HandleToObject(const Handle: WideString): IDispatch;
begin
  Result := DefaultInterface.HandleToObject(Handle);
end;

function TAcadDatabase.ObjectIdToObject(ObjectID: Integer): IDispatch;
begin
  Result := DefaultInterface.ObjectIdToObject(ObjectID);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadDatabaseProperties.Create(AServer: TAcadDatabase);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadDatabaseProperties.GetDefaultInterface: IAcadDatabase;
begin
  Result := FServer.DefaultInterface;
end;

function TAcadDatabaseProperties.Get_ModelSpace: IAcadModelSpace;
begin
    Result := DefaultInterface.ModelSpace;
end;

function TAcadDatabaseProperties.Get_PaperSpace: IAcadPaperSpace;
begin
    Result := DefaultInterface.PaperSpace;
end;

function TAcadDatabaseProperties.Get_Blocks: IAcadBlocks;
begin
    Result := DefaultInterface.Blocks;
end;

function TAcadDatabaseProperties.Get_Groups: IAcadGroups;
begin
    Result := DefaultInterface.Groups;
end;

function TAcadDatabaseProperties.Get_DimStyles: IAcadDimStyles;
begin
    Result := DefaultInterface.DimStyles;
end;

function TAcadDatabaseProperties.Get_Layers: IAcadLayers;
begin
    Result := DefaultInterface.Layers;
end;

function TAcadDatabaseProperties.Get_Linetypes: IAcadLineTypes;
begin
    Result := DefaultInterface.Linetypes;
end;

function TAcadDatabaseProperties.Get_Dictionaries: IAcadDictionaries;
begin
    Result := DefaultInterface.Dictionaries;
end;

function TAcadDatabaseProperties.Get_RegisteredApplications: IAcadRegisteredApplications;
begin
    Result := DefaultInterface.RegisteredApplications;
end;

function TAcadDatabaseProperties.Get_TextStyles: IAcadTextStyles;
begin
    Result := DefaultInterface.TextStyles;
end;

function TAcadDatabaseProperties.Get_UserCoordinateSystems: IAcadUCSs;
begin
    Result := DefaultInterface.UserCoordinateSystems;
end;

function TAcadDatabaseProperties.Get_Views: IAcadViews;
begin
    Result := DefaultInterface.Views;
end;

function TAcadDatabaseProperties.Get_Viewports: IAcadViewports;
begin
    Result := DefaultInterface.Viewports;
end;

function TAcadDatabaseProperties.Get_ElevationModelSpace: Double;
begin
    Result := DefaultInterface.ElevationModelSpace;
end;

procedure TAcadDatabaseProperties.Set_ElevationModelSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationModelSpace(Elevation);
end;

function TAcadDatabaseProperties.Get_ElevationPaperSpace: Double;
begin
    Result := DefaultInterface.ElevationPaperSpace;
end;

procedure TAcadDatabaseProperties.Set_ElevationPaperSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationPaperSpace(Elevation);
end;

function TAcadDatabaseProperties.Get_Limits: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Limits;
end;

procedure TAcadDatabaseProperties.Set_Limits(Limits: OleVariant);
begin
  DefaultInterface.Set_Limits(Limits);
end;

function TAcadDatabaseProperties.Get_Layouts: IAcadLayouts;
begin
    Result := DefaultInterface.Layouts;
end;

function TAcadDatabaseProperties.Get_PlotConfigurations: IAcadPlotConfigurations;
begin
    Result := DefaultInterface.PlotConfigurations;
end;

function TAcadDatabaseProperties.Get_Preferences: IAcadDatabasePreferences;
begin
    Result := DefaultInterface.Preferences;
end;

function TAcadDatabaseProperties.Get_FileDependencies: IAcadFileDependencies;
begin
    Result := DefaultInterface.FileDependencies;
end;

function TAcadDatabaseProperties.Get_SummaryInfo: IAcadSummaryInfo;
begin
    Result := DefaultInterface.SummaryInfo;
end;

function TAcadDatabaseProperties.Get_SectionManager: IAcadSectionManager;
begin
    Result := DefaultInterface.SectionManager;
end;

function TAcadDatabaseProperties.Get_Materials: IAcadMaterials;
begin
    Result := DefaultInterface.Materials;
end;

{$ENDIF}

class function CoAcadSecurityParams.Create: IAcadSecurityParams;
begin
  Result := CreateComObject(CLASS_AcadSecurityParams) as IAcadSecurityParams;
end;

class function CoAcadSecurityParams.CreateRemote(const MachineName: string): IAcadSecurityParams;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSecurityParams) as IAcadSecurityParams;
end;

procedure TAcadSecurityParams.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DF6525C2-6358-4B07-813D-708120C5FE1A}';
    IntfIID:   '{805F5969-BFFD-4683-9821-CD5590FF2F4E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadSecurityParams.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAcadSecurityParams;
  end;
end;

procedure TAcadSecurityParams.ConnectTo(svrIntf: IAcadSecurityParams);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAcadSecurityParams.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAcadSecurityParams.GetDefaultInterface: IAcadSecurityParams;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadSecurityParams.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadSecurityParamsProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadSecurityParams.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadSecurityParams.GetServerProperties: TAcadSecurityParamsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadSecurityParams.Set_Action(pOperations: Integer);
begin
  DefaultInterface.Set_Action(pOperations);
end;

function TAcadSecurityParams.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

procedure TAcadSecurityParams.Set_Password(const pSecret: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pSecret;
end;

function TAcadSecurityParams.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TAcadSecurityParams.Set_ProviderType(pProvType: Integer);
begin
  DefaultInterface.Set_ProviderType(pProvType);
end;

function TAcadSecurityParams.Get_ProviderType: Integer;
begin
    Result := DefaultInterface.ProviderType;
end;

procedure TAcadSecurityParams.Set_ProviderName(const pProvName: WideString);
  { Warning: The property ProviderName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderName := pProvName;
end;

function TAcadSecurityParams.Get_ProviderName: WideString;
begin
    Result := DefaultInterface.ProviderName;
end;

procedure TAcadSecurityParams.Set_Algorithm(pAlgId: Integer);
begin
  DefaultInterface.Set_Algorithm(pAlgId);
end;

function TAcadSecurityParams.Get_Algorithm: Integer;
begin
    Result := DefaultInterface.Algorithm;
end;

procedure TAcadSecurityParams.Set_KeyLength(pKeyLen: Integer);
begin
  DefaultInterface.Set_KeyLength(pKeyLen);
end;

function TAcadSecurityParams.Get_KeyLength: Integer;
begin
    Result := DefaultInterface.KeyLength;
end;

procedure TAcadSecurityParams.Set_Subject(const pCertSubject: WideString);
  { Warning: The property Subject has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subject := pCertSubject;
end;

function TAcadSecurityParams.Get_Subject: WideString;
begin
    Result := DefaultInterface.Subject;
end;

procedure TAcadSecurityParams.Set_Issuer(const pCertIssuer: WideString);
  { Warning: The property Issuer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Issuer := pCertIssuer;
end;

function TAcadSecurityParams.Get_Issuer: WideString;
begin
    Result := DefaultInterface.Issuer;
end;

procedure TAcadSecurityParams.Set_SerialNumber(const pSerialNum: WideString);
  { Warning: The property SerialNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SerialNumber := pSerialNum;
end;

function TAcadSecurityParams.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TAcadSecurityParams.Set_Comment(const pText: WideString);
  { Warning: The property Comment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Comment := pText;
end;

function TAcadSecurityParams.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

procedure TAcadSecurityParams.Set_TimeServer(const pTimeServerName: WideString);
  { Warning: The property TimeServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeServer := pTimeServerName;
end;

function TAcadSecurityParams.Get_TimeServer: WideString;
begin
    Result := DefaultInterface.TimeServer;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadSecurityParamsProperties.Create(AServer: TAcadSecurityParams);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadSecurityParamsProperties.GetDefaultInterface: IAcadSecurityParams;
begin
  Result := FServer.DefaultInterface;
end;

procedure TAcadSecurityParamsProperties.Set_Action(pOperations: Integer);
begin
  DefaultInterface.Set_Action(pOperations);
end;

function TAcadSecurityParamsProperties.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

procedure TAcadSecurityParamsProperties.Set_Password(const pSecret: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pSecret;
end;

function TAcadSecurityParamsProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TAcadSecurityParamsProperties.Set_ProviderType(pProvType: Integer);
begin
  DefaultInterface.Set_ProviderType(pProvType);
end;

function TAcadSecurityParamsProperties.Get_ProviderType: Integer;
begin
    Result := DefaultInterface.ProviderType;
end;

procedure TAcadSecurityParamsProperties.Set_ProviderName(const pProvName: WideString);
  { Warning: The property ProviderName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderName := pProvName;
end;

function TAcadSecurityParamsProperties.Get_ProviderName: WideString;
begin
    Result := DefaultInterface.ProviderName;
end;

procedure TAcadSecurityParamsProperties.Set_Algorithm(pAlgId: Integer);
begin
  DefaultInterface.Set_Algorithm(pAlgId);
end;

function TAcadSecurityParamsProperties.Get_Algorithm: Integer;
begin
    Result := DefaultInterface.Algorithm;
end;

procedure TAcadSecurityParamsProperties.Set_KeyLength(pKeyLen: Integer);
begin
  DefaultInterface.Set_KeyLength(pKeyLen);
end;

function TAcadSecurityParamsProperties.Get_KeyLength: Integer;
begin
    Result := DefaultInterface.KeyLength;
end;

procedure TAcadSecurityParamsProperties.Set_Subject(const pCertSubject: WideString);
  { Warning: The property Subject has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subject := pCertSubject;
end;

function TAcadSecurityParamsProperties.Get_Subject: WideString;
begin
    Result := DefaultInterface.Subject;
end;

procedure TAcadSecurityParamsProperties.Set_Issuer(const pCertIssuer: WideString);
  { Warning: The property Issuer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Issuer := pCertIssuer;
end;

function TAcadSecurityParamsProperties.Get_Issuer: WideString;
begin
    Result := DefaultInterface.Issuer;
end;

procedure TAcadSecurityParamsProperties.Set_SerialNumber(const pSerialNum: WideString);
  { Warning: The property SerialNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SerialNumber := pSerialNum;
end;

function TAcadSecurityParamsProperties.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TAcadSecurityParamsProperties.Set_Comment(const pText: WideString);
  { Warning: The property Comment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Comment := pText;
end;

function TAcadSecurityParamsProperties.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

procedure TAcadSecurityParamsProperties.Set_TimeServer(const pTimeServerName: WideString);
  { Warning: The property TimeServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeServer := pTimeServerName;
end;

function TAcadSecurityParamsProperties.Get_TimeServer: WideString;
begin
    Result := DefaultInterface.TimeServer;
end;

{$ENDIF}

class function CoAcadLayerStateManager.Create: IAcadLayerStateManager;
begin
  Result := CreateComObject(CLASS_AcadLayerStateManager) as IAcadLayerStateManager;
end;

class function CoAcadLayerStateManager.CreateRemote(const MachineName: string): IAcadLayerStateManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadLayerStateManager) as IAcadLayerStateManager;
end;

procedure TAcadLayerStateManager.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4B40437B-8972-4444-BBE3-1588FF55F203}';
    IntfIID:   '{46D38550-0080-484A-97B0-B3A1F5ED9824}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadLayerStateManager.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAcadLayerStateManager;
  end;
end;

procedure TAcadLayerStateManager.ConnectTo(svrIntf: IAcadLayerStateManager);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAcadLayerStateManager.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAcadLayerStateManager.GetDefaultInterface: IAcadLayerStateManager;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadLayerStateManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadLayerStateManagerProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadLayerStateManager.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadLayerStateManager.GetServerProperties: TAcadLayerStateManagerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadLayerStateManager.Set_Mask(const bsName: WideString; eMask: AcLayerStateMask);
begin
  DefaultInterface.Mask[bsName] := eMask;
end;

function TAcadLayerStateManager.Get_Mask(const bsName: WideString): AcLayerStateMask;
begin
    Result := DefaultInterface.Mask[bsName];
end;

procedure TAcadLayerStateManager.SetDatabase(const iHostDb: IAcadDatabase);
begin
  DefaultInterface.SetDatabase(iHostDb);
end;

procedure TAcadLayerStateManager.Save(const bsName: WideString; eMask: AcLayerStateMask);
begin
  DefaultInterface.Save(bsName, eMask);
end;

procedure TAcadLayerStateManager.Restore(const bsName: WideString);
begin
  DefaultInterface.Restore(bsName);
end;

procedure TAcadLayerStateManager.Delete(const bsName: WideString);
begin
  DefaultInterface.Delete(bsName);
end;

procedure TAcadLayerStateManager.Rename(const bsName: WideString; const bsNewName: WideString);
begin
  DefaultInterface.Rename(bsName, bsNewName);
end;

procedure TAcadLayerStateManager.Import(const bsFilename: WideString);
begin
  DefaultInterface.Import(bsFilename);
end;

procedure TAcadLayerStateManager.Export(const bsName: WideString; const bsFilename: WideString);
begin
  DefaultInterface.Export(bsName, bsFilename);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadLayerStateManagerProperties.Create(AServer: TAcadLayerStateManager);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadLayerStateManagerProperties.GetDefaultInterface: IAcadLayerStateManager;
begin
  Result := FServer.DefaultInterface;
end;

procedure TAcadLayerStateManagerProperties.Set_Mask(const bsName: WideString; 
                                                    eMask: AcLayerStateMask);
begin
  DefaultInterface.Mask[bsName] := eMask;
end;

function TAcadLayerStateManagerProperties.Get_Mask(const bsName: WideString): AcLayerStateMask;
begin
    Result := DefaultInterface.Mask[bsName];
end;

{$ENDIF}

class function CoAcadState.Create: IAcadState;
begin
  Result := CreateComObject(CLASS_AcadState) as IAcadState;
end;

class function CoAcadState.CreateRemote(const MachineName: string): IAcadState;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadState) as IAcadState;
end;

class function CoAcadApplication.Create: IAcadApplication;
begin
  Result := CreateComObject(CLASS_AcadApplication) as IAcadApplication;
end;

class function CoAcadApplication.CreateRemote(const MachineName: string): IAcadApplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadApplication) as IAcadApplication;
end;

class function CoAcadSelectionSet.Create: IAcadSelectionSet;
begin
  Result := CreateComObject(CLASS_AcadSelectionSet) as IAcadSelectionSet;
end;

class function CoAcadSelectionSet.CreateRemote(const MachineName: string): IAcadSelectionSet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSelectionSet) as IAcadSelectionSet;
end;

class function CoAcadSelectionSets.Create: IAcadSelectionSets;
begin
  Result := CreateComObject(CLASS_AcadSelectionSets) as IAcadSelectionSets;
end;

class function CoAcadSelectionSets.CreateRemote(const MachineName: string): IAcadSelectionSets;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadSelectionSets) as IAcadSelectionSets;
end;

class function CoAcadPlot.Create: IAcadPlot;
begin
  Result := CreateComObject(CLASS_AcadPlot) as IAcadPlot;
end;

class function CoAcadPlot.CreateRemote(const MachineName: string): IAcadPlot;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPlot) as IAcadPlot;
end;

class function CoAcadPreferences.Create: IAcadPreferences;
begin
  Result := CreateComObject(CLASS_AcadPreferences) as IAcadPreferences;
end;

class function CoAcadPreferences.CreateRemote(const MachineName: string): IAcadPreferences;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferences) as IAcadPreferences;
end;

class function CoAcadPreferencesDrafting.Create: IAcadPreferencesDrafting;
begin
  Result := CreateComObject(CLASS_AcadPreferencesDrafting) as IAcadPreferencesDrafting;
end;

class function CoAcadPreferencesDrafting.CreateRemote(const MachineName: string): IAcadPreferencesDrafting;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesDrafting) as IAcadPreferencesDrafting;
end;

class function CoAcadPreferencesDisplay.Create: IAcadPreferencesDisplay;
begin
  Result := CreateComObject(CLASS_AcadPreferencesDisplay) as IAcadPreferencesDisplay;
end;

class function CoAcadPreferencesDisplay.CreateRemote(const MachineName: string): IAcadPreferencesDisplay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesDisplay) as IAcadPreferencesDisplay;
end;

class function CoAcadPreferencesFiles.Create: IAcadPreferencesFiles;
begin
  Result := CreateComObject(CLASS_AcadPreferencesFiles) as IAcadPreferencesFiles;
end;

class function CoAcadPreferencesFiles.CreateRemote(const MachineName: string): IAcadPreferencesFiles;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesFiles) as IAcadPreferencesFiles;
end;

class function CoAcadPreferencesOpenSave.Create: IAcadPreferencesOpenSave;
begin
  Result := CreateComObject(CLASS_AcadPreferencesOpenSave) as IAcadPreferencesOpenSave;
end;

class function CoAcadPreferencesOpenSave.CreateRemote(const MachineName: string): IAcadPreferencesOpenSave;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesOpenSave) as IAcadPreferencesOpenSave;
end;

class function CoAcadPreferencesOutput.Create: IAcadPreferencesOutput;
begin
  Result := CreateComObject(CLASS_AcadPreferencesOutput) as IAcadPreferencesOutput;
end;

class function CoAcadPreferencesOutput.CreateRemote(const MachineName: string): IAcadPreferencesOutput;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesOutput) as IAcadPreferencesOutput;
end;

class function CoAcadPreferencesProfiles.Create: IAcadPreferencesProfiles;
begin
  Result := CreateComObject(CLASS_AcadPreferencesProfiles) as IAcadPreferencesProfiles;
end;

class function CoAcadPreferencesProfiles.CreateRemote(const MachineName: string): IAcadPreferencesProfiles;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesProfiles) as IAcadPreferencesProfiles;
end;

class function CoAcadPreferencesSelection.Create: IAcadPreferencesSelection;
begin
  Result := CreateComObject(CLASS_AcadPreferencesSelection) as IAcadPreferencesSelection;
end;

class function CoAcadPreferencesSelection.CreateRemote(const MachineName: string): IAcadPreferencesSelection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesSelection) as IAcadPreferencesSelection;
end;

class function CoAcadPreferencesSystem.Create: IAcadPreferencesSystem;
begin
  Result := CreateComObject(CLASS_AcadPreferencesSystem) as IAcadPreferencesSystem;
end;

class function CoAcadPreferencesSystem.CreateRemote(const MachineName: string): IAcadPreferencesSystem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesSystem) as IAcadPreferencesSystem;
end;

class function CoAcadPreferencesUser.Create: IAcadPreferencesUser;
begin
  Result := CreateComObject(CLASS_AcadPreferencesUser) as IAcadPreferencesUser;
end;

class function CoAcadPreferencesUser.CreateRemote(const MachineName: string): IAcadPreferencesUser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPreferencesUser) as IAcadPreferencesUser;
end;

class function CoAcadMenuGroups.Create: IAcadMenuGroups;
begin
  Result := CreateComObject(CLASS_AcadMenuGroups) as IAcadMenuGroups;
end;

class function CoAcadMenuGroups.CreateRemote(const MachineName: string): IAcadMenuGroups;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMenuGroups) as IAcadMenuGroups;
end;

class function CoAcadMenuGroup.Create: IAcadMenuGroup;
begin
  Result := CreateComObject(CLASS_AcadMenuGroup) as IAcadMenuGroup;
end;

class function CoAcadMenuGroup.CreateRemote(const MachineName: string): IAcadMenuGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMenuGroup) as IAcadMenuGroup;
end;

class function CoAcadMenuBar.Create: IAcadMenuBar;
begin
  Result := CreateComObject(CLASS_AcadMenuBar) as IAcadMenuBar;
end;

class function CoAcadMenuBar.CreateRemote(const MachineName: string): IAcadMenuBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadMenuBar) as IAcadMenuBar;
end;

class function CoAcadPopupMenus.Create: IAcadPopupMenus;
begin
  Result := CreateComObject(CLASS_AcadPopupMenus) as IAcadPopupMenus;
end;

class function CoAcadPopupMenus.CreateRemote(const MachineName: string): IAcadPopupMenus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPopupMenus) as IAcadPopupMenus;
end;

class function CoAcadPopupMenu.Create: IAcadPopupMenu;
begin
  Result := CreateComObject(CLASS_AcadPopupMenu) as IAcadPopupMenu;
end;

class function CoAcadPopupMenu.CreateRemote(const MachineName: string): IAcadPopupMenu;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPopupMenu) as IAcadPopupMenu;
end;

class function CoAcadPopupMenuItem.Create: IAcadPopupMenuItem;
begin
  Result := CreateComObject(CLASS_AcadPopupMenuItem) as IAcadPopupMenuItem;
end;

class function CoAcadPopupMenuItem.CreateRemote(const MachineName: string): IAcadPopupMenuItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadPopupMenuItem) as IAcadPopupMenuItem;
end;

class function CoAcadUtility.Create: IAcadUtility;
begin
  Result := CreateComObject(CLASS_AcadUtility) as IAcadUtility;
end;

class function CoAcadUtility.CreateRemote(const MachineName: string): IAcadUtility;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadUtility) as IAcadUtility;
end;

class function CoAcadDocument.Create: IAcadDocument;
begin
  Result := CreateComObject(CLASS_AcadDocument) as IAcadDocument;
end;

class function CoAcadDocument.CreateRemote(const MachineName: string): IAcadDocument;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDocument) as IAcadDocument;
end;

procedure TAcadDocument.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7AABBB95-79BE-4C0F-8024-EB6AF271231C}';
    IntfIID:   '{0EB66A59-8FF4-410B-B697-8813116B2C5F}';
    EventIID:  '{C814C69D-A74B-494C-8EE6-23731B145CCB}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAcadDocument.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAcadDocument;
  end;
end;

procedure TAcadDocument.ConnectTo(svrIntf: IAcadDocument);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAcadDocument.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAcadDocument.GetDefaultInterface: IAcadDocument;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAcadDocument.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAcadDocumentProperties.Create(Self);
{$ENDIF}
end;

destructor TAcadDocument.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAcadDocument.GetServerProperties: TAcadDocumentProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAcadDocument.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnBeginSave) then
         FOnBeginSave(Self, Params[0] {const WideString});
    2: if Assigned(FOnEndSave) then
         FOnEndSave(Self, Params[0] {const WideString});
    6: if Assigned(FOnBeginCommand) then
         FOnBeginCommand(Self, Params[0] {const WideString});
    7: if Assigned(FOnEndCommand) then
         FOnEndCommand(Self, Params[0] {const WideString});
    8: if Assigned(FOnBeginLisp) then
         FOnBeginLisp(Self, Params[0] {const WideString});
    9: if Assigned(FOnEndLisp) then
         FOnEndLisp(Self);
    10: if Assigned(FOnLispCancelled) then
         FOnLispCancelled(Self);
    11: if Assigned(FOnSelectionChanged) then
         FOnSelectionChanged(Self);
    12: if Assigned(FOnActivate) then
         FOnActivate(Self);
    13: if Assigned(FOnDeactivate) then
         FOnDeactivate(Self);
    14: if Assigned(FOnBeginRightClick) then
         FOnBeginRightClick(Self, Params[0] {OleVariant});
    15: if Assigned(FOnBeginShortcutMenuDefault) then
         FOnBeginShortcutMenuDefault(Self, IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu});
    16: if Assigned(FOnBeginShortcutMenuEdit) then
         FOnBeginShortcutMenuEdit(Self,
                                  IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu},
                                  IAcadSelectionSet((TVarData(Params[1]).VPointer)^) {out IAcadSelectionSet});
    17: if Assigned(FOnBeginShortcutMenuCommand) then
         FOnBeginShortcutMenuCommand(Self,
                                     IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu},
                                     Params[1] {const WideString});
    18: if Assigned(FOnBeginShortcutMenuGrip) then
         FOnBeginShortcutMenuGrip(Self, IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu});
    19: if Assigned(FOnBeginShortcutMenuOsnap) then
         FOnBeginShortcutMenuOsnap(Self, IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu});
    30: if Assigned(FOnEndShortcutMenu) then
         FOnEndShortcutMenu(Self, IAcadPopupMenu((TVarData(Params[0]).VPointer)^) {out IAcadPopupMenu});
    20: if Assigned(FOnBeginDoubleClick) then
         FOnBeginDoubleClick(Self, Params[0] {OleVariant});
    21: if Assigned(FOnObjectAdded) then
         FOnObjectAdded(Self, Params[0] {const IDispatch});
    22: if Assigned(FOnObjectErased) then
         FOnObjectErased(Self, Params[0] {Integer});
    23: if Assigned(FOnObjectModified) then
         FOnObjectModified(Self, Params[0] {const IDispatch});
    24: if Assigned(FOnBeginPlot) then
         FOnBeginPlot(Self, Params[0] {const WideString});
    25: if Assigned(FOnEndPlot) then
         FOnEndPlot(Self, Params[0] {const WideString});
    29: if Assigned(FOnWindowMovedOrResized) then
         FOnWindowMovedOrResized(Self,
                                 Params[0] {Integer},
                                 Params[1] {WordBool});
    31: if Assigned(FOnLayoutSwitched) then
         FOnLayoutSwitched(Self, Params[0] {const WideString});
    32: if Assigned(FOnWindowChanged) then
         FOnWindowChanged(Self, Params[0] {AcWindowState});
    33: if Assigned(FOnBeginClose) then
         FOnBeginClose(Self);
    34: if Assigned(FOnBeginDocClose) then
         FOnBeginDocClose(Self, WordBool((TVarData(Params[0]).VPointer)^) {var WordBool});
  end; {case DispID}
end;

function TAcadDocument.Get_ModelSpace: IAcadModelSpace;
begin
    Result := DefaultInterface.ModelSpace;
end;

function TAcadDocument.Get_PaperSpace: IAcadPaperSpace;
begin
    Result := DefaultInterface.PaperSpace;
end;

function TAcadDocument.Get_Blocks: IAcadBlocks;
begin
    Result := DefaultInterface.Blocks;
end;

function TAcadDocument.Get_Groups: IAcadGroups;
begin
    Result := DefaultInterface.Groups;
end;

function TAcadDocument.Get_DimStyles: IAcadDimStyles;
begin
    Result := DefaultInterface.DimStyles;
end;

function TAcadDocument.Get_Layers: IAcadLayers;
begin
    Result := DefaultInterface.Layers;
end;

function TAcadDocument.Get_Linetypes: IAcadLineTypes;
begin
    Result := DefaultInterface.Linetypes;
end;

function TAcadDocument.Get_Dictionaries: IAcadDictionaries;
begin
    Result := DefaultInterface.Dictionaries;
end;

function TAcadDocument.Get_RegisteredApplications: IAcadRegisteredApplications;
begin
    Result := DefaultInterface.RegisteredApplications;
end;

function TAcadDocument.Get_TextStyles: IAcadTextStyles;
begin
    Result := DefaultInterface.TextStyles;
end;

function TAcadDocument.Get_UserCoordinateSystems: IAcadUCSs;
begin
    Result := DefaultInterface.UserCoordinateSystems;
end;

function TAcadDocument.Get_Views: IAcadViews;
begin
    Result := DefaultInterface.Views;
end;

function TAcadDocument.Get_Viewports: IAcadViewports;
begin
    Result := DefaultInterface.Viewports;
end;

function TAcadDocument.Get_ElevationModelSpace: Double;
begin
    Result := DefaultInterface.ElevationModelSpace;
end;

procedure TAcadDocument.Set_ElevationModelSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationModelSpace(Elevation);
end;

function TAcadDocument.Get_ElevationPaperSpace: Double;
begin
    Result := DefaultInterface.ElevationPaperSpace;
end;

procedure TAcadDocument.Set_ElevationPaperSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationPaperSpace(Elevation);
end;

function TAcadDocument.Get_Limits: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Limits;
end;

procedure TAcadDocument.Set_Limits(Limits: OleVariant);
begin
  DefaultInterface.Set_Limits(Limits);
end;

function TAcadDocument.Get_Layouts: IAcadLayouts;
begin
    Result := DefaultInterface.Layouts;
end;

function TAcadDocument.Get_PlotConfigurations: IAcadPlotConfigurations;
begin
    Result := DefaultInterface.PlotConfigurations;
end;

function TAcadDocument.Get_Preferences: IAcadDatabasePreferences;
begin
    Result := DefaultInterface.Preferences;
end;

function TAcadDocument.Get_FileDependencies: IAcadFileDependencies;
begin
    Result := DefaultInterface.FileDependencies;
end;

function TAcadDocument.Get_SummaryInfo: IAcadSummaryInfo;
begin
    Result := DefaultInterface.SummaryInfo;
end;

function TAcadDocument.Get_SectionManager: IAcadSectionManager;
begin
    Result := DefaultInterface.SectionManager;
end;

function TAcadDocument.Get_Materials: IAcadMaterials;
begin
    Result := DefaultInterface.Materials;
end;

function TAcadDocument.Get_Plot: IAcadPlot;
begin
    Result := DefaultInterface.Plot;
end;

function TAcadDocument.Get_ActiveLayer: IAcadLayer;
begin
    Result := DefaultInterface.ActiveLayer;
end;

procedure TAcadDocument.Set_ActiveLayer(const pActLayer: IAcadLayer);
begin
  DefaultInterface.Set_ActiveLayer(pActLayer);
end;

function TAcadDocument.Get_ActiveLinetype: IAcadLineType;
begin
    Result := DefaultInterface.ActiveLinetype;
end;

procedure TAcadDocument.Set_ActiveLinetype(const pActLinetype: IAcadLineType);
begin
  DefaultInterface.Set_ActiveLinetype(pActLinetype);
end;

function TAcadDocument.Get_ActiveDimStyle: IAcadDimStyle;
begin
    Result := DefaultInterface.ActiveDimStyle;
end;

procedure TAcadDocument.Set_ActiveDimStyle(const pActDimStyle: IAcadDimStyle);
begin
  DefaultInterface.Set_ActiveDimStyle(pActDimStyle);
end;

function TAcadDocument.Get_ActiveTextStyle: IAcadTextStyle;
begin
    Result := DefaultInterface.ActiveTextStyle;
end;

procedure TAcadDocument.Set_ActiveTextStyle(const pActTextStyle: IAcadTextStyle);
begin
  DefaultInterface.Set_ActiveTextStyle(pActTextStyle);
end;

function TAcadDocument.Get_ActiveUCS: IAcadUCS;
begin
    Result := DefaultInterface.ActiveUCS;
end;

procedure TAcadDocument.Set_ActiveUCS(const pActUCS: IAcadUCS);
begin
  DefaultInterface.Set_ActiveUCS(pActUCS);
end;

function TAcadDocument.Get_ActiveViewport: IAcadViewport;
begin
    Result := DefaultInterface.ActiveViewport;
end;

procedure TAcadDocument.Set_ActiveViewport(const pActView: IAcadViewport);
begin
  DefaultInterface.Set_ActiveViewport(pActView);
end;

function TAcadDocument.Get_ActivePViewport: IAcadPViewport;
begin
    Result := DefaultInterface.ActivePViewport;
end;

procedure TAcadDocument.Set_ActivePViewport(const pActView: IAcadPViewport);
begin
  DefaultInterface.Set_ActivePViewport(pActView);
end;

function TAcadDocument.Get_ActiveSpace: AcActiveSpace;
begin
    Result := DefaultInterface.ActiveSpace;
end;

procedure TAcadDocument.Set_ActiveSpace(ActSpace: AcActiveSpace);
begin
  DefaultInterface.Set_ActiveSpace(ActSpace);
end;

function TAcadDocument.Get_SelectionSets: IAcadSelectionSets;
begin
    Result := DefaultInterface.SelectionSets;
end;

function TAcadDocument.Get_ActiveSelectionSet: IAcadSelectionSet;
begin
    Result := DefaultInterface.ActiveSelectionSet;
end;

function TAcadDocument.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TAcadDocument.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TAcadDocument.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TAcadDocument.Get_ObjectSnapMode: WordBool;
begin
    Result := DefaultInterface.ObjectSnapMode;
end;

procedure TAcadDocument.Set_ObjectSnapMode(fSnapMode: WordBool);
begin
  DefaultInterface.Set_ObjectSnapMode(fSnapMode);
end;

function TAcadDocument.Get_ReadOnly: WordBool;
begin
    Result := DefaultInterface.ReadOnly;
end;

function TAcadDocument.Get_Saved: WordBool;
begin
    Result := DefaultInterface.Saved;
end;

function TAcadDocument.Get_MSpace: WordBool;
begin
    Result := DefaultInterface.MSpace;
end;

procedure TAcadDocument.Set_MSpace(Mode: WordBool);
begin
  DefaultInterface.Set_MSpace(Mode);
end;

function TAcadDocument.Get_Utility: IAcadUtility;
begin
    Result := DefaultInterface.Utility;
end;

function TAcadDocument.Get_PickfirstSelectionSet: IAcadSelectionSet;
begin
    Result := DefaultInterface.PickfirstSelectionSet;
end;

function TAcadDocument.Get_Active: WordBool;
begin
    Result := DefaultInterface.Active;
end;

procedure TAcadDocument.Set_WindowState(pWinState: AcWindowState);
begin
  DefaultInterface.Set_WindowState(pWinState);
end;

function TAcadDocument.Get_WindowState: AcWindowState;
begin
    Result := DefaultInterface.WindowState;
end;

procedure TAcadDocument.Set_Width(pWidth: SYSINT);
begin
  DefaultInterface.Set_Width(pWidth);
end;

function TAcadDocument.Get_Width: SYSINT;
begin
    Result := DefaultInterface.Width;
end;

procedure TAcadDocument.Set_Height(pHeight: SYSINT);
begin
  DefaultInterface.Set_Height(pHeight);
end;

function TAcadDocument.Get_Height: SYSINT;
begin
    Result := DefaultInterface.Height;
end;

procedure TAcadDocument.Set_ActiveLayout(const pLayout: IAcadLayout);
begin
  DefaultInterface.Set_ActiveLayout(pLayout);
end;

function TAcadDocument.Get_ActiveLayout: IAcadLayout;
begin
    Result := DefaultInterface.ActiveLayout;
end;

function TAcadDocument.Get_HWND: Integer;
begin
    Result := DefaultInterface.HWND;
end;

function TAcadDocument.Get_WindowTitle: WideString;
begin
    Result := DefaultInterface.WindowTitle;
end;

function TAcadDocument.Get_Application: IAcadApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAcadDocument.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadDocument.Get_ActiveMaterial: IAcadMaterial;
begin
    Result := DefaultInterface.ActiveMaterial;
end;

procedure TAcadDocument.Set_ActiveMaterial(const pActMaterial: IAcadMaterial);
begin
  DefaultInterface.Set_ActiveMaterial(pActMaterial);
end;

function TAcadDocument.CopyObjects(Objects: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, EmptyParam, EmptyParam);
end;

function TAcadDocument.CopyObjects(Objects: OleVariant; Owner: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, Owner, EmptyParam);
end;

function TAcadDocument.CopyObjects(Objects: OleVariant; Owner: OleVariant; var IdPairs: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CopyObjects(Objects, Owner, IdPairs);
end;

function TAcadDocument.HandleToObject(const Handle: WideString): IDispatch;
begin
  Result := DefaultInterface.HandleToObject(Handle);
end;

function TAcadDocument.ObjectIdToObject(ObjectID: Integer): IDispatch;
begin
  Result := DefaultInterface.ObjectIdToObject(ObjectID);
end;

function TAcadDocument.Open(const FullName: WideString): IAcadDocument;
begin
  Result := DefaultInterface.Open(FullName, EmptyParam);
end;

function TAcadDocument.Open(const FullName: WideString; Password: OleVariant): IAcadDocument;
begin
  Result := DefaultInterface.Open(FullName, Password);
end;

procedure TAcadDocument.AuditInfo(FixErr: WordBool);
begin
  DefaultInterface.AuditInfo(FixErr);
end;

function TAcadDocument.Import(const FileName: WideString; InsertionPoint: OleVariant; 
                              ScaleFactor: Double): IDispatch;
begin
  Result := DefaultInterface.Import(FileName, InsertionPoint, ScaleFactor);
end;

procedure TAcadDocument.Export(const FileName: WideString; const Extension: WideString; 
                               const SelectionSet: IAcadSelectionSet);
begin
  DefaultInterface.Export(FileName, Extension, SelectionSet);
end;

function TAcadDocument.New(const TemplateFileName: WideString): IAcadDocument;
begin
  Result := DefaultInterface.New(TemplateFileName);
end;

procedure TAcadDocument.Save;
begin
  DefaultInterface.Save;
end;

procedure TAcadDocument.SaveAs(const FullFileName: WideString);
begin
  DefaultInterface.SaveAs(FullFileName, EmptyParam, EmptyParam);
end;

procedure TAcadDocument.SaveAs(const FullFileName: WideString; SaveAsType: OleVariant);
begin
  DefaultInterface.SaveAs(FullFileName, SaveAsType, EmptyParam);
end;

procedure TAcadDocument.SaveAs(const FullFileName: WideString; SaveAsType: OleVariant; 
                               vSecurityParams: OleVariant);
begin
  DefaultInterface.SaveAs(FullFileName, SaveAsType, vSecurityParams);
end;

procedure TAcadDocument.Wblock(const FileName: WideString; const SelectionSet: IAcadSelectionSet);
begin
  DefaultInterface.Wblock(FileName, SelectionSet);
end;

procedure TAcadDocument.PurgeAll;
begin
  DefaultInterface.PurgeAll;
end;

function TAcadDocument.GetVariable(const Name: WideString): OleVariant;
begin
  Result := DefaultInterface.GetVariable(Name);
end;

procedure TAcadDocument.SetVariable(const Name: WideString; Value: OleVariant);
begin
  DefaultInterface.SetVariable(Name, Value);
end;

procedure TAcadDocument.LoadShapeFile(const FullName: WideString);
begin
  DefaultInterface.LoadShapeFile(FullName);
end;

procedure TAcadDocument.Regen(WhichViewports: AcRegenType);
begin
  DefaultInterface.Regen(WhichViewports);
end;

procedure TAcadDocument.Activate;
begin
  DefaultInterface.Activate;
end;

procedure TAcadDocument.Close;
begin
  DefaultInterface.Close(EmptyParam, EmptyParam);
end;

procedure TAcadDocument.Close(SaveChanges: OleVariant);
begin
  DefaultInterface.Close(SaveChanges, EmptyParam);
end;

procedure TAcadDocument.Close(SaveChanges: OleVariant; FileName: OleVariant);
begin
  DefaultInterface.Close(SaveChanges, FileName);
end;

procedure TAcadDocument.SendCommand(const Command: WideString);
begin
  DefaultInterface.SendCommand(Command);
end;

procedure TAcadDocument.StartUndoMark;
begin
  DefaultInterface.StartUndoMark;
end;

procedure TAcadDocument.EndUndoMark;
begin
  DefaultInterface.EndUndoMark;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAcadDocumentProperties.Create(AServer: TAcadDocument);
begin
  inherited Create;
  FServer := AServer;
end;

function TAcadDocumentProperties.GetDefaultInterface: IAcadDocument;
begin
  Result := FServer.DefaultInterface;
end;

function TAcadDocumentProperties.Get_ModelSpace: IAcadModelSpace;
begin
    Result := DefaultInterface.ModelSpace;
end;

function TAcadDocumentProperties.Get_PaperSpace: IAcadPaperSpace;
begin
    Result := DefaultInterface.PaperSpace;
end;

function TAcadDocumentProperties.Get_Blocks: IAcadBlocks;
begin
    Result := DefaultInterface.Blocks;
end;

function TAcadDocumentProperties.Get_Groups: IAcadGroups;
begin
    Result := DefaultInterface.Groups;
end;

function TAcadDocumentProperties.Get_DimStyles: IAcadDimStyles;
begin
    Result := DefaultInterface.DimStyles;
end;

function TAcadDocumentProperties.Get_Layers: IAcadLayers;
begin
    Result := DefaultInterface.Layers;
end;

function TAcadDocumentProperties.Get_Linetypes: IAcadLineTypes;
begin
    Result := DefaultInterface.Linetypes;
end;

function TAcadDocumentProperties.Get_Dictionaries: IAcadDictionaries;
begin
    Result := DefaultInterface.Dictionaries;
end;

function TAcadDocumentProperties.Get_RegisteredApplications: IAcadRegisteredApplications;
begin
    Result := DefaultInterface.RegisteredApplications;
end;

function TAcadDocumentProperties.Get_TextStyles: IAcadTextStyles;
begin
    Result := DefaultInterface.TextStyles;
end;

function TAcadDocumentProperties.Get_UserCoordinateSystems: IAcadUCSs;
begin
    Result := DefaultInterface.UserCoordinateSystems;
end;

function TAcadDocumentProperties.Get_Views: IAcadViews;
begin
    Result := DefaultInterface.Views;
end;

function TAcadDocumentProperties.Get_Viewports: IAcadViewports;
begin
    Result := DefaultInterface.Viewports;
end;

function TAcadDocumentProperties.Get_ElevationModelSpace: Double;
begin
    Result := DefaultInterface.ElevationModelSpace;
end;

procedure TAcadDocumentProperties.Set_ElevationModelSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationModelSpace(Elevation);
end;

function TAcadDocumentProperties.Get_ElevationPaperSpace: Double;
begin
    Result := DefaultInterface.ElevationPaperSpace;
end;

procedure TAcadDocumentProperties.Set_ElevationPaperSpace(Elevation: Double);
begin
  DefaultInterface.Set_ElevationPaperSpace(Elevation);
end;

function TAcadDocumentProperties.Get_Limits: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Limits;
end;

procedure TAcadDocumentProperties.Set_Limits(Limits: OleVariant);
begin
  DefaultInterface.Set_Limits(Limits);
end;

function TAcadDocumentProperties.Get_Layouts: IAcadLayouts;
begin
    Result := DefaultInterface.Layouts;
end;

function TAcadDocumentProperties.Get_PlotConfigurations: IAcadPlotConfigurations;
begin
    Result := DefaultInterface.PlotConfigurations;
end;

function TAcadDocumentProperties.Get_Preferences: IAcadDatabasePreferences;
begin
    Result := DefaultInterface.Preferences;
end;

function TAcadDocumentProperties.Get_FileDependencies: IAcadFileDependencies;
begin
    Result := DefaultInterface.FileDependencies;
end;

function TAcadDocumentProperties.Get_SummaryInfo: IAcadSummaryInfo;
begin
    Result := DefaultInterface.SummaryInfo;
end;

function TAcadDocumentProperties.Get_SectionManager: IAcadSectionManager;
begin
    Result := DefaultInterface.SectionManager;
end;

function TAcadDocumentProperties.Get_Materials: IAcadMaterials;
begin
    Result := DefaultInterface.Materials;
end;

function TAcadDocumentProperties.Get_Plot: IAcadPlot;
begin
    Result := DefaultInterface.Plot;
end;

function TAcadDocumentProperties.Get_ActiveLayer: IAcadLayer;
begin
    Result := DefaultInterface.ActiveLayer;
end;

procedure TAcadDocumentProperties.Set_ActiveLayer(const pActLayer: IAcadLayer);
begin
  DefaultInterface.Set_ActiveLayer(pActLayer);
end;

function TAcadDocumentProperties.Get_ActiveLinetype: IAcadLineType;
begin
    Result := DefaultInterface.ActiveLinetype;
end;

procedure TAcadDocumentProperties.Set_ActiveLinetype(const pActLinetype: IAcadLineType);
begin
  DefaultInterface.Set_ActiveLinetype(pActLinetype);
end;

function TAcadDocumentProperties.Get_ActiveDimStyle: IAcadDimStyle;
begin
    Result := DefaultInterface.ActiveDimStyle;
end;

procedure TAcadDocumentProperties.Set_ActiveDimStyle(const pActDimStyle: IAcadDimStyle);
begin
  DefaultInterface.Set_ActiveDimStyle(pActDimStyle);
end;

function TAcadDocumentProperties.Get_ActiveTextStyle: IAcadTextStyle;
begin
    Result := DefaultInterface.ActiveTextStyle;
end;

procedure TAcadDocumentProperties.Set_ActiveTextStyle(const pActTextStyle: IAcadTextStyle);
begin
  DefaultInterface.Set_ActiveTextStyle(pActTextStyle);
end;

function TAcadDocumentProperties.Get_ActiveUCS: IAcadUCS;
begin
    Result := DefaultInterface.ActiveUCS;
end;

procedure TAcadDocumentProperties.Set_ActiveUCS(const pActUCS: IAcadUCS);
begin
  DefaultInterface.Set_ActiveUCS(pActUCS);
end;

function TAcadDocumentProperties.Get_ActiveViewport: IAcadViewport;
begin
    Result := DefaultInterface.ActiveViewport;
end;

procedure TAcadDocumentProperties.Set_ActiveViewport(const pActView: IAcadViewport);
begin
  DefaultInterface.Set_ActiveViewport(pActView);
end;

function TAcadDocumentProperties.Get_ActivePViewport: IAcadPViewport;
begin
    Result := DefaultInterface.ActivePViewport;
end;

procedure TAcadDocumentProperties.Set_ActivePViewport(const pActView: IAcadPViewport);
begin
  DefaultInterface.Set_ActivePViewport(pActView);
end;

function TAcadDocumentProperties.Get_ActiveSpace: AcActiveSpace;
begin
    Result := DefaultInterface.ActiveSpace;
end;

procedure TAcadDocumentProperties.Set_ActiveSpace(ActSpace: AcActiveSpace);
begin
  DefaultInterface.Set_ActiveSpace(ActSpace);
end;

function TAcadDocumentProperties.Get_SelectionSets: IAcadSelectionSets;
begin
    Result := DefaultInterface.SelectionSets;
end;

function TAcadDocumentProperties.Get_ActiveSelectionSet: IAcadSelectionSet;
begin
    Result := DefaultInterface.ActiveSelectionSet;
end;

function TAcadDocumentProperties.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TAcadDocumentProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TAcadDocumentProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TAcadDocumentProperties.Get_ObjectSnapMode: WordBool;
begin
    Result := DefaultInterface.ObjectSnapMode;
end;

procedure TAcadDocumentProperties.Set_ObjectSnapMode(fSnapMode: WordBool);
begin
  DefaultInterface.Set_ObjectSnapMode(fSnapMode);
end;

function TAcadDocumentProperties.Get_ReadOnly: WordBool;
begin
    Result := DefaultInterface.ReadOnly;
end;

function TAcadDocumentProperties.Get_Saved: WordBool;
begin
    Result := DefaultInterface.Saved;
end;

function TAcadDocumentProperties.Get_MSpace: WordBool;
begin
    Result := DefaultInterface.MSpace;
end;

procedure TAcadDocumentProperties.Set_MSpace(Mode: WordBool);
begin
  DefaultInterface.Set_MSpace(Mode);
end;

function TAcadDocumentProperties.Get_Utility: IAcadUtility;
begin
    Result := DefaultInterface.Utility;
end;

function TAcadDocumentProperties.Get_PickfirstSelectionSet: IAcadSelectionSet;
begin
    Result := DefaultInterface.PickfirstSelectionSet;
end;

function TAcadDocumentProperties.Get_Active: WordBool;
begin
    Result := DefaultInterface.Active;
end;

procedure TAcadDocumentProperties.Set_WindowState(pWinState: AcWindowState);
begin
  DefaultInterface.Set_WindowState(pWinState);
end;

function TAcadDocumentProperties.Get_WindowState: AcWindowState;
begin
    Result := DefaultInterface.WindowState;
end;

procedure TAcadDocumentProperties.Set_Width(pWidth: SYSINT);
begin
  DefaultInterface.Set_Width(pWidth);
end;

function TAcadDocumentProperties.Get_Width: SYSINT;
begin
    Result := DefaultInterface.Width;
end;

procedure TAcadDocumentProperties.Set_Height(pHeight: SYSINT);
begin
  DefaultInterface.Set_Height(pHeight);
end;

function TAcadDocumentProperties.Get_Height: SYSINT;
begin
    Result := DefaultInterface.Height;
end;

procedure TAcadDocumentProperties.Set_ActiveLayout(const pLayout: IAcadLayout);
begin
  DefaultInterface.Set_ActiveLayout(pLayout);
end;

function TAcadDocumentProperties.Get_ActiveLayout: IAcadLayout;
begin
    Result := DefaultInterface.ActiveLayout;
end;

function TAcadDocumentProperties.Get_HWND: Integer;
begin
    Result := DefaultInterface.HWND;
end;

function TAcadDocumentProperties.Get_WindowTitle: WideString;
begin
    Result := DefaultInterface.WindowTitle;
end;

function TAcadDocumentProperties.Get_Application: IAcadApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAcadDocumentProperties.Get_Database: IAcadDatabase;
begin
    Result := DefaultInterface.Database;
end;

function TAcadDocumentProperties.Get_ActiveMaterial: IAcadMaterial;
begin
    Result := DefaultInterface.ActiveMaterial;
end;

procedure TAcadDocumentProperties.Set_ActiveMaterial(const pActMaterial: IAcadMaterial);
begin
  DefaultInterface.Set_ActiveMaterial(pActMaterial);
end;

{$ENDIF}

class function CoAcadDocuments.Create: IAcadDocuments;
begin
  Result := CreateComObject(CLASS_AcadDocuments) as IAcadDocuments;
end;

class function CoAcadDocuments.CreateRemote(const MachineName: string): IAcadDocuments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadDocuments) as IAcadDocuments;
end;

class function CoAcadToolbars.Create: IAcadToolbars;
begin
  Result := CreateComObject(CLASS_AcadToolbars) as IAcadToolbars;
end;

class function CoAcadToolbars.CreateRemote(const MachineName: string): IAcadToolbars;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadToolbars) as IAcadToolbars;
end;

class function CoAcadToolbar.Create: IAcadToolbar;
begin
  Result := CreateComObject(CLASS_AcadToolbar) as IAcadToolbar;
end;

class function CoAcadToolbar.CreateRemote(const MachineName: string): IAcadToolbar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadToolbar) as IAcadToolbar;
end;

class function CoAcadToolbarItem.Create: IAcadToolbarItem;
begin
  Result := CreateComObject(CLASS_AcadToolbarItem) as IAcadToolbarItem;
end;

class function CoAcadToolbarItem.CreateRemote(const MachineName: string): IAcadToolbarItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AcadToolbarItem) as IAcadToolbarItem;
end;

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TAcadAcCmColor, TAcadSortentsTable, TAcadTableStyle, TAcadDatabase, 
    TAcadSecurityParams, TAcadLayerStateManager, TAcadDocument]);
end;

end.
